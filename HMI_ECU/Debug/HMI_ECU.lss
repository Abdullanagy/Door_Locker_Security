
HMI_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004b14  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000d6  00800060  00004b14  00004ba8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000006  00800136  00800136  00004c7e  2**0
                  ALLOC
  3 .stab         00003ca8  00000000  00000000  00004c80  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011ca  00000000  00000000  00008928  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00009af2  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00009c32  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  00009da2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  0000b9eb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000c8d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000d684  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000d7e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000da71  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000e23f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e6 22 	jmp	0x45cc	; 0x45cc <__vector_7>
      20:	0c 94 19 23 	jmp	0x4632	; 0x4632 <__vector_8>
      24:	0c 94 b3 22 	jmp	0x4566	; 0x4566 <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e4 e1       	ldi	r30, 0x14	; 20
      68:	fb e4       	ldi	r31, 0x4B	; 75
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a6 33       	cpi	r26, 0x36	; 54
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	a6 e3       	ldi	r26, 0x36	; 54
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ac 33       	cpi	r26, 0x3C	; 60
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 6f 18 	call	0x30de	; 0x30de <main>
      8a:	0c 94 88 25 	jmp	0x4b10	; 0x4b10 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	af e1       	ldi	r26, 0x1F	; 31
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 0c 25 	jmp	0x4a18	; 0x4a18 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8f e1       	ldi	r24, 0x1F	; 31
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 28 25 	jmp	0x4a50	; 0x4a50 <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 18 25 	jmp	0x4a30	; 0x4a30 <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 34 25 	jmp	0x4a68	; 0x4a68 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 1c 25 	jmp	0x4a38	; 0x4a38 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 38 25 	jmp	0x4a70	; 0x4a70 <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer>:
/*********************************************************************************
 *                            Users Function                                  *
 ********************************************************************************/

void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     b4e:	80 91 37 01 	lds	r24, 0x0137
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 37 01 	sts	0x0137, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <delay>:

/* Description: Delay Function using Timer1*/
void delay(uint8 second)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2c 97       	sbiw	r28, 0x0c	; 12
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	8f 83       	std	Y+7, r24	; 0x07
	/* Configure Timer With Desired Specifications */
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	99 87       	std	Y+9, r25	; 0x09
     b7a:	88 87       	std	Y+8, r24	; 0x08
     b7c:	e8 e2       	ldi	r30, 0x28	; 40
     b7e:	f1 e0       	ldi	r31, 0x01	; 1
     b80:	fb 87       	std	Y+11, r31	; 0x0b
     b82:	ea 87       	std	Y+10, r30	; 0x0a
     b84:	f6 e0       	ldi	r31, 0x06	; 6
     b86:	fc 87       	std	Y+12, r31	; 0x0c
     b88:	ea 85       	ldd	r30, Y+10	; 0x0a
     b8a:	fb 85       	ldd	r31, Y+11	; 0x0b
     b8c:	00 80       	ld	r0, Z
     b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b90:	9b 85       	ldd	r25, Y+11	; 0x0b
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	9b 87       	std	Y+11, r25	; 0x0b
     b96:	8a 87       	std	Y+10, r24	; 0x0a
     b98:	e8 85       	ldd	r30, Y+8	; 0x08
     b9a:	f9 85       	ldd	r31, Y+9	; 0x09
     b9c:	00 82       	st	Z, r0
     b9e:	88 85       	ldd	r24, Y+8	; 0x08
     ba0:	99 85       	ldd	r25, Y+9	; 0x09
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	99 87       	std	Y+9, r25	; 0x09
     ba6:	88 87       	std	Y+8, r24	; 0x08
     ba8:	9c 85       	ldd	r25, Y+12	; 0x0c
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	9c 87       	std	Y+12, r25	; 0x0c
     bae:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb0:	ee 23       	and	r30, r30
     bb2:	51 f7       	brne	.-44     	; 0xb88 <delay+0x2a>

	Timer1_init(&t_configure); /* Start Timer */
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0e 94 4c 23 	call	0x4698	; 0x4698 <Timer1_init>
	while(g_count != second); /* Wait until g_count=input seconds  */
     bbc:	90 91 37 01 	lds	r25, 0x0137
     bc0:	8f 81       	ldd	r24, Y+7	; 0x07
     bc2:	98 17       	cp	r25, r24
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <delay+0x5e>
	Timer1_deInit(); /* Stop Timer */
     bc6:	0e 94 ac 23 	call	0x4758	; 0x4758 <Timer1_deInit>
	g_count = 0 ;
     bca:	10 92 37 01 	sts	0x0137, r1
}
     bce:	2c 96       	adiw	r28, 0x0c	; 12
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <creat_pass>:

/*********** Creat New Password ************************/
void creat_pass(void){
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	cc 5b       	subi	r28, 0xBC	; 188
     bee:	d0 40       	sbci	r29, 0x00	; 0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
	int check=1;
     bfa:	fe 01       	movw	r30, r28
     bfc:	ef 54       	subi	r30, 0x4F	; 79
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	81 e0       	ldi	r24, 0x01	; 1
     c02:	90 e0       	ldi	r25, 0x00	; 0
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
	uint8 pass1[5];
	uint8 pass2[5];

	/*********************** To save first Password entering from user to HMI_ECU ************************/
	LCD_clearScreen();//clear the LCD
     c08:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_displayString("PLZ enter Pass :");//Display on LCD
     c0c:	80 e6       	ldi	r24, 0x60	; 96
     c0e:	90 e0       	ldi	r25, 0x00	; 0
     c10:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
     c14:	9c c1       	rjmp	.+824    	; 0xf4e <creat_pass+0x36e>
	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password

		for (int i=0;i<5;i++){
     c16:	fe 01       	movw	r30, r28
     c18:	e1 55       	subi	r30, 0x51	; 81
     c1a:	ff 4f       	sbci	r31, 0xFF	; 255
     c1c:	11 82       	std	Z+1, r1	; 0x01
     c1e:	10 82       	st	Z, r1
     c20:	8d c1       	rjmp	.+794    	; 0xf3c <creat_pass+0x35c>
			pass1[i]=KEYPAD_getPressedKey();
     c22:	fe 01       	movw	r30, r28
     c24:	e1 55       	subi	r30, 0x51	; 81
     c26:	ff 4f       	sbci	r31, 0xFF	; 255
     c28:	00 81       	ld	r16, Z
     c2a:	11 81       	ldd	r17, Z+1	; 0x01
     c2c:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
     c30:	28 2f       	mov	r18, r24
     c32:	ce 01       	movw	r24, r28
     c34:	8d 54       	subi	r24, 0x4D	; 77
     c36:	9f 4f       	sbci	r25, 0xFF	; 255
     c38:	fc 01       	movw	r30, r24
     c3a:	e0 0f       	add	r30, r16
     c3c:	f1 1f       	adc	r31, r17
     c3e:	20 83       	st	Z, r18
     c40:	fe 01       	movw	r30, r28
     c42:	eb 55       	subi	r30, 0x5B	; 91
     c44:	ff 4f       	sbci	r31, 0xFF	; 255
     c46:	80 e0       	ldi	r24, 0x00	; 0
     c48:	90 e0       	ldi	r25, 0x00	; 0
     c4a:	a8 ec       	ldi	r26, 0xC8	; 200
     c4c:	b2 e4       	ldi	r27, 0x42	; 66
     c4e:	80 83       	st	Z, r24
     c50:	91 83       	std	Z+1, r25	; 0x01
     c52:	a2 83       	std	Z+2, r26	; 0x02
     c54:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c56:	8e 01       	movw	r16, r28
     c58:	0f 55       	subi	r16, 0x5F	; 95
     c5a:	1f 4f       	sbci	r17, 0xFF	; 255
     c5c:	fe 01       	movw	r30, r28
     c5e:	eb 55       	subi	r30, 0x5B	; 91
     c60:	ff 4f       	sbci	r31, 0xFF	; 255
     c62:	60 81       	ld	r22, Z
     c64:	71 81       	ldd	r23, Z+1	; 0x01
     c66:	82 81       	ldd	r24, Z+2	; 0x02
     c68:	93 81       	ldd	r25, Z+3	; 0x03
     c6a:	20 e0       	ldi	r18, 0x00	; 0
     c6c:	30 e0       	ldi	r19, 0x00	; 0
     c6e:	4a ef       	ldi	r20, 0xFA	; 250
     c70:	54 e4       	ldi	r21, 0x44	; 68
     c72:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c76:	dc 01       	movw	r26, r24
     c78:	cb 01       	movw	r24, r22
     c7a:	f8 01       	movw	r30, r16
     c7c:	80 83       	st	Z, r24
     c7e:	91 83       	std	Z+1, r25	; 0x01
     c80:	a2 83       	std	Z+2, r26	; 0x02
     c82:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c84:	fe 01       	movw	r30, r28
     c86:	ef 55       	subi	r30, 0x5F	; 95
     c88:	ff 4f       	sbci	r31, 0xFF	; 255
     c8a:	60 81       	ld	r22, Z
     c8c:	71 81       	ldd	r23, Z+1	; 0x01
     c8e:	82 81       	ldd	r24, Z+2	; 0x02
     c90:	93 81       	ldd	r25, Z+3	; 0x03
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e8       	ldi	r20, 0x80	; 128
     c98:	5f e3       	ldi	r21, 0x3F	; 63
     c9a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c9e:	88 23       	and	r24, r24
     ca0:	44 f4       	brge	.+16     	; 0xcb2 <creat_pass+0xd2>
		__ticks = 1;
     ca2:	fe 01       	movw	r30, r28
     ca4:	e1 56       	subi	r30, 0x61	; 97
     ca6:	ff 4f       	sbci	r31, 0xFF	; 255
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	91 83       	std	Z+1, r25	; 0x01
     cae:	80 83       	st	Z, r24
     cb0:	64 c0       	rjmp	.+200    	; 0xd7a <creat_pass+0x19a>
	else if (__tmp > 65535)
     cb2:	fe 01       	movw	r30, r28
     cb4:	ef 55       	subi	r30, 0x5F	; 95
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	60 81       	ld	r22, Z
     cba:	71 81       	ldd	r23, Z+1	; 0x01
     cbc:	82 81       	ldd	r24, Z+2	; 0x02
     cbe:	93 81       	ldd	r25, Z+3	; 0x03
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	3f ef       	ldi	r19, 0xFF	; 255
     cc4:	4f e7       	ldi	r20, 0x7F	; 127
     cc6:	57 e4       	ldi	r21, 0x47	; 71
     cc8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ccc:	18 16       	cp	r1, r24
     cce:	0c f0       	brlt	.+2      	; 0xcd2 <creat_pass+0xf2>
     cd0:	43 c0       	rjmp	.+134    	; 0xd58 <creat_pass+0x178>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cd2:	fe 01       	movw	r30, r28
     cd4:	eb 55       	subi	r30, 0x5B	; 91
     cd6:	ff 4f       	sbci	r31, 0xFF	; 255
     cd8:	60 81       	ld	r22, Z
     cda:	71 81       	ldd	r23, Z+1	; 0x01
     cdc:	82 81       	ldd	r24, Z+2	; 0x02
     cde:	93 81       	ldd	r25, Z+3	; 0x03
     ce0:	20 e0       	ldi	r18, 0x00	; 0
     ce2:	30 e0       	ldi	r19, 0x00	; 0
     ce4:	40 e2       	ldi	r20, 0x20	; 32
     ce6:	51 e4       	ldi	r21, 0x41	; 65
     ce8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cec:	dc 01       	movw	r26, r24
     cee:	cb 01       	movw	r24, r22
     cf0:	8e 01       	movw	r16, r28
     cf2:	01 56       	subi	r16, 0x61	; 97
     cf4:	1f 4f       	sbci	r17, 0xFF	; 255
     cf6:	bc 01       	movw	r22, r24
     cf8:	cd 01       	movw	r24, r26
     cfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cfe:	dc 01       	movw	r26, r24
     d00:	cb 01       	movw	r24, r22
     d02:	f8 01       	movw	r30, r16
     d04:	91 83       	std	Z+1, r25	; 0x01
     d06:	80 83       	st	Z, r24
     d08:	1f c0       	rjmp	.+62     	; 0xd48 <creat_pass+0x168>
     d0a:	fe 01       	movw	r30, r28
     d0c:	e3 56       	subi	r30, 0x63	; 99
     d0e:	ff 4f       	sbci	r31, 0xFF	; 255
     d10:	88 ec       	ldi	r24, 0xC8	; 200
     d12:	90 e0       	ldi	r25, 0x00	; 0
     d14:	91 83       	std	Z+1, r25	; 0x01
     d16:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     d18:	fe 01       	movw	r30, r28
     d1a:	e3 56       	subi	r30, 0x63	; 99
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	80 81       	ld	r24, Z
     d20:	91 81       	ldd	r25, Z+1	; 0x01
     d22:	01 97       	sbiw	r24, 0x01	; 1
     d24:	f1 f7       	brne	.-4      	; 0xd22 <creat_pass+0x142>
     d26:	fe 01       	movw	r30, r28
     d28:	e3 56       	subi	r30, 0x63	; 99
     d2a:	ff 4f       	sbci	r31, 0xFF	; 255
     d2c:	91 83       	std	Z+1, r25	; 0x01
     d2e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d30:	de 01       	movw	r26, r28
     d32:	a1 56       	subi	r26, 0x61	; 97
     d34:	bf 4f       	sbci	r27, 0xFF	; 255
     d36:	fe 01       	movw	r30, r28
     d38:	e1 56       	subi	r30, 0x61	; 97
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	80 81       	ld	r24, Z
     d3e:	91 81       	ldd	r25, Z+1	; 0x01
     d40:	01 97       	sbiw	r24, 0x01	; 1
     d42:	11 96       	adiw	r26, 0x01	; 1
     d44:	9c 93       	st	X, r25
     d46:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d48:	fe 01       	movw	r30, r28
     d4a:	e1 56       	subi	r30, 0x61	; 97
     d4c:	ff 4f       	sbci	r31, 0xFF	; 255
     d4e:	80 81       	ld	r24, Z
     d50:	91 81       	ldd	r25, Z+1	; 0x01
     d52:	00 97       	sbiw	r24, 0x00	; 0
     d54:	d1 f6       	brne	.-76     	; 0xd0a <creat_pass+0x12a>
     d56:	27 c0       	rjmp	.+78     	; 0xda6 <creat_pass+0x1c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d58:	8e 01       	movw	r16, r28
     d5a:	01 56       	subi	r16, 0x61	; 97
     d5c:	1f 4f       	sbci	r17, 0xFF	; 255
     d5e:	fe 01       	movw	r30, r28
     d60:	ef 55       	subi	r30, 0x5F	; 95
     d62:	ff 4f       	sbci	r31, 0xFF	; 255
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d70:	dc 01       	movw	r26, r24
     d72:	cb 01       	movw	r24, r22
     d74:	f8 01       	movw	r30, r16
     d76:	91 83       	std	Z+1, r25	; 0x01
     d78:	80 83       	st	Z, r24
     d7a:	de 01       	movw	r26, r28
     d7c:	a5 56       	subi	r26, 0x65	; 101
     d7e:	bf 4f       	sbci	r27, 0xFF	; 255
     d80:	fe 01       	movw	r30, r28
     d82:	e1 56       	subi	r30, 0x61	; 97
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 81       	ld	r24, Z
     d88:	91 81       	ldd	r25, Z+1	; 0x01
     d8a:	8d 93       	st	X+, r24
     d8c:	9c 93       	st	X, r25
     d8e:	fe 01       	movw	r30, r28
     d90:	e5 56       	subi	r30, 0x65	; 101
     d92:	ff 4f       	sbci	r31, 0xFF	; 255
     d94:	80 81       	ld	r24, Z
     d96:	91 81       	ldd	r25, Z+1	; 0x01
     d98:	01 97       	sbiw	r24, 0x01	; 1
     d9a:	f1 f7       	brne	.-4      	; 0xd98 <creat_pass+0x1b8>
     d9c:	fe 01       	movw	r30, r28
     d9e:	e5 56       	subi	r30, 0x65	; 101
     da0:	ff 4f       	sbci	r31, 0xFF	; 255
     da2:	91 83       	std	Z+1, r25	; 0x01
     da4:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_moveCursor(1,i);
     da6:	fe 01       	movw	r30, r28
     da8:	e1 55       	subi	r30, 0x51	; 81
     daa:	ff 4f       	sbci	r31, 0xFF	; 255
     dac:	90 81       	ld	r25, Z
     dae:	81 e0       	ldi	r24, 0x01	; 1
     db0:	69 2f       	mov	r22, r25
     db2:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
			LCD_displayString("*");
     db6:	81 e7       	ldi	r24, 0x71	; 113
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
     dbe:	fe 01       	movw	r30, r28
     dc0:	e9 56       	subi	r30, 0x69	; 105
     dc2:	ff 4f       	sbci	r31, 0xFF	; 255
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 e0       	ldi	r25, 0x00	; 0
     dc8:	a8 e4       	ldi	r26, 0x48	; 72
     dca:	b3 e4       	ldi	r27, 0x43	; 67
     dcc:	80 83       	st	Z, r24
     dce:	91 83       	std	Z+1, r25	; 0x01
     dd0:	a2 83       	std	Z+2, r26	; 0x02
     dd2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     dd4:	8e 01       	movw	r16, r28
     dd6:	0d 56       	subi	r16, 0x6D	; 109
     dd8:	1f 4f       	sbci	r17, 0xFF	; 255
     dda:	fe 01       	movw	r30, r28
     ddc:	e9 56       	subi	r30, 0x69	; 105
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	60 81       	ld	r22, Z
     de2:	71 81       	ldd	r23, Z+1	; 0x01
     de4:	82 81       	ldd	r24, Z+2	; 0x02
     de6:	93 81       	ldd	r25, Z+3	; 0x03
     de8:	20 e0       	ldi	r18, 0x00	; 0
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	4a ef       	ldi	r20, 0xFA	; 250
     dee:	54 e4       	ldi	r21, 0x44	; 68
     df0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     df4:	dc 01       	movw	r26, r24
     df6:	cb 01       	movw	r24, r22
     df8:	f8 01       	movw	r30, r16
     dfa:	80 83       	st	Z, r24
     dfc:	91 83       	std	Z+1, r25	; 0x01
     dfe:	a2 83       	std	Z+2, r26	; 0x02
     e00:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e02:	fe 01       	movw	r30, r28
     e04:	ed 56       	subi	r30, 0x6D	; 109
     e06:	ff 4f       	sbci	r31, 0xFF	; 255
     e08:	60 81       	ld	r22, Z
     e0a:	71 81       	ldd	r23, Z+1	; 0x01
     e0c:	82 81       	ldd	r24, Z+2	; 0x02
     e0e:	93 81       	ldd	r25, Z+3	; 0x03
     e10:	20 e0       	ldi	r18, 0x00	; 0
     e12:	30 e0       	ldi	r19, 0x00	; 0
     e14:	40 e8       	ldi	r20, 0x80	; 128
     e16:	5f e3       	ldi	r21, 0x3F	; 63
     e18:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e1c:	88 23       	and	r24, r24
     e1e:	44 f4       	brge	.+16     	; 0xe30 <creat_pass+0x250>
		__ticks = 1;
     e20:	fe 01       	movw	r30, r28
     e22:	ef 56       	subi	r30, 0x6F	; 111
     e24:	ff 4f       	sbci	r31, 0xFF	; 255
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	91 83       	std	Z+1, r25	; 0x01
     e2c:	80 83       	st	Z, r24
     e2e:	64 c0       	rjmp	.+200    	; 0xef8 <creat_pass+0x318>
	else if (__tmp > 65535)
     e30:	fe 01       	movw	r30, r28
     e32:	ed 56       	subi	r30, 0x6D	; 109
     e34:	ff 4f       	sbci	r31, 0xFF	; 255
     e36:	60 81       	ld	r22, Z
     e38:	71 81       	ldd	r23, Z+1	; 0x01
     e3a:	82 81       	ldd	r24, Z+2	; 0x02
     e3c:	93 81       	ldd	r25, Z+3	; 0x03
     e3e:	20 e0       	ldi	r18, 0x00	; 0
     e40:	3f ef       	ldi	r19, 0xFF	; 255
     e42:	4f e7       	ldi	r20, 0x7F	; 127
     e44:	57 e4       	ldi	r21, 0x47	; 71
     e46:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e4a:	18 16       	cp	r1, r24
     e4c:	0c f0       	brlt	.+2      	; 0xe50 <creat_pass+0x270>
     e4e:	43 c0       	rjmp	.+134    	; 0xed6 <creat_pass+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e50:	fe 01       	movw	r30, r28
     e52:	e9 56       	subi	r30, 0x69	; 105
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	60 81       	ld	r22, Z
     e58:	71 81       	ldd	r23, Z+1	; 0x01
     e5a:	82 81       	ldd	r24, Z+2	; 0x02
     e5c:	93 81       	ldd	r25, Z+3	; 0x03
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	30 e0       	ldi	r19, 0x00	; 0
     e62:	40 e2       	ldi	r20, 0x20	; 32
     e64:	51 e4       	ldi	r21, 0x41	; 65
     e66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6a:	dc 01       	movw	r26, r24
     e6c:	cb 01       	movw	r24, r22
     e6e:	8e 01       	movw	r16, r28
     e70:	0f 56       	subi	r16, 0x6F	; 111
     e72:	1f 4f       	sbci	r17, 0xFF	; 255
     e74:	bc 01       	movw	r22, r24
     e76:	cd 01       	movw	r24, r26
     e78:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7c:	dc 01       	movw	r26, r24
     e7e:	cb 01       	movw	r24, r22
     e80:	f8 01       	movw	r30, r16
     e82:	91 83       	std	Z+1, r25	; 0x01
     e84:	80 83       	st	Z, r24
     e86:	1f c0       	rjmp	.+62     	; 0xec6 <creat_pass+0x2e6>
     e88:	fe 01       	movw	r30, r28
     e8a:	e1 57       	subi	r30, 0x71	; 113
     e8c:	ff 4f       	sbci	r31, 0xFF	; 255
     e8e:	88 ec       	ldi	r24, 0xC8	; 200
     e90:	90 e0       	ldi	r25, 0x00	; 0
     e92:	91 83       	std	Z+1, r25	; 0x01
     e94:	80 83       	st	Z, r24
     e96:	fe 01       	movw	r30, r28
     e98:	e1 57       	subi	r30, 0x71	; 113
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	80 81       	ld	r24, Z
     e9e:	91 81       	ldd	r25, Z+1	; 0x01
     ea0:	01 97       	sbiw	r24, 0x01	; 1
     ea2:	f1 f7       	brne	.-4      	; 0xea0 <creat_pass+0x2c0>
     ea4:	fe 01       	movw	r30, r28
     ea6:	e1 57       	subi	r30, 0x71	; 113
     ea8:	ff 4f       	sbci	r31, 0xFF	; 255
     eaa:	91 83       	std	Z+1, r25	; 0x01
     eac:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     eae:	de 01       	movw	r26, r28
     eb0:	af 56       	subi	r26, 0x6F	; 111
     eb2:	bf 4f       	sbci	r27, 0xFF	; 255
     eb4:	fe 01       	movw	r30, r28
     eb6:	ef 56       	subi	r30, 0x6F	; 111
     eb8:	ff 4f       	sbci	r31, 0xFF	; 255
     eba:	80 81       	ld	r24, Z
     ebc:	91 81       	ldd	r25, Z+1	; 0x01
     ebe:	01 97       	sbiw	r24, 0x01	; 1
     ec0:	11 96       	adiw	r26, 0x01	; 1
     ec2:	9c 93       	st	X, r25
     ec4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ec6:	fe 01       	movw	r30, r28
     ec8:	ef 56       	subi	r30, 0x6F	; 111
     eca:	ff 4f       	sbci	r31, 0xFF	; 255
     ecc:	80 81       	ld	r24, Z
     ece:	91 81       	ldd	r25, Z+1	; 0x01
     ed0:	00 97       	sbiw	r24, 0x00	; 0
     ed2:	d1 f6       	brne	.-76     	; 0xe88 <creat_pass+0x2a8>
     ed4:	27 c0       	rjmp	.+78     	; 0xf24 <creat_pass+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ed6:	8e 01       	movw	r16, r28
     ed8:	0f 56       	subi	r16, 0x6F	; 111
     eda:	1f 4f       	sbci	r17, 0xFF	; 255
     edc:	fe 01       	movw	r30, r28
     ede:	ed 56       	subi	r30, 0x6D	; 109
     ee0:	ff 4f       	sbci	r31, 0xFF	; 255
     ee2:	60 81       	ld	r22, Z
     ee4:	71 81       	ldd	r23, Z+1	; 0x01
     ee6:	82 81       	ldd	r24, Z+2	; 0x02
     ee8:	93 81       	ldd	r25, Z+3	; 0x03
     eea:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     eee:	dc 01       	movw	r26, r24
     ef0:	cb 01       	movw	r24, r22
     ef2:	f8 01       	movw	r30, r16
     ef4:	91 83       	std	Z+1, r25	; 0x01
     ef6:	80 83       	st	Z, r24
     ef8:	de 01       	movw	r26, r28
     efa:	a3 57       	subi	r26, 0x73	; 115
     efc:	bf 4f       	sbci	r27, 0xFF	; 255
     efe:	fe 01       	movw	r30, r28
     f00:	ef 56       	subi	r30, 0x6F	; 111
     f02:	ff 4f       	sbci	r31, 0xFF	; 255
     f04:	80 81       	ld	r24, Z
     f06:	91 81       	ldd	r25, Z+1	; 0x01
     f08:	8d 93       	st	X+, r24
     f0a:	9c 93       	st	X, r25
     f0c:	fe 01       	movw	r30, r28
     f0e:	e3 57       	subi	r30, 0x73	; 115
     f10:	ff 4f       	sbci	r31, 0xFF	; 255
     f12:	80 81       	ld	r24, Z
     f14:	91 81       	ldd	r25, Z+1	; 0x01
     f16:	01 97       	sbiw	r24, 0x01	; 1
     f18:	f1 f7       	brne	.-4      	; 0xf16 <creat_pass+0x336>
     f1a:	fe 01       	movw	r30, r28
     f1c:	e3 57       	subi	r30, 0x73	; 115
     f1e:	ff 4f       	sbci	r31, 0xFF	; 255
     f20:	91 83       	std	Z+1, r25	; 0x01
     f22:	80 83       	st	Z, r24
	/*********************** To save first Password entering from user to HMI_ECU ************************/
	LCD_clearScreen();//clear the LCD
	LCD_displayString("PLZ enter Pass :");//Display on LCD
	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password

		for (int i=0;i<5;i++){
     f24:	de 01       	movw	r26, r28
     f26:	a1 55       	subi	r26, 0x51	; 81
     f28:	bf 4f       	sbci	r27, 0xFF	; 255
     f2a:	fe 01       	movw	r30, r28
     f2c:	e1 55       	subi	r30, 0x51	; 81
     f2e:	ff 4f       	sbci	r31, 0xFF	; 255
     f30:	80 81       	ld	r24, Z
     f32:	91 81       	ldd	r25, Z+1	; 0x01
     f34:	01 96       	adiw	r24, 0x01	; 1
     f36:	11 96       	adiw	r26, 0x01	; 1
     f38:	9c 93       	st	X, r25
     f3a:	8e 93       	st	-X, r24
     f3c:	fe 01       	movw	r30, r28
     f3e:	e1 55       	subi	r30, 0x51	; 81
     f40:	ff 4f       	sbci	r31, 0xFF	; 255
     f42:	80 81       	ld	r24, Z
     f44:	91 81       	ldd	r25, Z+1	; 0x01
     f46:	85 30       	cpi	r24, 0x05	; 5
     f48:	91 05       	cpc	r25, r1
     f4a:	0c f4       	brge	.+2      	; 0xf4e <creat_pass+0x36e>
     f4c:	6a ce       	rjmp	.-812    	; 0xc22 <creat_pass+0x42>
	uint8 pass2[5];

	/*********************** To save first Password entering from user to HMI_ECU ************************/
	LCD_clearScreen();//clear the LCD
	LCD_displayString("PLZ enter Pass :");//Display on LCD
	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password
     f4e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
     f52:	8d 33       	cpi	r24, 0x3D	; 61
     f54:	09 f0       	breq	.+2      	; 0xf58 <creat_pass+0x378>
     f56:	5f ce       	rjmp	.-834    	; 0xc16 <creat_pass+0x36>
     f58:	fe 01       	movw	r30, r28
     f5a:	e7 57       	subi	r30, 0x77	; 119
     f5c:	ff 4f       	sbci	r31, 0xFF	; 255
     f5e:	80 e0       	ldi	r24, 0x00	; 0
     f60:	90 e0       	ldi	r25, 0x00	; 0
     f62:	a8 e4       	ldi	r26, 0x48	; 72
     f64:	b2 e4       	ldi	r27, 0x42	; 66
     f66:	80 83       	st	Z, r24
     f68:	91 83       	std	Z+1, r25	; 0x01
     f6a:	a2 83       	std	Z+2, r26	; 0x02
     f6c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f6e:	8e 01       	movw	r16, r28
     f70:	0b 57       	subi	r16, 0x7B	; 123
     f72:	1f 4f       	sbci	r17, 0xFF	; 255
     f74:	fe 01       	movw	r30, r28
     f76:	e7 57       	subi	r30, 0x77	; 119
     f78:	ff 4f       	sbci	r31, 0xFF	; 255
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	20 e0       	ldi	r18, 0x00	; 0
     f84:	30 e0       	ldi	r19, 0x00	; 0
     f86:	4a ef       	ldi	r20, 0xFA	; 250
     f88:	54 e4       	ldi	r21, 0x44	; 68
     f8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f8e:	dc 01       	movw	r26, r24
     f90:	cb 01       	movw	r24, r22
     f92:	f8 01       	movw	r30, r16
     f94:	80 83       	st	Z, r24
     f96:	91 83       	std	Z+1, r25	; 0x01
     f98:	a2 83       	std	Z+2, r26	; 0x02
     f9a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f9c:	fe 01       	movw	r30, r28
     f9e:	eb 57       	subi	r30, 0x7B	; 123
     fa0:	ff 4f       	sbci	r31, 0xFF	; 255
     fa2:	60 81       	ld	r22, Z
     fa4:	71 81       	ldd	r23, Z+1	; 0x01
     fa6:	82 81       	ldd	r24, Z+2	; 0x02
     fa8:	93 81       	ldd	r25, Z+3	; 0x03
     faa:	20 e0       	ldi	r18, 0x00	; 0
     fac:	30 e0       	ldi	r19, 0x00	; 0
     fae:	40 e8       	ldi	r20, 0x80	; 128
     fb0:	5f e3       	ldi	r21, 0x3F	; 63
     fb2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     fb6:	88 23       	and	r24, r24
     fb8:	44 f4       	brge	.+16     	; 0xfca <creat_pass+0x3ea>
		__ticks = 1;
     fba:	fe 01       	movw	r30, r28
     fbc:	ed 57       	subi	r30, 0x7D	; 125
     fbe:	ff 4f       	sbci	r31, 0xFF	; 255
     fc0:	81 e0       	ldi	r24, 0x01	; 1
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	91 83       	std	Z+1, r25	; 0x01
     fc6:	80 83       	st	Z, r24
     fc8:	64 c0       	rjmp	.+200    	; 0x1092 <creat_pass+0x4b2>
	else if (__tmp > 65535)
     fca:	fe 01       	movw	r30, r28
     fcc:	eb 57       	subi	r30, 0x7B	; 123
     fce:	ff 4f       	sbci	r31, 0xFF	; 255
     fd0:	60 81       	ld	r22, Z
     fd2:	71 81       	ldd	r23, Z+1	; 0x01
     fd4:	82 81       	ldd	r24, Z+2	; 0x02
     fd6:	93 81       	ldd	r25, Z+3	; 0x03
     fd8:	20 e0       	ldi	r18, 0x00	; 0
     fda:	3f ef       	ldi	r19, 0xFF	; 255
     fdc:	4f e7       	ldi	r20, 0x7F	; 127
     fde:	57 e4       	ldi	r21, 0x47	; 71
     fe0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fe4:	18 16       	cp	r1, r24
     fe6:	0c f0       	brlt	.+2      	; 0xfea <creat_pass+0x40a>
     fe8:	43 c0       	rjmp	.+134    	; 0x1070 <creat_pass+0x490>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fea:	fe 01       	movw	r30, r28
     fec:	e7 57       	subi	r30, 0x77	; 119
     fee:	ff 4f       	sbci	r31, 0xFF	; 255
     ff0:	60 81       	ld	r22, Z
     ff2:	71 81       	ldd	r23, Z+1	; 0x01
     ff4:	82 81       	ldd	r24, Z+2	; 0x02
     ff6:	93 81       	ldd	r25, Z+3	; 0x03
     ff8:	20 e0       	ldi	r18, 0x00	; 0
     ffa:	30 e0       	ldi	r19, 0x00	; 0
     ffc:	40 e2       	ldi	r20, 0x20	; 32
     ffe:	51 e4       	ldi	r21, 0x41	; 65
    1000:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1004:	dc 01       	movw	r26, r24
    1006:	cb 01       	movw	r24, r22
    1008:	8e 01       	movw	r16, r28
    100a:	0d 57       	subi	r16, 0x7D	; 125
    100c:	1f 4f       	sbci	r17, 0xFF	; 255
    100e:	bc 01       	movw	r22, r24
    1010:	cd 01       	movw	r24, r26
    1012:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1016:	dc 01       	movw	r26, r24
    1018:	cb 01       	movw	r24, r22
    101a:	f8 01       	movw	r30, r16
    101c:	91 83       	std	Z+1, r25	; 0x01
    101e:	80 83       	st	Z, r24
    1020:	1f c0       	rjmp	.+62     	; 0x1060 <creat_pass+0x480>
    1022:	fe 01       	movw	r30, r28
    1024:	ef 57       	subi	r30, 0x7F	; 127
    1026:	ff 4f       	sbci	r31, 0xFF	; 255
    1028:	88 ec       	ldi	r24, 0xC8	; 200
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	91 83       	std	Z+1, r25	; 0x01
    102e:	80 83       	st	Z, r24
    1030:	fe 01       	movw	r30, r28
    1032:	ef 57       	subi	r30, 0x7F	; 127
    1034:	ff 4f       	sbci	r31, 0xFF	; 255
    1036:	80 81       	ld	r24, Z
    1038:	91 81       	ldd	r25, Z+1	; 0x01
    103a:	01 97       	sbiw	r24, 0x01	; 1
    103c:	f1 f7       	brne	.-4      	; 0x103a <creat_pass+0x45a>
    103e:	fe 01       	movw	r30, r28
    1040:	ef 57       	subi	r30, 0x7F	; 127
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	91 83       	std	Z+1, r25	; 0x01
    1046:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1048:	de 01       	movw	r26, r28
    104a:	ad 57       	subi	r26, 0x7D	; 125
    104c:	bf 4f       	sbci	r27, 0xFF	; 255
    104e:	fe 01       	movw	r30, r28
    1050:	ed 57       	subi	r30, 0x7D	; 125
    1052:	ff 4f       	sbci	r31, 0xFF	; 255
    1054:	80 81       	ld	r24, Z
    1056:	91 81       	ldd	r25, Z+1	; 0x01
    1058:	01 97       	sbiw	r24, 0x01	; 1
    105a:	11 96       	adiw	r26, 0x01	; 1
    105c:	9c 93       	st	X, r25
    105e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1060:	fe 01       	movw	r30, r28
    1062:	ed 57       	subi	r30, 0x7D	; 125
    1064:	ff 4f       	sbci	r31, 0xFF	; 255
    1066:	80 81       	ld	r24, Z
    1068:	91 81       	ldd	r25, Z+1	; 0x01
    106a:	00 97       	sbiw	r24, 0x00	; 0
    106c:	d1 f6       	brne	.-76     	; 0x1022 <creat_pass+0x442>
    106e:	27 c0       	rjmp	.+78     	; 0x10be <creat_pass+0x4de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1070:	8e 01       	movw	r16, r28
    1072:	0d 57       	subi	r16, 0x7D	; 125
    1074:	1f 4f       	sbci	r17, 0xFF	; 255
    1076:	fe 01       	movw	r30, r28
    1078:	eb 57       	subi	r30, 0x7B	; 123
    107a:	ff 4f       	sbci	r31, 0xFF	; 255
    107c:	60 81       	ld	r22, Z
    107e:	71 81       	ldd	r23, Z+1	; 0x01
    1080:	82 81       	ldd	r24, Z+2	; 0x02
    1082:	93 81       	ldd	r25, Z+3	; 0x03
    1084:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1088:	dc 01       	movw	r26, r24
    108a:	cb 01       	movw	r24, r22
    108c:	f8 01       	movw	r30, r16
    108e:	91 83       	std	Z+1, r25	; 0x01
    1090:	80 83       	st	Z, r24
    1092:	de 01       	movw	r26, r28
    1094:	a1 58       	subi	r26, 0x81	; 129
    1096:	bf 4f       	sbci	r27, 0xFF	; 255
    1098:	fe 01       	movw	r30, r28
    109a:	ed 57       	subi	r30, 0x7D	; 125
    109c:	ff 4f       	sbci	r31, 0xFF	; 255
    109e:	80 81       	ld	r24, Z
    10a0:	91 81       	ldd	r25, Z+1	; 0x01
    10a2:	8d 93       	st	X+, r24
    10a4:	9c 93       	st	X, r25
    10a6:	fe 01       	movw	r30, r28
    10a8:	e1 58       	subi	r30, 0x81	; 129
    10aa:	ff 4f       	sbci	r31, 0xFF	; 255
    10ac:	80 81       	ld	r24, Z
    10ae:	91 81       	ldd	r25, Z+1	; 0x01
    10b0:	01 97       	sbiw	r24, 0x01	; 1
    10b2:	f1 f7       	brne	.-4      	; 0x10b0 <creat_pass+0x4d0>
    10b4:	fe 01       	movw	r30, r28
    10b6:	e1 58       	subi	r30, 0x81	; 129
    10b8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ba:	91 83       	std	Z+1, r25	; 0x01
    10bc:	80 83       	st	Z, r24
	_delay_ms(50);
	/********************** To Send The Entered Password to Control_ECU ************************************/

	/**************** TO Save the  Re-entered  Password from user *******************/

	LCD_clearScreen();
    10be:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    10c2:	80 e0       	ldi	r24, 0x00	; 0
    10c4:	60 e0       	ldi	r22, 0x00	; 0
    10c6:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("PLZ Re-enter The");
    10ca:	83 e7       	ldi	r24, 0x73	; 115
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
	LCD_moveCursor(1,0);
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	60 e0       	ldi	r22, 0x00	; 0
    10d6:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("Same Pass :");
    10da:	84 e8       	ldi	r24, 0x84	; 132
    10dc:	90 e0       	ldi	r25, 0x00	; 0
    10de:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    10e2:	9e c1       	rjmp	.+828    	; 0x1420 <creat_pass+0x840>

	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password

		for (int x=0;x<5;x++){
    10e4:	fe 01       	movw	r30, r28
    10e6:	e3 55       	subi	r30, 0x53	; 83
    10e8:	ff 4f       	sbci	r31, 0xFF	; 255
    10ea:	11 82       	std	Z+1, r1	; 0x01
    10ec:	10 82       	st	Z, r1
    10ee:	8f c1       	rjmp	.+798    	; 0x140e <creat_pass+0x82e>
			pass2[x]=KEYPAD_getPressedKey();
    10f0:	fe 01       	movw	r30, r28
    10f2:	e3 55       	subi	r30, 0x53	; 83
    10f4:	ff 4f       	sbci	r31, 0xFF	; 255
    10f6:	00 81       	ld	r16, Z
    10f8:	11 81       	ldd	r17, Z+1	; 0x01
    10fa:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
    10fe:	28 2f       	mov	r18, r24
    1100:	ce 01       	movw	r24, r28
    1102:	88 54       	subi	r24, 0x48	; 72
    1104:	9f 4f       	sbci	r25, 0xFF	; 255
    1106:	fc 01       	movw	r30, r24
    1108:	e0 0f       	add	r30, r16
    110a:	f1 1f       	adc	r31, r17
    110c:	20 83       	st	Z, r18
    110e:	fe 01       	movw	r30, r28
    1110:	e5 58       	subi	r30, 0x85	; 133
    1112:	ff 4f       	sbci	r31, 0xFF	; 255
    1114:	80 e0       	ldi	r24, 0x00	; 0
    1116:	90 e0       	ldi	r25, 0x00	; 0
    1118:	a8 ec       	ldi	r26, 0xC8	; 200
    111a:	b2 e4       	ldi	r27, 0x42	; 66
    111c:	80 83       	st	Z, r24
    111e:	91 83       	std	Z+1, r25	; 0x01
    1120:	a2 83       	std	Z+2, r26	; 0x02
    1122:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1124:	8e 01       	movw	r16, r28
    1126:	09 58       	subi	r16, 0x89	; 137
    1128:	1f 4f       	sbci	r17, 0xFF	; 255
    112a:	fe 01       	movw	r30, r28
    112c:	e5 58       	subi	r30, 0x85	; 133
    112e:	ff 4f       	sbci	r31, 0xFF	; 255
    1130:	60 81       	ld	r22, Z
    1132:	71 81       	ldd	r23, Z+1	; 0x01
    1134:	82 81       	ldd	r24, Z+2	; 0x02
    1136:	93 81       	ldd	r25, Z+3	; 0x03
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	4a ef       	ldi	r20, 0xFA	; 250
    113e:	54 e4       	ldi	r21, 0x44	; 68
    1140:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	f8 01       	movw	r30, r16
    114a:	80 83       	st	Z, r24
    114c:	91 83       	std	Z+1, r25	; 0x01
    114e:	a2 83       	std	Z+2, r26	; 0x02
    1150:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1152:	fe 01       	movw	r30, r28
    1154:	e9 58       	subi	r30, 0x89	; 137
    1156:	ff 4f       	sbci	r31, 0xFF	; 255
    1158:	60 81       	ld	r22, Z
    115a:	71 81       	ldd	r23, Z+1	; 0x01
    115c:	82 81       	ldd	r24, Z+2	; 0x02
    115e:	93 81       	ldd	r25, Z+3	; 0x03
    1160:	20 e0       	ldi	r18, 0x00	; 0
    1162:	30 e0       	ldi	r19, 0x00	; 0
    1164:	40 e8       	ldi	r20, 0x80	; 128
    1166:	5f e3       	ldi	r21, 0x3F	; 63
    1168:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    116c:	88 23       	and	r24, r24
    116e:	44 f4       	brge	.+16     	; 0x1180 <creat_pass+0x5a0>
		__ticks = 1;
    1170:	fe 01       	movw	r30, r28
    1172:	eb 58       	subi	r30, 0x8B	; 139
    1174:	ff 4f       	sbci	r31, 0xFF	; 255
    1176:	81 e0       	ldi	r24, 0x01	; 1
    1178:	90 e0       	ldi	r25, 0x00	; 0
    117a:	91 83       	std	Z+1, r25	; 0x01
    117c:	80 83       	st	Z, r24
    117e:	64 c0       	rjmp	.+200    	; 0x1248 <creat_pass+0x668>
	else if (__tmp > 65535)
    1180:	fe 01       	movw	r30, r28
    1182:	e9 58       	subi	r30, 0x89	; 137
    1184:	ff 4f       	sbci	r31, 0xFF	; 255
    1186:	60 81       	ld	r22, Z
    1188:	71 81       	ldd	r23, Z+1	; 0x01
    118a:	82 81       	ldd	r24, Z+2	; 0x02
    118c:	93 81       	ldd	r25, Z+3	; 0x03
    118e:	20 e0       	ldi	r18, 0x00	; 0
    1190:	3f ef       	ldi	r19, 0xFF	; 255
    1192:	4f e7       	ldi	r20, 0x7F	; 127
    1194:	57 e4       	ldi	r21, 0x47	; 71
    1196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    119a:	18 16       	cp	r1, r24
    119c:	0c f0       	brlt	.+2      	; 0x11a0 <creat_pass+0x5c0>
    119e:	43 c0       	rjmp	.+134    	; 0x1226 <creat_pass+0x646>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a0:	fe 01       	movw	r30, r28
    11a2:	e5 58       	subi	r30, 0x85	; 133
    11a4:	ff 4f       	sbci	r31, 0xFF	; 255
    11a6:	60 81       	ld	r22, Z
    11a8:	71 81       	ldd	r23, Z+1	; 0x01
    11aa:	82 81       	ldd	r24, Z+2	; 0x02
    11ac:	93 81       	ldd	r25, Z+3	; 0x03
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	8e 01       	movw	r16, r28
    11c0:	0b 58       	subi	r16, 0x8B	; 139
    11c2:	1f 4f       	sbci	r17, 0xFF	; 255
    11c4:	bc 01       	movw	r22, r24
    11c6:	cd 01       	movw	r24, r26
    11c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11cc:	dc 01       	movw	r26, r24
    11ce:	cb 01       	movw	r24, r22
    11d0:	f8 01       	movw	r30, r16
    11d2:	91 83       	std	Z+1, r25	; 0x01
    11d4:	80 83       	st	Z, r24
    11d6:	1f c0       	rjmp	.+62     	; 0x1216 <creat_pass+0x636>
    11d8:	fe 01       	movw	r30, r28
    11da:	ed 58       	subi	r30, 0x8D	; 141
    11dc:	ff 4f       	sbci	r31, 0xFF	; 255
    11de:	88 ec       	ldi	r24, 0xC8	; 200
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	91 83       	std	Z+1, r25	; 0x01
    11e4:	80 83       	st	Z, r24
    11e6:	fe 01       	movw	r30, r28
    11e8:	ed 58       	subi	r30, 0x8D	; 141
    11ea:	ff 4f       	sbci	r31, 0xFF	; 255
    11ec:	80 81       	ld	r24, Z
    11ee:	91 81       	ldd	r25, Z+1	; 0x01
    11f0:	01 97       	sbiw	r24, 0x01	; 1
    11f2:	f1 f7       	brne	.-4      	; 0x11f0 <creat_pass+0x610>
    11f4:	fe 01       	movw	r30, r28
    11f6:	ed 58       	subi	r30, 0x8D	; 141
    11f8:	ff 4f       	sbci	r31, 0xFF	; 255
    11fa:	91 83       	std	Z+1, r25	; 0x01
    11fc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11fe:	de 01       	movw	r26, r28
    1200:	ab 58       	subi	r26, 0x8B	; 139
    1202:	bf 4f       	sbci	r27, 0xFF	; 255
    1204:	fe 01       	movw	r30, r28
    1206:	eb 58       	subi	r30, 0x8B	; 139
    1208:	ff 4f       	sbci	r31, 0xFF	; 255
    120a:	80 81       	ld	r24, Z
    120c:	91 81       	ldd	r25, Z+1	; 0x01
    120e:	01 97       	sbiw	r24, 0x01	; 1
    1210:	11 96       	adiw	r26, 0x01	; 1
    1212:	9c 93       	st	X, r25
    1214:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1216:	fe 01       	movw	r30, r28
    1218:	eb 58       	subi	r30, 0x8B	; 139
    121a:	ff 4f       	sbci	r31, 0xFF	; 255
    121c:	80 81       	ld	r24, Z
    121e:	91 81       	ldd	r25, Z+1	; 0x01
    1220:	00 97       	sbiw	r24, 0x00	; 0
    1222:	d1 f6       	brne	.-76     	; 0x11d8 <creat_pass+0x5f8>
    1224:	27 c0       	rjmp	.+78     	; 0x1274 <creat_pass+0x694>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1226:	8e 01       	movw	r16, r28
    1228:	0b 58       	subi	r16, 0x8B	; 139
    122a:	1f 4f       	sbci	r17, 0xFF	; 255
    122c:	fe 01       	movw	r30, r28
    122e:	e9 58       	subi	r30, 0x89	; 137
    1230:	ff 4f       	sbci	r31, 0xFF	; 255
    1232:	60 81       	ld	r22, Z
    1234:	71 81       	ldd	r23, Z+1	; 0x01
    1236:	82 81       	ldd	r24, Z+2	; 0x02
    1238:	93 81       	ldd	r25, Z+3	; 0x03
    123a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    123e:	dc 01       	movw	r26, r24
    1240:	cb 01       	movw	r24, r22
    1242:	f8 01       	movw	r30, r16
    1244:	91 83       	std	Z+1, r25	; 0x01
    1246:	80 83       	st	Z, r24
    1248:	de 01       	movw	r26, r28
    124a:	af 58       	subi	r26, 0x8F	; 143
    124c:	bf 4f       	sbci	r27, 0xFF	; 255
    124e:	fe 01       	movw	r30, r28
    1250:	eb 58       	subi	r30, 0x8B	; 139
    1252:	ff 4f       	sbci	r31, 0xFF	; 255
    1254:	80 81       	ld	r24, Z
    1256:	91 81       	ldd	r25, Z+1	; 0x01
    1258:	8d 93       	st	X+, r24
    125a:	9c 93       	st	X, r25
    125c:	fe 01       	movw	r30, r28
    125e:	ef 58       	subi	r30, 0x8F	; 143
    1260:	ff 4f       	sbci	r31, 0xFF	; 255
    1262:	80 81       	ld	r24, Z
    1264:	91 81       	ldd	r25, Z+1	; 0x01
    1266:	01 97       	sbiw	r24, 0x01	; 1
    1268:	f1 f7       	brne	.-4      	; 0x1266 <creat_pass+0x686>
    126a:	fe 01       	movw	r30, r28
    126c:	ef 58       	subi	r30, 0x8F	; 143
    126e:	ff 4f       	sbci	r31, 0xFF	; 255
    1270:	91 83       	std	Z+1, r25	; 0x01
    1272:	80 83       	st	Z, r24
			_delay_ms(100);
			LCD_moveCursor(1,x+11);
    1274:	fe 01       	movw	r30, r28
    1276:	e3 55       	subi	r30, 0x53	; 83
    1278:	ff 4f       	sbci	r31, 0xFF	; 255
    127a:	80 81       	ld	r24, Z
    127c:	98 2f       	mov	r25, r24
    127e:	95 5f       	subi	r25, 0xF5	; 245
    1280:	81 e0       	ldi	r24, 0x01	; 1
    1282:	69 2f       	mov	r22, r25
    1284:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
			LCD_displayString("*");
    1288:	81 e7       	ldi	r24, 0x71	; 113
    128a:	90 e0       	ldi	r25, 0x00	; 0
    128c:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    1290:	fe 01       	movw	r30, r28
    1292:	e3 59       	subi	r30, 0x93	; 147
    1294:	ff 4f       	sbci	r31, 0xFF	; 255
    1296:	80 e0       	ldi	r24, 0x00	; 0
    1298:	90 e0       	ldi	r25, 0x00	; 0
    129a:	a8 e4       	ldi	r26, 0x48	; 72
    129c:	b3 e4       	ldi	r27, 0x43	; 67
    129e:	80 83       	st	Z, r24
    12a0:	91 83       	std	Z+1, r25	; 0x01
    12a2:	a2 83       	std	Z+2, r26	; 0x02
    12a4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    12a6:	8e 01       	movw	r16, r28
    12a8:	07 59       	subi	r16, 0x97	; 151
    12aa:	1f 4f       	sbci	r17, 0xFF	; 255
    12ac:	fe 01       	movw	r30, r28
    12ae:	e3 59       	subi	r30, 0x93	; 147
    12b0:	ff 4f       	sbci	r31, 0xFF	; 255
    12b2:	60 81       	ld	r22, Z
    12b4:	71 81       	ldd	r23, Z+1	; 0x01
    12b6:	82 81       	ldd	r24, Z+2	; 0x02
    12b8:	93 81       	ldd	r25, Z+3	; 0x03
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	4a ef       	ldi	r20, 0xFA	; 250
    12c0:	54 e4       	ldi	r21, 0x44	; 68
    12c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c6:	dc 01       	movw	r26, r24
    12c8:	cb 01       	movw	r24, r22
    12ca:	f8 01       	movw	r30, r16
    12cc:	80 83       	st	Z, r24
    12ce:	91 83       	std	Z+1, r25	; 0x01
    12d0:	a2 83       	std	Z+2, r26	; 0x02
    12d2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12d4:	fe 01       	movw	r30, r28
    12d6:	e7 59       	subi	r30, 0x97	; 151
    12d8:	ff 4f       	sbci	r31, 0xFF	; 255
    12da:	60 81       	ld	r22, Z
    12dc:	71 81       	ldd	r23, Z+1	; 0x01
    12de:	82 81       	ldd	r24, Z+2	; 0x02
    12e0:	93 81       	ldd	r25, Z+3	; 0x03
    12e2:	20 e0       	ldi	r18, 0x00	; 0
    12e4:	30 e0       	ldi	r19, 0x00	; 0
    12e6:	40 e8       	ldi	r20, 0x80	; 128
    12e8:	5f e3       	ldi	r21, 0x3F	; 63
    12ea:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12ee:	88 23       	and	r24, r24
    12f0:	44 f4       	brge	.+16     	; 0x1302 <creat_pass+0x722>
		__ticks = 1;
    12f2:	fe 01       	movw	r30, r28
    12f4:	e9 59       	subi	r30, 0x99	; 153
    12f6:	ff 4f       	sbci	r31, 0xFF	; 255
    12f8:	81 e0       	ldi	r24, 0x01	; 1
    12fa:	90 e0       	ldi	r25, 0x00	; 0
    12fc:	91 83       	std	Z+1, r25	; 0x01
    12fe:	80 83       	st	Z, r24
    1300:	64 c0       	rjmp	.+200    	; 0x13ca <creat_pass+0x7ea>
	else if (__tmp > 65535)
    1302:	fe 01       	movw	r30, r28
    1304:	e7 59       	subi	r30, 0x97	; 151
    1306:	ff 4f       	sbci	r31, 0xFF	; 255
    1308:	60 81       	ld	r22, Z
    130a:	71 81       	ldd	r23, Z+1	; 0x01
    130c:	82 81       	ldd	r24, Z+2	; 0x02
    130e:	93 81       	ldd	r25, Z+3	; 0x03
    1310:	20 e0       	ldi	r18, 0x00	; 0
    1312:	3f ef       	ldi	r19, 0xFF	; 255
    1314:	4f e7       	ldi	r20, 0x7F	; 127
    1316:	57 e4       	ldi	r21, 0x47	; 71
    1318:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    131c:	18 16       	cp	r1, r24
    131e:	0c f0       	brlt	.+2      	; 0x1322 <creat_pass+0x742>
    1320:	43 c0       	rjmp	.+134    	; 0x13a8 <creat_pass+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1322:	fe 01       	movw	r30, r28
    1324:	e3 59       	subi	r30, 0x93	; 147
    1326:	ff 4f       	sbci	r31, 0xFF	; 255
    1328:	60 81       	ld	r22, Z
    132a:	71 81       	ldd	r23, Z+1	; 0x01
    132c:	82 81       	ldd	r24, Z+2	; 0x02
    132e:	93 81       	ldd	r25, Z+3	; 0x03
    1330:	20 e0       	ldi	r18, 0x00	; 0
    1332:	30 e0       	ldi	r19, 0x00	; 0
    1334:	40 e2       	ldi	r20, 0x20	; 32
    1336:	51 e4       	ldi	r21, 0x41	; 65
    1338:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    133c:	dc 01       	movw	r26, r24
    133e:	cb 01       	movw	r24, r22
    1340:	8e 01       	movw	r16, r28
    1342:	09 59       	subi	r16, 0x99	; 153
    1344:	1f 4f       	sbci	r17, 0xFF	; 255
    1346:	bc 01       	movw	r22, r24
    1348:	cd 01       	movw	r24, r26
    134a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    134e:	dc 01       	movw	r26, r24
    1350:	cb 01       	movw	r24, r22
    1352:	f8 01       	movw	r30, r16
    1354:	91 83       	std	Z+1, r25	; 0x01
    1356:	80 83       	st	Z, r24
    1358:	1f c0       	rjmp	.+62     	; 0x1398 <creat_pass+0x7b8>
    135a:	fe 01       	movw	r30, r28
    135c:	eb 59       	subi	r30, 0x9B	; 155
    135e:	ff 4f       	sbci	r31, 0xFF	; 255
    1360:	88 ec       	ldi	r24, 0xC8	; 200
    1362:	90 e0       	ldi	r25, 0x00	; 0
    1364:	91 83       	std	Z+1, r25	; 0x01
    1366:	80 83       	st	Z, r24
    1368:	fe 01       	movw	r30, r28
    136a:	eb 59       	subi	r30, 0x9B	; 155
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 81       	ld	r24, Z
    1370:	91 81       	ldd	r25, Z+1	; 0x01
    1372:	01 97       	sbiw	r24, 0x01	; 1
    1374:	f1 f7       	brne	.-4      	; 0x1372 <creat_pass+0x792>
    1376:	fe 01       	movw	r30, r28
    1378:	eb 59       	subi	r30, 0x9B	; 155
    137a:	ff 4f       	sbci	r31, 0xFF	; 255
    137c:	91 83       	std	Z+1, r25	; 0x01
    137e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1380:	de 01       	movw	r26, r28
    1382:	a9 59       	subi	r26, 0x99	; 153
    1384:	bf 4f       	sbci	r27, 0xFF	; 255
    1386:	fe 01       	movw	r30, r28
    1388:	e9 59       	subi	r30, 0x99	; 153
    138a:	ff 4f       	sbci	r31, 0xFF	; 255
    138c:	80 81       	ld	r24, Z
    138e:	91 81       	ldd	r25, Z+1	; 0x01
    1390:	01 97       	sbiw	r24, 0x01	; 1
    1392:	11 96       	adiw	r26, 0x01	; 1
    1394:	9c 93       	st	X, r25
    1396:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1398:	fe 01       	movw	r30, r28
    139a:	e9 59       	subi	r30, 0x99	; 153
    139c:	ff 4f       	sbci	r31, 0xFF	; 255
    139e:	80 81       	ld	r24, Z
    13a0:	91 81       	ldd	r25, Z+1	; 0x01
    13a2:	00 97       	sbiw	r24, 0x00	; 0
    13a4:	d1 f6       	brne	.-76     	; 0x135a <creat_pass+0x77a>
    13a6:	27 c0       	rjmp	.+78     	; 0x13f6 <creat_pass+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13a8:	8e 01       	movw	r16, r28
    13aa:	09 59       	subi	r16, 0x99	; 153
    13ac:	1f 4f       	sbci	r17, 0xFF	; 255
    13ae:	fe 01       	movw	r30, r28
    13b0:	e7 59       	subi	r30, 0x97	; 151
    13b2:	ff 4f       	sbci	r31, 0xFF	; 255
    13b4:	60 81       	ld	r22, Z
    13b6:	71 81       	ldd	r23, Z+1	; 0x01
    13b8:	82 81       	ldd	r24, Z+2	; 0x02
    13ba:	93 81       	ldd	r25, Z+3	; 0x03
    13bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	f8 01       	movw	r30, r16
    13c6:	91 83       	std	Z+1, r25	; 0x01
    13c8:	80 83       	st	Z, r24
    13ca:	de 01       	movw	r26, r28
    13cc:	ad 59       	subi	r26, 0x9D	; 157
    13ce:	bf 4f       	sbci	r27, 0xFF	; 255
    13d0:	fe 01       	movw	r30, r28
    13d2:	e9 59       	subi	r30, 0x99	; 153
    13d4:	ff 4f       	sbci	r31, 0xFF	; 255
    13d6:	80 81       	ld	r24, Z
    13d8:	91 81       	ldd	r25, Z+1	; 0x01
    13da:	8d 93       	st	X+, r24
    13dc:	9c 93       	st	X, r25
    13de:	fe 01       	movw	r30, r28
    13e0:	ed 59       	subi	r30, 0x9D	; 157
    13e2:	ff 4f       	sbci	r31, 0xFF	; 255
    13e4:	80 81       	ld	r24, Z
    13e6:	91 81       	ldd	r25, Z+1	; 0x01
    13e8:	01 97       	sbiw	r24, 0x01	; 1
    13ea:	f1 f7       	brne	.-4      	; 0x13e8 <creat_pass+0x808>
    13ec:	fe 01       	movw	r30, r28
    13ee:	ed 59       	subi	r30, 0x9D	; 157
    13f0:	ff 4f       	sbci	r31, 0xFF	; 255
    13f2:	91 83       	std	Z+1, r25	; 0x01
    13f4:	80 83       	st	Z, r24
	LCD_moveCursor(1,0);
	LCD_displayString("Same Pass :");

	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password

		for (int x=0;x<5;x++){
    13f6:	de 01       	movw	r26, r28
    13f8:	a3 55       	subi	r26, 0x53	; 83
    13fa:	bf 4f       	sbci	r27, 0xFF	; 255
    13fc:	fe 01       	movw	r30, r28
    13fe:	e3 55       	subi	r30, 0x53	; 83
    1400:	ff 4f       	sbci	r31, 0xFF	; 255
    1402:	80 81       	ld	r24, Z
    1404:	91 81       	ldd	r25, Z+1	; 0x01
    1406:	01 96       	adiw	r24, 0x01	; 1
    1408:	11 96       	adiw	r26, 0x01	; 1
    140a:	9c 93       	st	X, r25
    140c:	8e 93       	st	-X, r24
    140e:	fe 01       	movw	r30, r28
    1410:	e3 55       	subi	r30, 0x53	; 83
    1412:	ff 4f       	sbci	r31, 0xFF	; 255
    1414:	80 81       	ld	r24, Z
    1416:	91 81       	ldd	r25, Z+1	; 0x01
    1418:	85 30       	cpi	r24, 0x05	; 5
    141a:	91 05       	cpc	r25, r1
    141c:	0c f4       	brge	.+2      	; 0x1420 <creat_pass+0x840>
    141e:	68 ce       	rjmp	.-816    	; 0x10f0 <creat_pass+0x510>
	LCD_moveCursor(0,0);
	LCD_displayString("PLZ Re-enter The");
	LCD_moveCursor(1,0);
	LCD_displayString("Same Pass :");

	while(KEYPAD_getPressedKey()!=61){//wait to save all first input password
    1420:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
    1424:	8d 33       	cpi	r24, 0x3D	; 61
    1426:	09 f0       	breq	.+2      	; 0x142a <creat_pass+0x84a>
    1428:	5d ce       	rjmp	.-838    	; 0x10e4 <creat_pass+0x504>
    142a:	fe 01       	movw	r30, r28
    142c:	e1 5a       	subi	r30, 0xA1	; 161
    142e:	ff 4f       	sbci	r31, 0xFF	; 255
    1430:	80 e0       	ldi	r24, 0x00	; 0
    1432:	90 e0       	ldi	r25, 0x00	; 0
    1434:	a8 e4       	ldi	r26, 0x48	; 72
    1436:	b2 e4       	ldi	r27, 0x42	; 66
    1438:	80 83       	st	Z, r24
    143a:	91 83       	std	Z+1, r25	; 0x01
    143c:	a2 83       	std	Z+2, r26	; 0x02
    143e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1440:	8e 01       	movw	r16, r28
    1442:	05 5a       	subi	r16, 0xA5	; 165
    1444:	1f 4f       	sbci	r17, 0xFF	; 255
    1446:	fe 01       	movw	r30, r28
    1448:	e1 5a       	subi	r30, 0xA1	; 161
    144a:	ff 4f       	sbci	r31, 0xFF	; 255
    144c:	60 81       	ld	r22, Z
    144e:	71 81       	ldd	r23, Z+1	; 0x01
    1450:	82 81       	ldd	r24, Z+2	; 0x02
    1452:	93 81       	ldd	r25, Z+3	; 0x03
    1454:	20 e0       	ldi	r18, 0x00	; 0
    1456:	30 e0       	ldi	r19, 0x00	; 0
    1458:	4a ef       	ldi	r20, 0xFA	; 250
    145a:	54 e4       	ldi	r21, 0x44	; 68
    145c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1460:	dc 01       	movw	r26, r24
    1462:	cb 01       	movw	r24, r22
    1464:	f8 01       	movw	r30, r16
    1466:	80 83       	st	Z, r24
    1468:	91 83       	std	Z+1, r25	; 0x01
    146a:	a2 83       	std	Z+2, r26	; 0x02
    146c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    146e:	fe 01       	movw	r30, r28
    1470:	e5 5a       	subi	r30, 0xA5	; 165
    1472:	ff 4f       	sbci	r31, 0xFF	; 255
    1474:	60 81       	ld	r22, Z
    1476:	71 81       	ldd	r23, Z+1	; 0x01
    1478:	82 81       	ldd	r24, Z+2	; 0x02
    147a:	93 81       	ldd	r25, Z+3	; 0x03
    147c:	20 e0       	ldi	r18, 0x00	; 0
    147e:	30 e0       	ldi	r19, 0x00	; 0
    1480:	40 e8       	ldi	r20, 0x80	; 128
    1482:	5f e3       	ldi	r21, 0x3F	; 63
    1484:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1488:	88 23       	and	r24, r24
    148a:	44 f4       	brge	.+16     	; 0x149c <creat_pass+0x8bc>
		__ticks = 1;
    148c:	fe 01       	movw	r30, r28
    148e:	e7 5a       	subi	r30, 0xA7	; 167
    1490:	ff 4f       	sbci	r31, 0xFF	; 255
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	91 83       	std	Z+1, r25	; 0x01
    1498:	80 83       	st	Z, r24
    149a:	64 c0       	rjmp	.+200    	; 0x1564 <creat_pass+0x984>
	else if (__tmp > 65535)
    149c:	fe 01       	movw	r30, r28
    149e:	e5 5a       	subi	r30, 0xA5	; 165
    14a0:	ff 4f       	sbci	r31, 0xFF	; 255
    14a2:	60 81       	ld	r22, Z
    14a4:	71 81       	ldd	r23, Z+1	; 0x01
    14a6:	82 81       	ldd	r24, Z+2	; 0x02
    14a8:	93 81       	ldd	r25, Z+3	; 0x03
    14aa:	20 e0       	ldi	r18, 0x00	; 0
    14ac:	3f ef       	ldi	r19, 0xFF	; 255
    14ae:	4f e7       	ldi	r20, 0x7F	; 127
    14b0:	57 e4       	ldi	r21, 0x47	; 71
    14b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14b6:	18 16       	cp	r1, r24
    14b8:	0c f0       	brlt	.+2      	; 0x14bc <creat_pass+0x8dc>
    14ba:	43 c0       	rjmp	.+134    	; 0x1542 <creat_pass+0x962>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14bc:	fe 01       	movw	r30, r28
    14be:	e1 5a       	subi	r30, 0xA1	; 161
    14c0:	ff 4f       	sbci	r31, 0xFF	; 255
    14c2:	60 81       	ld	r22, Z
    14c4:	71 81       	ldd	r23, Z+1	; 0x01
    14c6:	82 81       	ldd	r24, Z+2	; 0x02
    14c8:	93 81       	ldd	r25, Z+3	; 0x03
    14ca:	20 e0       	ldi	r18, 0x00	; 0
    14cc:	30 e0       	ldi	r19, 0x00	; 0
    14ce:	40 e2       	ldi	r20, 0x20	; 32
    14d0:	51 e4       	ldi	r21, 0x41	; 65
    14d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14d6:	dc 01       	movw	r26, r24
    14d8:	cb 01       	movw	r24, r22
    14da:	8e 01       	movw	r16, r28
    14dc:	07 5a       	subi	r16, 0xA7	; 167
    14de:	1f 4f       	sbci	r17, 0xFF	; 255
    14e0:	bc 01       	movw	r22, r24
    14e2:	cd 01       	movw	r24, r26
    14e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    14e8:	dc 01       	movw	r26, r24
    14ea:	cb 01       	movw	r24, r22
    14ec:	f8 01       	movw	r30, r16
    14ee:	91 83       	std	Z+1, r25	; 0x01
    14f0:	80 83       	st	Z, r24
    14f2:	1f c0       	rjmp	.+62     	; 0x1532 <creat_pass+0x952>
    14f4:	fe 01       	movw	r30, r28
    14f6:	e9 5a       	subi	r30, 0xA9	; 169
    14f8:	ff 4f       	sbci	r31, 0xFF	; 255
    14fa:	88 ec       	ldi	r24, 0xC8	; 200
    14fc:	90 e0       	ldi	r25, 0x00	; 0
    14fe:	91 83       	std	Z+1, r25	; 0x01
    1500:	80 83       	st	Z, r24
    1502:	fe 01       	movw	r30, r28
    1504:	e9 5a       	subi	r30, 0xA9	; 169
    1506:	ff 4f       	sbci	r31, 0xFF	; 255
    1508:	80 81       	ld	r24, Z
    150a:	91 81       	ldd	r25, Z+1	; 0x01
    150c:	01 97       	sbiw	r24, 0x01	; 1
    150e:	f1 f7       	brne	.-4      	; 0x150c <creat_pass+0x92c>
    1510:	fe 01       	movw	r30, r28
    1512:	e9 5a       	subi	r30, 0xA9	; 169
    1514:	ff 4f       	sbci	r31, 0xFF	; 255
    1516:	91 83       	std	Z+1, r25	; 0x01
    1518:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    151a:	de 01       	movw	r26, r28
    151c:	a7 5a       	subi	r26, 0xA7	; 167
    151e:	bf 4f       	sbci	r27, 0xFF	; 255
    1520:	fe 01       	movw	r30, r28
    1522:	e7 5a       	subi	r30, 0xA7	; 167
    1524:	ff 4f       	sbci	r31, 0xFF	; 255
    1526:	80 81       	ld	r24, Z
    1528:	91 81       	ldd	r25, Z+1	; 0x01
    152a:	01 97       	sbiw	r24, 0x01	; 1
    152c:	11 96       	adiw	r26, 0x01	; 1
    152e:	9c 93       	st	X, r25
    1530:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1532:	fe 01       	movw	r30, r28
    1534:	e7 5a       	subi	r30, 0xA7	; 167
    1536:	ff 4f       	sbci	r31, 0xFF	; 255
    1538:	80 81       	ld	r24, Z
    153a:	91 81       	ldd	r25, Z+1	; 0x01
    153c:	00 97       	sbiw	r24, 0x00	; 0
    153e:	d1 f6       	brne	.-76     	; 0x14f4 <creat_pass+0x914>
    1540:	27 c0       	rjmp	.+78     	; 0x1590 <creat_pass+0x9b0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1542:	8e 01       	movw	r16, r28
    1544:	07 5a       	subi	r16, 0xA7	; 167
    1546:	1f 4f       	sbci	r17, 0xFF	; 255
    1548:	fe 01       	movw	r30, r28
    154a:	e5 5a       	subi	r30, 0xA5	; 165
    154c:	ff 4f       	sbci	r31, 0xFF	; 255
    154e:	60 81       	ld	r22, Z
    1550:	71 81       	ldd	r23, Z+1	; 0x01
    1552:	82 81       	ldd	r24, Z+2	; 0x02
    1554:	93 81       	ldd	r25, Z+3	; 0x03
    1556:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    155a:	dc 01       	movw	r26, r24
    155c:	cb 01       	movw	r24, r22
    155e:	f8 01       	movw	r30, r16
    1560:	91 83       	std	Z+1, r25	; 0x01
    1562:	80 83       	st	Z, r24
    1564:	de 01       	movw	r26, r28
    1566:	ab 5a       	subi	r26, 0xAB	; 171
    1568:	bf 4f       	sbci	r27, 0xFF	; 255
    156a:	fe 01       	movw	r30, r28
    156c:	e7 5a       	subi	r30, 0xA7	; 167
    156e:	ff 4f       	sbci	r31, 0xFF	; 255
    1570:	80 81       	ld	r24, Z
    1572:	91 81       	ldd	r25, Z+1	; 0x01
    1574:	8d 93       	st	X+, r24
    1576:	9c 93       	st	X, r25
    1578:	fe 01       	movw	r30, r28
    157a:	eb 5a       	subi	r30, 0xAB	; 171
    157c:	ff 4f       	sbci	r31, 0xFF	; 255
    157e:	80 81       	ld	r24, Z
    1580:	91 81       	ldd	r25, Z+1	; 0x01
    1582:	01 97       	sbiw	r24, 0x01	; 1
    1584:	f1 f7       	brne	.-4      	; 0x1582 <creat_pass+0x9a2>
    1586:	fe 01       	movw	r30, r28
    1588:	eb 5a       	subi	r30, 0xAB	; 171
    158a:	ff 4f       	sbci	r31, 0xFF	; 255
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
	}
	_delay_ms(50);

	/********************** To Send The Entered Password to Control_ECU ************************************/

	UART_sendByte(creat_password);
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    1596:	fe 01       	movw	r30, r28
    1598:	ef 5a       	subi	r30, 0xAF	; 175
    159a:	ff 4f       	sbci	r31, 0xFF	; 255
    159c:	80 e0       	ldi	r24, 0x00	; 0
    159e:	90 e0       	ldi	r25, 0x00	; 0
    15a0:	a0 e2       	ldi	r26, 0x20	; 32
    15a2:	b1 e4       	ldi	r27, 0x41	; 65
    15a4:	80 83       	st	Z, r24
    15a6:	91 83       	std	Z+1, r25	; 0x01
    15a8:	a2 83       	std	Z+2, r26	; 0x02
    15aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    15ac:	8e 01       	movw	r16, r28
    15ae:	03 5b       	subi	r16, 0xB3	; 179
    15b0:	1f 4f       	sbci	r17, 0xFF	; 255
    15b2:	fe 01       	movw	r30, r28
    15b4:	ef 5a       	subi	r30, 0xAF	; 175
    15b6:	ff 4f       	sbci	r31, 0xFF	; 255
    15b8:	60 81       	ld	r22, Z
    15ba:	71 81       	ldd	r23, Z+1	; 0x01
    15bc:	82 81       	ldd	r24, Z+2	; 0x02
    15be:	93 81       	ldd	r25, Z+3	; 0x03
    15c0:	20 e0       	ldi	r18, 0x00	; 0
    15c2:	30 e0       	ldi	r19, 0x00	; 0
    15c4:	4a ef       	ldi	r20, 0xFA	; 250
    15c6:	54 e4       	ldi	r21, 0x44	; 68
    15c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15cc:	dc 01       	movw	r26, r24
    15ce:	cb 01       	movw	r24, r22
    15d0:	f8 01       	movw	r30, r16
    15d2:	80 83       	st	Z, r24
    15d4:	91 83       	std	Z+1, r25	; 0x01
    15d6:	a2 83       	std	Z+2, r26	; 0x02
    15d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15da:	fe 01       	movw	r30, r28
    15dc:	e3 5b       	subi	r30, 0xB3	; 179
    15de:	ff 4f       	sbci	r31, 0xFF	; 255
    15e0:	60 81       	ld	r22, Z
    15e2:	71 81       	ldd	r23, Z+1	; 0x01
    15e4:	82 81       	ldd	r24, Z+2	; 0x02
    15e6:	93 81       	ldd	r25, Z+3	; 0x03
    15e8:	20 e0       	ldi	r18, 0x00	; 0
    15ea:	30 e0       	ldi	r19, 0x00	; 0
    15ec:	40 e8       	ldi	r20, 0x80	; 128
    15ee:	5f e3       	ldi	r21, 0x3F	; 63
    15f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15f4:	88 23       	and	r24, r24
    15f6:	44 f4       	brge	.+16     	; 0x1608 <creat_pass+0xa28>
		__ticks = 1;
    15f8:	fe 01       	movw	r30, r28
    15fa:	e5 5b       	subi	r30, 0xB5	; 181
    15fc:	ff 4f       	sbci	r31, 0xFF	; 255
    15fe:	81 e0       	ldi	r24, 0x01	; 1
    1600:	90 e0       	ldi	r25, 0x00	; 0
    1602:	91 83       	std	Z+1, r25	; 0x01
    1604:	80 83       	st	Z, r24
    1606:	64 c0       	rjmp	.+200    	; 0x16d0 <creat_pass+0xaf0>
	else if (__tmp > 65535)
    1608:	fe 01       	movw	r30, r28
    160a:	e3 5b       	subi	r30, 0xB3	; 179
    160c:	ff 4f       	sbci	r31, 0xFF	; 255
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	20 e0       	ldi	r18, 0x00	; 0
    1618:	3f ef       	ldi	r19, 0xFF	; 255
    161a:	4f e7       	ldi	r20, 0x7F	; 127
    161c:	57 e4       	ldi	r21, 0x47	; 71
    161e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1622:	18 16       	cp	r1, r24
    1624:	0c f0       	brlt	.+2      	; 0x1628 <creat_pass+0xa48>
    1626:	43 c0       	rjmp	.+134    	; 0x16ae <creat_pass+0xace>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1628:	fe 01       	movw	r30, r28
    162a:	ef 5a       	subi	r30, 0xAF	; 175
    162c:	ff 4f       	sbci	r31, 0xFF	; 255
    162e:	60 81       	ld	r22, Z
    1630:	71 81       	ldd	r23, Z+1	; 0x01
    1632:	82 81       	ldd	r24, Z+2	; 0x02
    1634:	93 81       	ldd	r25, Z+3	; 0x03
    1636:	20 e0       	ldi	r18, 0x00	; 0
    1638:	30 e0       	ldi	r19, 0x00	; 0
    163a:	40 e2       	ldi	r20, 0x20	; 32
    163c:	51 e4       	ldi	r21, 0x41	; 65
    163e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1642:	dc 01       	movw	r26, r24
    1644:	cb 01       	movw	r24, r22
    1646:	8e 01       	movw	r16, r28
    1648:	05 5b       	subi	r16, 0xB5	; 181
    164a:	1f 4f       	sbci	r17, 0xFF	; 255
    164c:	bc 01       	movw	r22, r24
    164e:	cd 01       	movw	r24, r26
    1650:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1654:	dc 01       	movw	r26, r24
    1656:	cb 01       	movw	r24, r22
    1658:	f8 01       	movw	r30, r16
    165a:	91 83       	std	Z+1, r25	; 0x01
    165c:	80 83       	st	Z, r24
    165e:	1f c0       	rjmp	.+62     	; 0x169e <creat_pass+0xabe>
    1660:	fe 01       	movw	r30, r28
    1662:	e7 5b       	subi	r30, 0xB7	; 183
    1664:	ff 4f       	sbci	r31, 0xFF	; 255
    1666:	88 ec       	ldi	r24, 0xC8	; 200
    1668:	90 e0       	ldi	r25, 0x00	; 0
    166a:	91 83       	std	Z+1, r25	; 0x01
    166c:	80 83       	st	Z, r24
    166e:	fe 01       	movw	r30, r28
    1670:	e7 5b       	subi	r30, 0xB7	; 183
    1672:	ff 4f       	sbci	r31, 0xFF	; 255
    1674:	80 81       	ld	r24, Z
    1676:	91 81       	ldd	r25, Z+1	; 0x01
    1678:	01 97       	sbiw	r24, 0x01	; 1
    167a:	f1 f7       	brne	.-4      	; 0x1678 <creat_pass+0xa98>
    167c:	fe 01       	movw	r30, r28
    167e:	e7 5b       	subi	r30, 0xB7	; 183
    1680:	ff 4f       	sbci	r31, 0xFF	; 255
    1682:	91 83       	std	Z+1, r25	; 0x01
    1684:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1686:	de 01       	movw	r26, r28
    1688:	a5 5b       	subi	r26, 0xB5	; 181
    168a:	bf 4f       	sbci	r27, 0xFF	; 255
    168c:	fe 01       	movw	r30, r28
    168e:	e5 5b       	subi	r30, 0xB5	; 181
    1690:	ff 4f       	sbci	r31, 0xFF	; 255
    1692:	80 81       	ld	r24, Z
    1694:	91 81       	ldd	r25, Z+1	; 0x01
    1696:	01 97       	sbiw	r24, 0x01	; 1
    1698:	11 96       	adiw	r26, 0x01	; 1
    169a:	9c 93       	st	X, r25
    169c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    169e:	fe 01       	movw	r30, r28
    16a0:	e5 5b       	subi	r30, 0xB5	; 181
    16a2:	ff 4f       	sbci	r31, 0xFF	; 255
    16a4:	80 81       	ld	r24, Z
    16a6:	91 81       	ldd	r25, Z+1	; 0x01
    16a8:	00 97       	sbiw	r24, 0x00	; 0
    16aa:	d1 f6       	brne	.-76     	; 0x1660 <creat_pass+0xa80>
    16ac:	28 c0       	rjmp	.+80     	; 0x16fe <creat_pass+0xb1e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16ae:	8e 01       	movw	r16, r28
    16b0:	05 5b       	subi	r16, 0xB5	; 181
    16b2:	1f 4f       	sbci	r17, 0xFF	; 255
    16b4:	fe 01       	movw	r30, r28
    16b6:	e3 5b       	subi	r30, 0xB3	; 179
    16b8:	ff 4f       	sbci	r31, 0xFF	; 255
    16ba:	60 81       	ld	r22, Z
    16bc:	71 81       	ldd	r23, Z+1	; 0x01
    16be:	82 81       	ldd	r24, Z+2	; 0x02
    16c0:	93 81       	ldd	r25, Z+3	; 0x03
    16c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	f8 01       	movw	r30, r16
    16cc:	91 83       	std	Z+1, r25	; 0x01
    16ce:	80 83       	st	Z, r24
    16d0:	de 01       	movw	r26, r28
    16d2:	a9 5b       	subi	r26, 0xB9	; 185
    16d4:	bf 4f       	sbci	r27, 0xFF	; 255
    16d6:	fe 01       	movw	r30, r28
    16d8:	e5 5b       	subi	r30, 0xB5	; 181
    16da:	ff 4f       	sbci	r31, 0xFF	; 255
    16dc:	80 81       	ld	r24, Z
    16de:	91 81       	ldd	r25, Z+1	; 0x01
    16e0:	11 96       	adiw	r26, 0x01	; 1
    16e2:	9c 93       	st	X, r25
    16e4:	8e 93       	st	-X, r24
    16e6:	fe 01       	movw	r30, r28
    16e8:	e9 5b       	subi	r30, 0xB9	; 185
    16ea:	ff 4f       	sbci	r31, 0xFF	; 255
    16ec:	80 81       	ld	r24, Z
    16ee:	91 81       	ldd	r25, Z+1	; 0x01
    16f0:	01 97       	sbiw	r24, 0x01	; 1
    16f2:	f1 f7       	brne	.-4      	; 0x16f0 <creat_pass+0xb10>
    16f4:	fe 01       	movw	r30, r28
    16f6:	e9 5b       	subi	r30, 0xB9	; 185
    16f8:	ff 4f       	sbci	r31, 0xFF	; 255
    16fa:	91 83       	std	Z+1, r25	; 0x01
    16fc:	80 83       	st	Z, r24
	_delay_ms(10);
	for(int i=0;i<5;i++){
    16fe:	fe 01       	movw	r30, r28
    1700:	e5 55       	subi	r30, 0x55	; 85
    1702:	ff 4f       	sbci	r31, 0xFF	; 255
    1704:	11 82       	std	Z+1, r1	; 0x01
    1706:	10 82       	st	Z, r1
    1708:	9f c0       	rjmp	.+318    	; 0x1848 <creat_pass+0xc68>
		UART_sendByte(pass1[i]);
    170a:	fe 01       	movw	r30, r28
    170c:	e5 55       	subi	r30, 0x55	; 85
    170e:	ff 4f       	sbci	r31, 0xFF	; 255
    1710:	20 81       	ld	r18, Z
    1712:	31 81       	ldd	r19, Z+1	; 0x01
    1714:	ce 01       	movw	r24, r28
    1716:	8d 54       	subi	r24, 0x4D	; 77
    1718:	9f 4f       	sbci	r25, 0xFF	; 255
    171a:	fc 01       	movw	r30, r24
    171c:	e2 0f       	add	r30, r18
    171e:	f3 1f       	adc	r31, r19
    1720:	80 81       	ld	r24, Z
    1722:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    1726:	fe 01       	movw	r30, r28
    1728:	ed 5b       	subi	r30, 0xBD	; 189
    172a:	ff 4f       	sbci	r31, 0xFF	; 255
    172c:	80 e0       	ldi	r24, 0x00	; 0
    172e:	90 e0       	ldi	r25, 0x00	; 0
    1730:	a0 e2       	ldi	r26, 0x20	; 32
    1732:	b1 e4       	ldi	r27, 0x41	; 65
    1734:	80 83       	st	Z, r24
    1736:	91 83       	std	Z+1, r25	; 0x01
    1738:	a2 83       	std	Z+2, r26	; 0x02
    173a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    173c:	8e 01       	movw	r16, r28
    173e:	01 5c       	subi	r16, 0xC1	; 193
    1740:	1f 4f       	sbci	r17, 0xFF	; 255
    1742:	fe 01       	movw	r30, r28
    1744:	ed 5b       	subi	r30, 0xBD	; 189
    1746:	ff 4f       	sbci	r31, 0xFF	; 255
    1748:	60 81       	ld	r22, Z
    174a:	71 81       	ldd	r23, Z+1	; 0x01
    174c:	82 81       	ldd	r24, Z+2	; 0x02
    174e:	93 81       	ldd	r25, Z+3	; 0x03
    1750:	20 e0       	ldi	r18, 0x00	; 0
    1752:	30 e0       	ldi	r19, 0x00	; 0
    1754:	4a ef       	ldi	r20, 0xFA	; 250
    1756:	54 e4       	ldi	r21, 0x44	; 68
    1758:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    175c:	dc 01       	movw	r26, r24
    175e:	cb 01       	movw	r24, r22
    1760:	f8 01       	movw	r30, r16
    1762:	80 83       	st	Z, r24
    1764:	91 83       	std	Z+1, r25	; 0x01
    1766:	a2 83       	std	Z+2, r26	; 0x02
    1768:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    176a:	fe 01       	movw	r30, r28
    176c:	ff 96       	adiw	r30, 0x3f	; 63
    176e:	60 81       	ld	r22, Z
    1770:	71 81       	ldd	r23, Z+1	; 0x01
    1772:	82 81       	ldd	r24, Z+2	; 0x02
    1774:	93 81       	ldd	r25, Z+3	; 0x03
    1776:	20 e0       	ldi	r18, 0x00	; 0
    1778:	30 e0       	ldi	r19, 0x00	; 0
    177a:	40 e8       	ldi	r20, 0x80	; 128
    177c:	5f e3       	ldi	r21, 0x3F	; 63
    177e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1782:	88 23       	and	r24, r24
    1784:	2c f4       	brge	.+10     	; 0x1790 <creat_pass+0xbb0>
		__ticks = 1;
    1786:	81 e0       	ldi	r24, 0x01	; 1
    1788:	90 e0       	ldi	r25, 0x00	; 0
    178a:	9e af       	std	Y+62, r25	; 0x3e
    178c:	8d af       	std	Y+61, r24	; 0x3d
    178e:	46 c0       	rjmp	.+140    	; 0x181c <creat_pass+0xc3c>
	else if (__tmp > 65535)
    1790:	fe 01       	movw	r30, r28
    1792:	ff 96       	adiw	r30, 0x3f	; 63
    1794:	60 81       	ld	r22, Z
    1796:	71 81       	ldd	r23, Z+1	; 0x01
    1798:	82 81       	ldd	r24, Z+2	; 0x02
    179a:	93 81       	ldd	r25, Z+3	; 0x03
    179c:	20 e0       	ldi	r18, 0x00	; 0
    179e:	3f ef       	ldi	r19, 0xFF	; 255
    17a0:	4f e7       	ldi	r20, 0x7F	; 127
    17a2:	57 e4       	ldi	r21, 0x47	; 71
    17a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17a8:	18 16       	cp	r1, r24
    17aa:	64 f5       	brge	.+88     	; 0x1804 <creat_pass+0xc24>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17ac:	fe 01       	movw	r30, r28
    17ae:	ed 5b       	subi	r30, 0xBD	; 189
    17b0:	ff 4f       	sbci	r31, 0xFF	; 255
    17b2:	60 81       	ld	r22, Z
    17b4:	71 81       	ldd	r23, Z+1	; 0x01
    17b6:	82 81       	ldd	r24, Z+2	; 0x02
    17b8:	93 81       	ldd	r25, Z+3	; 0x03
    17ba:	20 e0       	ldi	r18, 0x00	; 0
    17bc:	30 e0       	ldi	r19, 0x00	; 0
    17be:	40 e2       	ldi	r20, 0x20	; 32
    17c0:	51 e4       	ldi	r21, 0x41	; 65
    17c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c6:	dc 01       	movw	r26, r24
    17c8:	cb 01       	movw	r24, r22
    17ca:	bc 01       	movw	r22, r24
    17cc:	cd 01       	movw	r24, r26
    17ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d2:	dc 01       	movw	r26, r24
    17d4:	cb 01       	movw	r24, r22
    17d6:	9e af       	std	Y+62, r25	; 0x3e
    17d8:	8d af       	std	Y+61, r24	; 0x3d
    17da:	0f c0       	rjmp	.+30     	; 0x17fa <creat_pass+0xc1a>
    17dc:	88 ec       	ldi	r24, 0xC8	; 200
    17de:	90 e0       	ldi	r25, 0x00	; 0
    17e0:	9c af       	std	Y+60, r25	; 0x3c
    17e2:	8b af       	std	Y+59, r24	; 0x3b
    17e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    17e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    17e8:	01 97       	sbiw	r24, 0x01	; 1
    17ea:	f1 f7       	brne	.-4      	; 0x17e8 <creat_pass+0xc08>
    17ec:	9c af       	std	Y+60, r25	; 0x3c
    17ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    17f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    17f4:	01 97       	sbiw	r24, 0x01	; 1
    17f6:	9e af       	std	Y+62, r25	; 0x3e
    17f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    17fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    17fe:	00 97       	sbiw	r24, 0x00	; 0
    1800:	69 f7       	brne	.-38     	; 0x17dc <creat_pass+0xbfc>
    1802:	16 c0       	rjmp	.+44     	; 0x1830 <creat_pass+0xc50>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1804:	fe 01       	movw	r30, r28
    1806:	ff 96       	adiw	r30, 0x3f	; 63
    1808:	60 81       	ld	r22, Z
    180a:	71 81       	ldd	r23, Z+1	; 0x01
    180c:	82 81       	ldd	r24, Z+2	; 0x02
    180e:	93 81       	ldd	r25, Z+3	; 0x03
    1810:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	9e af       	std	Y+62, r25	; 0x3e
    181a:	8d af       	std	Y+61, r24	; 0x3d
    181c:	8d ad       	ldd	r24, Y+61	; 0x3d
    181e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1820:	9a af       	std	Y+58, r25	; 0x3a
    1822:	89 af       	std	Y+57, r24	; 0x39
    1824:	89 ad       	ldd	r24, Y+57	; 0x39
    1826:	9a ad       	ldd	r25, Y+58	; 0x3a
    1828:	01 97       	sbiw	r24, 0x01	; 1
    182a:	f1 f7       	brne	.-4      	; 0x1828 <creat_pass+0xc48>
    182c:	9a af       	std	Y+58, r25	; 0x3a
    182e:	89 af       	std	Y+57, r24	; 0x39

	/********************** To Send The Entered Password to Control_ECU ************************************/

	UART_sendByte(creat_password);
	_delay_ms(10);
	for(int i=0;i<5;i++){
    1830:	de 01       	movw	r26, r28
    1832:	a5 55       	subi	r26, 0x55	; 85
    1834:	bf 4f       	sbci	r27, 0xFF	; 255
    1836:	fe 01       	movw	r30, r28
    1838:	e5 55       	subi	r30, 0x55	; 85
    183a:	ff 4f       	sbci	r31, 0xFF	; 255
    183c:	80 81       	ld	r24, Z
    183e:	91 81       	ldd	r25, Z+1	; 0x01
    1840:	01 96       	adiw	r24, 0x01	; 1
    1842:	11 96       	adiw	r26, 0x01	; 1
    1844:	9c 93       	st	X, r25
    1846:	8e 93       	st	-X, r24
    1848:	fe 01       	movw	r30, r28
    184a:	e5 55       	subi	r30, 0x55	; 85
    184c:	ff 4f       	sbci	r31, 0xFF	; 255
    184e:	80 81       	ld	r24, Z
    1850:	91 81       	ldd	r25, Z+1	; 0x01
    1852:	85 30       	cpi	r24, 0x05	; 5
    1854:	91 05       	cpc	r25, r1
    1856:	0c f4       	brge	.+2      	; 0x185a <creat_pass+0xc7a>
    1858:	58 cf       	rjmp	.-336    	; 0x170a <creat_pass+0xb2a>
		UART_sendByte(pass1[i]);
		_delay_ms(10);
	}

	for(int i=0;i<5;i++){
    185a:	fe 01       	movw	r30, r28
    185c:	e7 55       	subi	r30, 0x57	; 87
    185e:	ff 4f       	sbci	r31, 0xFF	; 255
    1860:	11 82       	std	Z+1, r1	; 0x01
    1862:	10 82       	st	Z, r1
    1864:	8c c0       	rjmp	.+280    	; 0x197e <creat_pass+0xd9e>
		UART_sendByte(pass2[i]);
    1866:	fe 01       	movw	r30, r28
    1868:	e7 55       	subi	r30, 0x57	; 87
    186a:	ff 4f       	sbci	r31, 0xFF	; 255
    186c:	20 81       	ld	r18, Z
    186e:	31 81       	ldd	r19, Z+1	; 0x01
    1870:	ce 01       	movw	r24, r28
    1872:	88 54       	subi	r24, 0x48	; 72
    1874:	9f 4f       	sbci	r25, 0xFF	; 255
    1876:	fc 01       	movw	r30, r24
    1878:	e2 0f       	add	r30, r18
    187a:	f3 1f       	adc	r31, r19
    187c:	80 81       	ld	r24, Z
    187e:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    1882:	80 e0       	ldi	r24, 0x00	; 0
    1884:	90 e0       	ldi	r25, 0x00	; 0
    1886:	a0 e2       	ldi	r26, 0x20	; 32
    1888:	b1 e4       	ldi	r27, 0x41	; 65
    188a:	8d ab       	std	Y+53, r24	; 0x35
    188c:	9e ab       	std	Y+54, r25	; 0x36
    188e:	af ab       	std	Y+55, r26	; 0x37
    1890:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1892:	6d a9       	ldd	r22, Y+53	; 0x35
    1894:	7e a9       	ldd	r23, Y+54	; 0x36
    1896:	8f a9       	ldd	r24, Y+55	; 0x37
    1898:	98 ad       	ldd	r25, Y+56	; 0x38
    189a:	20 e0       	ldi	r18, 0x00	; 0
    189c:	30 e0       	ldi	r19, 0x00	; 0
    189e:	4a ef       	ldi	r20, 0xFA	; 250
    18a0:	54 e4       	ldi	r21, 0x44	; 68
    18a2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a6:	dc 01       	movw	r26, r24
    18a8:	cb 01       	movw	r24, r22
    18aa:	89 ab       	std	Y+49, r24	; 0x31
    18ac:	9a ab       	std	Y+50, r25	; 0x32
    18ae:	ab ab       	std	Y+51, r26	; 0x33
    18b0:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    18b2:	69 a9       	ldd	r22, Y+49	; 0x31
    18b4:	7a a9       	ldd	r23, Y+50	; 0x32
    18b6:	8b a9       	ldd	r24, Y+51	; 0x33
    18b8:	9c a9       	ldd	r25, Y+52	; 0x34
    18ba:	20 e0       	ldi	r18, 0x00	; 0
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	40 e8       	ldi	r20, 0x80	; 128
    18c0:	5f e3       	ldi	r21, 0x3F	; 63
    18c2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c6:	88 23       	and	r24, r24
    18c8:	2c f4       	brge	.+10     	; 0x18d4 <creat_pass+0xcf4>
		__ticks = 1;
    18ca:	81 e0       	ldi	r24, 0x01	; 1
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	98 ab       	std	Y+48, r25	; 0x30
    18d0:	8f a7       	std	Y+47, r24	; 0x2f
    18d2:	3f c0       	rjmp	.+126    	; 0x1952 <creat_pass+0xd72>
	else if (__tmp > 65535)
    18d4:	69 a9       	ldd	r22, Y+49	; 0x31
    18d6:	7a a9       	ldd	r23, Y+50	; 0x32
    18d8:	8b a9       	ldd	r24, Y+51	; 0x33
    18da:	9c a9       	ldd	r25, Y+52	; 0x34
    18dc:	20 e0       	ldi	r18, 0x00	; 0
    18de:	3f ef       	ldi	r19, 0xFF	; 255
    18e0:	4f e7       	ldi	r20, 0x7F	; 127
    18e2:	57 e4       	ldi	r21, 0x47	; 71
    18e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e8:	18 16       	cp	r1, r24
    18ea:	4c f5       	brge	.+82     	; 0x193e <creat_pass+0xd5e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ec:	6d a9       	ldd	r22, Y+53	; 0x35
    18ee:	7e a9       	ldd	r23, Y+54	; 0x36
    18f0:	8f a9       	ldd	r24, Y+55	; 0x37
    18f2:	98 ad       	ldd	r25, Y+56	; 0x38
    18f4:	20 e0       	ldi	r18, 0x00	; 0
    18f6:	30 e0       	ldi	r19, 0x00	; 0
    18f8:	40 e2       	ldi	r20, 0x20	; 32
    18fa:	51 e4       	ldi	r21, 0x41	; 65
    18fc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1900:	dc 01       	movw	r26, r24
    1902:	cb 01       	movw	r24, r22
    1904:	bc 01       	movw	r22, r24
    1906:	cd 01       	movw	r24, r26
    1908:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190c:	dc 01       	movw	r26, r24
    190e:	cb 01       	movw	r24, r22
    1910:	98 ab       	std	Y+48, r25	; 0x30
    1912:	8f a7       	std	Y+47, r24	; 0x2f
    1914:	0f c0       	rjmp	.+30     	; 0x1934 <creat_pass+0xd54>
    1916:	88 ec       	ldi	r24, 0xC8	; 200
    1918:	90 e0       	ldi	r25, 0x00	; 0
    191a:	9e a7       	std	Y+46, r25	; 0x2e
    191c:	8d a7       	std	Y+45, r24	; 0x2d
    191e:	8d a5       	ldd	r24, Y+45	; 0x2d
    1920:	9e a5       	ldd	r25, Y+46	; 0x2e
    1922:	01 97       	sbiw	r24, 0x01	; 1
    1924:	f1 f7       	brne	.-4      	; 0x1922 <creat_pass+0xd42>
    1926:	9e a7       	std	Y+46, r25	; 0x2e
    1928:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    192a:	8f a5       	ldd	r24, Y+47	; 0x2f
    192c:	98 a9       	ldd	r25, Y+48	; 0x30
    192e:	01 97       	sbiw	r24, 0x01	; 1
    1930:	98 ab       	std	Y+48, r25	; 0x30
    1932:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1934:	8f a5       	ldd	r24, Y+47	; 0x2f
    1936:	98 a9       	ldd	r25, Y+48	; 0x30
    1938:	00 97       	sbiw	r24, 0x00	; 0
    193a:	69 f7       	brne	.-38     	; 0x1916 <creat_pass+0xd36>
    193c:	14 c0       	rjmp	.+40     	; 0x1966 <creat_pass+0xd86>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193e:	69 a9       	ldd	r22, Y+49	; 0x31
    1940:	7a a9       	ldd	r23, Y+50	; 0x32
    1942:	8b a9       	ldd	r24, Y+51	; 0x33
    1944:	9c a9       	ldd	r25, Y+52	; 0x34
    1946:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    194a:	dc 01       	movw	r26, r24
    194c:	cb 01       	movw	r24, r22
    194e:	98 ab       	std	Y+48, r25	; 0x30
    1950:	8f a7       	std	Y+47, r24	; 0x2f
    1952:	8f a5       	ldd	r24, Y+47	; 0x2f
    1954:	98 a9       	ldd	r25, Y+48	; 0x30
    1956:	9c a7       	std	Y+44, r25	; 0x2c
    1958:	8b a7       	std	Y+43, r24	; 0x2b
    195a:	8b a5       	ldd	r24, Y+43	; 0x2b
    195c:	9c a5       	ldd	r25, Y+44	; 0x2c
    195e:	01 97       	sbiw	r24, 0x01	; 1
    1960:	f1 f7       	brne	.-4      	; 0x195e <creat_pass+0xd7e>
    1962:	9c a7       	std	Y+44, r25	; 0x2c
    1964:	8b a7       	std	Y+43, r24	; 0x2b
	for(int i=0;i<5;i++){
		UART_sendByte(pass1[i]);
		_delay_ms(10);
	}

	for(int i=0;i<5;i++){
    1966:	de 01       	movw	r26, r28
    1968:	a7 55       	subi	r26, 0x57	; 87
    196a:	bf 4f       	sbci	r27, 0xFF	; 255
    196c:	fe 01       	movw	r30, r28
    196e:	e7 55       	subi	r30, 0x57	; 87
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	01 96       	adiw	r24, 0x01	; 1
    1978:	11 96       	adiw	r26, 0x01	; 1
    197a:	9c 93       	st	X, r25
    197c:	8e 93       	st	-X, r24
    197e:	fe 01       	movw	r30, r28
    1980:	e7 55       	subi	r30, 0x57	; 87
    1982:	ff 4f       	sbci	r31, 0xFF	; 255
    1984:	80 81       	ld	r24, Z
    1986:	91 81       	ldd	r25, Z+1	; 0x01
    1988:	85 30       	cpi	r24, 0x05	; 5
    198a:	91 05       	cpc	r25, r1
    198c:	0c f4       	brge	.+2      	; 0x1990 <creat_pass+0xdb0>
    198e:	6b cf       	rjmp	.-298    	; 0x1866 <creat_pass+0xc86>
    1990:	80 e0       	ldi	r24, 0x00	; 0
    1992:	90 e0       	ldi	r25, 0x00	; 0
    1994:	a8 e4       	ldi	r26, 0x48	; 72
    1996:	b2 e4       	ldi	r27, 0x42	; 66
    1998:	8f a3       	std	Y+39, r24	; 0x27
    199a:	98 a7       	std	Y+40, r25	; 0x28
    199c:	a9 a7       	std	Y+41, r26	; 0x29
    199e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    19a0:	6f a1       	ldd	r22, Y+39	; 0x27
    19a2:	78 a5       	ldd	r23, Y+40	; 0x28
    19a4:	89 a5       	ldd	r24, Y+41	; 0x29
    19a6:	9a a5       	ldd	r25, Y+42	; 0x2a
    19a8:	20 e0       	ldi	r18, 0x00	; 0
    19aa:	30 e0       	ldi	r19, 0x00	; 0
    19ac:	4a ef       	ldi	r20, 0xFA	; 250
    19ae:	54 e4       	ldi	r21, 0x44	; 68
    19b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19b4:	dc 01       	movw	r26, r24
    19b6:	cb 01       	movw	r24, r22
    19b8:	8b a3       	std	Y+35, r24	; 0x23
    19ba:	9c a3       	std	Y+36, r25	; 0x24
    19bc:	ad a3       	std	Y+37, r26	; 0x25
    19be:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    19c0:	6b a1       	ldd	r22, Y+35	; 0x23
    19c2:	7c a1       	ldd	r23, Y+36	; 0x24
    19c4:	8d a1       	ldd	r24, Y+37	; 0x25
    19c6:	9e a1       	ldd	r25, Y+38	; 0x26
    19c8:	20 e0       	ldi	r18, 0x00	; 0
    19ca:	30 e0       	ldi	r19, 0x00	; 0
    19cc:	40 e8       	ldi	r20, 0x80	; 128
    19ce:	5f e3       	ldi	r21, 0x3F	; 63
    19d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19d4:	88 23       	and	r24, r24
    19d6:	2c f4       	brge	.+10     	; 0x19e2 <creat_pass+0xe02>
		__ticks = 1;
    19d8:	81 e0       	ldi	r24, 0x01	; 1
    19da:	90 e0       	ldi	r25, 0x00	; 0
    19dc:	9a a3       	std	Y+34, r25	; 0x22
    19de:	89 a3       	std	Y+33, r24	; 0x21
    19e0:	3f c0       	rjmp	.+126    	; 0x1a60 <creat_pass+0xe80>
	else if (__tmp > 65535)
    19e2:	6b a1       	ldd	r22, Y+35	; 0x23
    19e4:	7c a1       	ldd	r23, Y+36	; 0x24
    19e6:	8d a1       	ldd	r24, Y+37	; 0x25
    19e8:	9e a1       	ldd	r25, Y+38	; 0x26
    19ea:	20 e0       	ldi	r18, 0x00	; 0
    19ec:	3f ef       	ldi	r19, 0xFF	; 255
    19ee:	4f e7       	ldi	r20, 0x7F	; 127
    19f0:	57 e4       	ldi	r21, 0x47	; 71
    19f2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19f6:	18 16       	cp	r1, r24
    19f8:	4c f5       	brge	.+82     	; 0x1a4c <creat_pass+0xe6c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19fa:	6f a1       	ldd	r22, Y+39	; 0x27
    19fc:	78 a5       	ldd	r23, Y+40	; 0x28
    19fe:	89 a5       	ldd	r24, Y+41	; 0x29
    1a00:	9a a5       	ldd	r25, Y+42	; 0x2a
    1a02:	20 e0       	ldi	r18, 0x00	; 0
    1a04:	30 e0       	ldi	r19, 0x00	; 0
    1a06:	40 e2       	ldi	r20, 0x20	; 32
    1a08:	51 e4       	ldi	r21, 0x41	; 65
    1a0a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a0e:	dc 01       	movw	r26, r24
    1a10:	cb 01       	movw	r24, r22
    1a12:	bc 01       	movw	r22, r24
    1a14:	cd 01       	movw	r24, r26
    1a16:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a1a:	dc 01       	movw	r26, r24
    1a1c:	cb 01       	movw	r24, r22
    1a1e:	9a a3       	std	Y+34, r25	; 0x22
    1a20:	89 a3       	std	Y+33, r24	; 0x21
    1a22:	0f c0       	rjmp	.+30     	; 0x1a42 <creat_pass+0xe62>
    1a24:	88 ec       	ldi	r24, 0xC8	; 200
    1a26:	90 e0       	ldi	r25, 0x00	; 0
    1a28:	98 a3       	std	Y+32, r25	; 0x20
    1a2a:	8f 8f       	std	Y+31, r24	; 0x1f
    1a2c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1a2e:	98 a1       	ldd	r25, Y+32	; 0x20
    1a30:	01 97       	sbiw	r24, 0x01	; 1
    1a32:	f1 f7       	brne	.-4      	; 0x1a30 <creat_pass+0xe50>
    1a34:	98 a3       	std	Y+32, r25	; 0x20
    1a36:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a38:	89 a1       	ldd	r24, Y+33	; 0x21
    1a3a:	9a a1       	ldd	r25, Y+34	; 0x22
    1a3c:	01 97       	sbiw	r24, 0x01	; 1
    1a3e:	9a a3       	std	Y+34, r25	; 0x22
    1a40:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a42:	89 a1       	ldd	r24, Y+33	; 0x21
    1a44:	9a a1       	ldd	r25, Y+34	; 0x22
    1a46:	00 97       	sbiw	r24, 0x00	; 0
    1a48:	69 f7       	brne	.-38     	; 0x1a24 <creat_pass+0xe44>
    1a4a:	14 c0       	rjmp	.+40     	; 0x1a74 <creat_pass+0xe94>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a4c:	6b a1       	ldd	r22, Y+35	; 0x23
    1a4e:	7c a1       	ldd	r23, Y+36	; 0x24
    1a50:	8d a1       	ldd	r24, Y+37	; 0x25
    1a52:	9e a1       	ldd	r25, Y+38	; 0x26
    1a54:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a58:	dc 01       	movw	r26, r24
    1a5a:	cb 01       	movw	r24, r22
    1a5c:	9a a3       	std	Y+34, r25	; 0x22
    1a5e:	89 a3       	std	Y+33, r24	; 0x21
    1a60:	89 a1       	ldd	r24, Y+33	; 0x21
    1a62:	9a a1       	ldd	r25, Y+34	; 0x22
    1a64:	9e 8f       	std	Y+30, r25	; 0x1e
    1a66:	8d 8f       	std	Y+29, r24	; 0x1d
    1a68:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1a6a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1a6c:	01 97       	sbiw	r24, 0x01	; 1
    1a6e:	f1 f7       	brne	.-4      	; 0x1a6c <creat_pass+0xe8c>
    1a70:	9e 8f       	std	Y+30, r25	; 0x1e
    1a72:	8d 8f       	std	Y+29, r24	; 0x1d
		UART_sendByte(pass2[i]);
		_delay_ms(10);
	}
	_delay_ms(50);
	/******************* Receive the result of the check operation from Control_ECU  */
	check=UART_recieveByte();
    1a74:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_recieveByte>
    1a78:	fe 01       	movw	r30, r28
    1a7a:	ef 54       	subi	r30, 0x4F	; 79
    1a7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a7e:	88 2f       	mov	r24, r24
    1a80:	90 e0       	ldi	r25, 0x00	; 0
    1a82:	91 83       	std	Z+1, r25	; 0x01
    1a84:	80 83       	st	Z, r24
    1a86:	80 e0       	ldi	r24, 0x00	; 0
    1a88:	90 e0       	ldi	r25, 0x00	; 0
    1a8a:	a8 e4       	ldi	r26, 0x48	; 72
    1a8c:	b2 e4       	ldi	r27, 0x42	; 66
    1a8e:	89 8f       	std	Y+25, r24	; 0x19
    1a90:	9a 8f       	std	Y+26, r25	; 0x1a
    1a92:	ab 8f       	std	Y+27, r26	; 0x1b
    1a94:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a96:	69 8d       	ldd	r22, Y+25	; 0x19
    1a98:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1a9a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1a9c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1a9e:	20 e0       	ldi	r18, 0x00	; 0
    1aa0:	30 e0       	ldi	r19, 0x00	; 0
    1aa2:	4a ef       	ldi	r20, 0xFA	; 250
    1aa4:	54 e4       	ldi	r21, 0x44	; 68
    1aa6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1aaa:	dc 01       	movw	r26, r24
    1aac:	cb 01       	movw	r24, r22
    1aae:	8d 8b       	std	Y+21, r24	; 0x15
    1ab0:	9e 8b       	std	Y+22, r25	; 0x16
    1ab2:	af 8b       	std	Y+23, r26	; 0x17
    1ab4:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1ab6:	6d 89       	ldd	r22, Y+21	; 0x15
    1ab8:	7e 89       	ldd	r23, Y+22	; 0x16
    1aba:	8f 89       	ldd	r24, Y+23	; 0x17
    1abc:	98 8d       	ldd	r25, Y+24	; 0x18
    1abe:	20 e0       	ldi	r18, 0x00	; 0
    1ac0:	30 e0       	ldi	r19, 0x00	; 0
    1ac2:	40 e8       	ldi	r20, 0x80	; 128
    1ac4:	5f e3       	ldi	r21, 0x3F	; 63
    1ac6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aca:	88 23       	and	r24, r24
    1acc:	2c f4       	brge	.+10     	; 0x1ad8 <creat_pass+0xef8>
		__ticks = 1;
    1ace:	81 e0       	ldi	r24, 0x01	; 1
    1ad0:	90 e0       	ldi	r25, 0x00	; 0
    1ad2:	9c 8b       	std	Y+20, r25	; 0x14
    1ad4:	8b 8b       	std	Y+19, r24	; 0x13
    1ad6:	3f c0       	rjmp	.+126    	; 0x1b56 <creat_pass+0xf76>
	else if (__tmp > 65535)
    1ad8:	6d 89       	ldd	r22, Y+21	; 0x15
    1ada:	7e 89       	ldd	r23, Y+22	; 0x16
    1adc:	8f 89       	ldd	r24, Y+23	; 0x17
    1ade:	98 8d       	ldd	r25, Y+24	; 0x18
    1ae0:	20 e0       	ldi	r18, 0x00	; 0
    1ae2:	3f ef       	ldi	r19, 0xFF	; 255
    1ae4:	4f e7       	ldi	r20, 0x7F	; 127
    1ae6:	57 e4       	ldi	r21, 0x47	; 71
    1ae8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1aec:	18 16       	cp	r1, r24
    1aee:	4c f5       	brge	.+82     	; 0x1b42 <creat_pass+0xf62>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1af0:	69 8d       	ldd	r22, Y+25	; 0x19
    1af2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1af4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1af6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1af8:	20 e0       	ldi	r18, 0x00	; 0
    1afa:	30 e0       	ldi	r19, 0x00	; 0
    1afc:	40 e2       	ldi	r20, 0x20	; 32
    1afe:	51 e4       	ldi	r21, 0x41	; 65
    1b00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1b04:	dc 01       	movw	r26, r24
    1b06:	cb 01       	movw	r24, r22
    1b08:	bc 01       	movw	r22, r24
    1b0a:	cd 01       	movw	r24, r26
    1b0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b10:	dc 01       	movw	r26, r24
    1b12:	cb 01       	movw	r24, r22
    1b14:	9c 8b       	std	Y+20, r25	; 0x14
    1b16:	8b 8b       	std	Y+19, r24	; 0x13
    1b18:	0f c0       	rjmp	.+30     	; 0x1b38 <creat_pass+0xf58>
    1b1a:	88 ec       	ldi	r24, 0xC8	; 200
    1b1c:	90 e0       	ldi	r25, 0x00	; 0
    1b1e:	9a 8b       	std	Y+18, r25	; 0x12
    1b20:	89 8b       	std	Y+17, r24	; 0x11
    1b22:	89 89       	ldd	r24, Y+17	; 0x11
    1b24:	9a 89       	ldd	r25, Y+18	; 0x12
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	f1 f7       	brne	.-4      	; 0x1b26 <creat_pass+0xf46>
    1b2a:	9a 8b       	std	Y+18, r25	; 0x12
    1b2c:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b2e:	8b 89       	ldd	r24, Y+19	; 0x13
    1b30:	9c 89       	ldd	r25, Y+20	; 0x14
    1b32:	01 97       	sbiw	r24, 0x01	; 1
    1b34:	9c 8b       	std	Y+20, r25	; 0x14
    1b36:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b38:	8b 89       	ldd	r24, Y+19	; 0x13
    1b3a:	9c 89       	ldd	r25, Y+20	; 0x14
    1b3c:	00 97       	sbiw	r24, 0x00	; 0
    1b3e:	69 f7       	brne	.-38     	; 0x1b1a <creat_pass+0xf3a>
    1b40:	14 c0       	rjmp	.+40     	; 0x1b6a <creat_pass+0xf8a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b42:	6d 89       	ldd	r22, Y+21	; 0x15
    1b44:	7e 89       	ldd	r23, Y+22	; 0x16
    1b46:	8f 89       	ldd	r24, Y+23	; 0x17
    1b48:	98 8d       	ldd	r25, Y+24	; 0x18
    1b4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b4e:	dc 01       	movw	r26, r24
    1b50:	cb 01       	movw	r24, r22
    1b52:	9c 8b       	std	Y+20, r25	; 0x14
    1b54:	8b 8b       	std	Y+19, r24	; 0x13
    1b56:	8b 89       	ldd	r24, Y+19	; 0x13
    1b58:	9c 89       	ldd	r25, Y+20	; 0x14
    1b5a:	98 8b       	std	Y+16, r25	; 0x10
    1b5c:	8f 87       	std	Y+15, r24	; 0x0f
    1b5e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1b60:	98 89       	ldd	r25, Y+16	; 0x10
    1b62:	01 97       	sbiw	r24, 0x01	; 1
    1b64:	f1 f7       	brne	.-4      	; 0x1b62 <creat_pass+0xf82>
    1b66:	98 8b       	std	Y+16, r25	; 0x10
    1b68:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(50);

	if(check==1){
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	ef 54       	subi	r30, 0x4F	; 79
    1b6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b70:	80 81       	ld	r24, Z
    1b72:	91 81       	ldd	r25, Z+1	; 0x01
    1b74:	81 30       	cpi	r24, 0x01	; 1
    1b76:	91 05       	cpc	r25, r1
    1b78:	09 f0       	breq	.+2      	; 0x1b7c <creat_pass+0xf9c>
    1b7a:	79 c0       	rjmp	.+242    	; 0x1c6e <creat_pass+0x108e>
		flagg=0;
    1b7c:	10 92 38 01 	sts	0x0138, r1
		UART_sendByte(required_operation ); //send the required operation to Control_ECU
    1b80:	82 e0       	ldi	r24, 0x02	; 2
    1b82:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	a0 e2       	ldi	r26, 0x20	; 32
    1b8c:	b1 e4       	ldi	r27, 0x41	; 65
    1b8e:	8b 87       	std	Y+11, r24	; 0x0b
    1b90:	9c 87       	std	Y+12, r25	; 0x0c
    1b92:	ad 87       	std	Y+13, r26	; 0x0d
    1b94:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b96:	6b 85       	ldd	r22, Y+11	; 0x0b
    1b98:	7c 85       	ldd	r23, Y+12	; 0x0c
    1b9a:	8d 85       	ldd	r24, Y+13	; 0x0d
    1b9c:	9e 85       	ldd	r25, Y+14	; 0x0e
    1b9e:	20 e0       	ldi	r18, 0x00	; 0
    1ba0:	30 e0       	ldi	r19, 0x00	; 0
    1ba2:	4a ef       	ldi	r20, 0xFA	; 250
    1ba4:	54 e4       	ldi	r21, 0x44	; 68
    1ba6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	8f 83       	std	Y+7, r24	; 0x07
    1bb0:	98 87       	std	Y+8, r25	; 0x08
    1bb2:	a9 87       	std	Y+9, r26	; 0x09
    1bb4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1bb6:	6f 81       	ldd	r22, Y+7	; 0x07
    1bb8:	78 85       	ldd	r23, Y+8	; 0x08
    1bba:	89 85       	ldd	r24, Y+9	; 0x09
    1bbc:	9a 85       	ldd	r25, Y+10	; 0x0a
    1bbe:	20 e0       	ldi	r18, 0x00	; 0
    1bc0:	30 e0       	ldi	r19, 0x00	; 0
    1bc2:	40 e8       	ldi	r20, 0x80	; 128
    1bc4:	5f e3       	ldi	r21, 0x3F	; 63
    1bc6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1bca:	88 23       	and	r24, r24
    1bcc:	2c f4       	brge	.+10     	; 0x1bd8 <creat_pass+0xff8>
		__ticks = 1;
    1bce:	81 e0       	ldi	r24, 0x01	; 1
    1bd0:	90 e0       	ldi	r25, 0x00	; 0
    1bd2:	9e 83       	std	Y+6, r25	; 0x06
    1bd4:	8d 83       	std	Y+5, r24	; 0x05
    1bd6:	3f c0       	rjmp	.+126    	; 0x1c56 <creat_pass+0x1076>
	else if (__tmp > 65535)
    1bd8:	6f 81       	ldd	r22, Y+7	; 0x07
    1bda:	78 85       	ldd	r23, Y+8	; 0x08
    1bdc:	89 85       	ldd	r24, Y+9	; 0x09
    1bde:	9a 85       	ldd	r25, Y+10	; 0x0a
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	3f ef       	ldi	r19, 0xFF	; 255
    1be4:	4f e7       	ldi	r20, 0x7F	; 127
    1be6:	57 e4       	ldi	r21, 0x47	; 71
    1be8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1bec:	18 16       	cp	r1, r24
    1bee:	4c f5       	brge	.+82     	; 0x1c42 <creat_pass+0x1062>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1bf0:	6b 85       	ldd	r22, Y+11	; 0x0b
    1bf2:	7c 85       	ldd	r23, Y+12	; 0x0c
    1bf4:	8d 85       	ldd	r24, Y+13	; 0x0d
    1bf6:	9e 85       	ldd	r25, Y+14	; 0x0e
    1bf8:	20 e0       	ldi	r18, 0x00	; 0
    1bfa:	30 e0       	ldi	r19, 0x00	; 0
    1bfc:	40 e2       	ldi	r20, 0x20	; 32
    1bfe:	51 e4       	ldi	r21, 0x41	; 65
    1c00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c04:	dc 01       	movw	r26, r24
    1c06:	cb 01       	movw	r24, r22
    1c08:	bc 01       	movw	r22, r24
    1c0a:	cd 01       	movw	r24, r26
    1c0c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c10:	dc 01       	movw	r26, r24
    1c12:	cb 01       	movw	r24, r22
    1c14:	9e 83       	std	Y+6, r25	; 0x06
    1c16:	8d 83       	std	Y+5, r24	; 0x05
    1c18:	0f c0       	rjmp	.+30     	; 0x1c38 <creat_pass+0x1058>
    1c1a:	88 ec       	ldi	r24, 0xC8	; 200
    1c1c:	90 e0       	ldi	r25, 0x00	; 0
    1c1e:	9c 83       	std	Y+4, r25	; 0x04
    1c20:	8b 83       	std	Y+3, r24	; 0x03
    1c22:	8b 81       	ldd	r24, Y+3	; 0x03
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	01 97       	sbiw	r24, 0x01	; 1
    1c28:	f1 f7       	brne	.-4      	; 0x1c26 <creat_pass+0x1046>
    1c2a:	9c 83       	std	Y+4, r25	; 0x04
    1c2c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c2e:	8d 81       	ldd	r24, Y+5	; 0x05
    1c30:	9e 81       	ldd	r25, Y+6	; 0x06
    1c32:	01 97       	sbiw	r24, 0x01	; 1
    1c34:	9e 83       	std	Y+6, r25	; 0x06
    1c36:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1c38:	8d 81       	ldd	r24, Y+5	; 0x05
    1c3a:	9e 81       	ldd	r25, Y+6	; 0x06
    1c3c:	00 97       	sbiw	r24, 0x00	; 0
    1c3e:	69 f7       	brne	.-38     	; 0x1c1a <creat_pass+0x103a>
    1c40:	14 c0       	rjmp	.+40     	; 0x1c6a <creat_pass+0x108a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c42:	6f 81       	ldd	r22, Y+7	; 0x07
    1c44:	78 85       	ldd	r23, Y+8	; 0x08
    1c46:	89 85       	ldd	r24, Y+9	; 0x09
    1c48:	9a 85       	ldd	r25, Y+10	; 0x0a
    1c4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1c4e:	dc 01       	movw	r26, r24
    1c50:	cb 01       	movw	r24, r22
    1c52:	9e 83       	std	Y+6, r25	; 0x06
    1c54:	8d 83       	std	Y+5, r24	; 0x05
    1c56:	8d 81       	ldd	r24, Y+5	; 0x05
    1c58:	9e 81       	ldd	r25, Y+6	; 0x06
    1c5a:	9a 83       	std	Y+2, r25	; 0x02
    1c5c:	89 83       	std	Y+1, r24	; 0x01
    1c5e:	89 81       	ldd	r24, Y+1	; 0x01
    1c60:	9a 81       	ldd	r25, Y+2	; 0x02
    1c62:	01 97       	sbiw	r24, 0x01	; 1
    1c64:	f1 f7       	brne	.-4      	; 0x1c62 <creat_pass+0x1082>
    1c66:	9a 83       	std	Y+2, r25	; 0x02
    1c68:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(10);
		main_option();//call the main options
    1c6a:	0e 94 09 15 	call	0x2a12	; 0x2a12 <main_option>

	}
}
    1c6e:	c4 54       	subi	r28, 0x44	; 68
    1c70:	df 4f       	sbci	r29, 0xFF	; 255
    1c72:	0f b6       	in	r0, 0x3f	; 63
    1c74:	f8 94       	cli
    1c76:	de bf       	out	0x3e, r29	; 62
    1c78:	0f be       	out	0x3f, r0	; 63
    1c7a:	cd bf       	out	0x3d, r28	; 61
    1c7c:	cf 91       	pop	r28
    1c7e:	df 91       	pop	r29
    1c80:	1f 91       	pop	r17
    1c82:	0f 91       	pop	r16
    1c84:	08 95       	ret

00001c86 <reenter_pass>:
void reenter_pass(void){
    1c86:	0f 93       	push	r16
    1c88:	1f 93       	push	r17
    1c8a:	df 93       	push	r29
    1c8c:	cf 93       	push	r28
    1c8e:	cd b7       	in	r28, 0x3d	; 61
    1c90:	de b7       	in	r29, 0x3e	; 62
    1c92:	c7 59       	subi	r28, 0x97	; 151
    1c94:	d0 40       	sbci	r29, 0x00	; 0
    1c96:	0f b6       	in	r0, 0x3f	; 63
    1c98:	f8 94       	cli
    1c9a:	de bf       	out	0x3e, r29	; 62
    1c9c:	0f be       	out	0x3f, r0	; 63
    1c9e:	cd bf       	out	0x3d, r28	; 61
	int check1;

	uint8 pass3[5]={0};
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	8d 56       	subi	r24, 0x6D	; 109
    1ca4:	9f 4f       	sbci	r25, 0xFF	; 255
    1ca6:	25 e0       	ldi	r18, 0x05	; 5
    1ca8:	fc 01       	movw	r30, r24
    1caa:	df 01       	movw	r26, r30
    1cac:	82 2f       	mov	r24, r18
    1cae:	1d 92       	st	X+, r1
    1cb0:	8a 95       	dec	r24
    1cb2:	e9 f7       	brne	.-6      	; 0x1cae <reenter_pass+0x28>
	/*********************** To save first Password entering from user to HMI_ECU ************************/

	LCD_clearScreen();//clear LCD
    1cb4:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_displayString("PLZ enter YOUR");//display on LCD
    1cb8:	80 e9       	ldi	r24, 0x90	; 144
    1cba:	90 e0       	ldi	r25, 0x00	; 0
    1cbc:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
	LCD_moveCursor(1,0);
    1cc0:	81 e0       	ldi	r24, 0x01	; 1
    1cc2:	60 e0       	ldi	r22, 0x00	; 0
    1cc4:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("Pass :");
    1cc8:	8f e9       	ldi	r24, 0x9F	; 159
    1cca:	90 e0       	ldi	r25, 0x00	; 0
    1ccc:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    1cd0:	fe 01       	movw	r30, r28
    1cd2:	e7 57       	subi	r30, 0x77	; 119
    1cd4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cd6:	80 e0       	ldi	r24, 0x00	; 0
    1cd8:	90 e0       	ldi	r25, 0x00	; 0
    1cda:	a0 e2       	ldi	r26, 0x20	; 32
    1cdc:	b1 e4       	ldi	r27, 0x41	; 65
    1cde:	80 83       	st	Z, r24
    1ce0:	91 83       	std	Z+1, r25	; 0x01
    1ce2:	a2 83       	std	Z+2, r26	; 0x02
    1ce4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ce6:	8e 01       	movw	r16, r28
    1ce8:	0b 57       	subi	r16, 0x7B	; 123
    1cea:	1f 4f       	sbci	r17, 0xFF	; 255
    1cec:	fe 01       	movw	r30, r28
    1cee:	e7 57       	subi	r30, 0x77	; 119
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	4a ef       	ldi	r20, 0xFA	; 250
    1d00:	54 e4       	ldi	r21, 0x44	; 68
    1d02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d06:	dc 01       	movw	r26, r24
    1d08:	cb 01       	movw	r24, r22
    1d0a:	f8 01       	movw	r30, r16
    1d0c:	80 83       	st	Z, r24
    1d0e:	91 83       	std	Z+1, r25	; 0x01
    1d10:	a2 83       	std	Z+2, r26	; 0x02
    1d12:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d14:	fe 01       	movw	r30, r28
    1d16:	eb 57       	subi	r30, 0x7B	; 123
    1d18:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1a:	60 81       	ld	r22, Z
    1d1c:	71 81       	ldd	r23, Z+1	; 0x01
    1d1e:	82 81       	ldd	r24, Z+2	; 0x02
    1d20:	93 81       	ldd	r25, Z+3	; 0x03
    1d22:	20 e0       	ldi	r18, 0x00	; 0
    1d24:	30 e0       	ldi	r19, 0x00	; 0
    1d26:	40 e8       	ldi	r20, 0x80	; 128
    1d28:	5f e3       	ldi	r21, 0x3F	; 63
    1d2a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1d2e:	88 23       	and	r24, r24
    1d30:	44 f4       	brge	.+16     	; 0x1d42 <reenter_pass+0xbc>
		__ticks = 1;
    1d32:	fe 01       	movw	r30, r28
    1d34:	ed 57       	subi	r30, 0x7D	; 125
    1d36:	ff 4f       	sbci	r31, 0xFF	; 255
    1d38:	81 e0       	ldi	r24, 0x01	; 1
    1d3a:	90 e0       	ldi	r25, 0x00	; 0
    1d3c:	91 83       	std	Z+1, r25	; 0x01
    1d3e:	80 83       	st	Z, r24
    1d40:	64 c0       	rjmp	.+200    	; 0x1e0a <reenter_pass+0x184>
	else if (__tmp > 65535)
    1d42:	fe 01       	movw	r30, r28
    1d44:	eb 57       	subi	r30, 0x7B	; 123
    1d46:	ff 4f       	sbci	r31, 0xFF	; 255
    1d48:	60 81       	ld	r22, Z
    1d4a:	71 81       	ldd	r23, Z+1	; 0x01
    1d4c:	82 81       	ldd	r24, Z+2	; 0x02
    1d4e:	93 81       	ldd	r25, Z+3	; 0x03
    1d50:	20 e0       	ldi	r18, 0x00	; 0
    1d52:	3f ef       	ldi	r19, 0xFF	; 255
    1d54:	4f e7       	ldi	r20, 0x7F	; 127
    1d56:	57 e4       	ldi	r21, 0x47	; 71
    1d58:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1d5c:	18 16       	cp	r1, r24
    1d5e:	0c f0       	brlt	.+2      	; 0x1d62 <reenter_pass+0xdc>
    1d60:	43 c0       	rjmp	.+134    	; 0x1de8 <reenter_pass+0x162>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1d62:	fe 01       	movw	r30, r28
    1d64:	e7 57       	subi	r30, 0x77	; 119
    1d66:	ff 4f       	sbci	r31, 0xFF	; 255
    1d68:	60 81       	ld	r22, Z
    1d6a:	71 81       	ldd	r23, Z+1	; 0x01
    1d6c:	82 81       	ldd	r24, Z+2	; 0x02
    1d6e:	93 81       	ldd	r25, Z+3	; 0x03
    1d70:	20 e0       	ldi	r18, 0x00	; 0
    1d72:	30 e0       	ldi	r19, 0x00	; 0
    1d74:	40 e2       	ldi	r20, 0x20	; 32
    1d76:	51 e4       	ldi	r21, 0x41	; 65
    1d78:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1d7c:	dc 01       	movw	r26, r24
    1d7e:	cb 01       	movw	r24, r22
    1d80:	8e 01       	movw	r16, r28
    1d82:	0d 57       	subi	r16, 0x7D	; 125
    1d84:	1f 4f       	sbci	r17, 0xFF	; 255
    1d86:	bc 01       	movw	r22, r24
    1d88:	cd 01       	movw	r24, r26
    1d8a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d8e:	dc 01       	movw	r26, r24
    1d90:	cb 01       	movw	r24, r22
    1d92:	f8 01       	movw	r30, r16
    1d94:	91 83       	std	Z+1, r25	; 0x01
    1d96:	80 83       	st	Z, r24
    1d98:	1f c0       	rjmp	.+62     	; 0x1dd8 <reenter_pass+0x152>
    1d9a:	fe 01       	movw	r30, r28
    1d9c:	ef 57       	subi	r30, 0x7F	; 127
    1d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1da0:	88 ec       	ldi	r24, 0xC8	; 200
    1da2:	90 e0       	ldi	r25, 0x00	; 0
    1da4:	91 83       	std	Z+1, r25	; 0x01
    1da6:	80 83       	st	Z, r24
    1da8:	fe 01       	movw	r30, r28
    1daa:	ef 57       	subi	r30, 0x7F	; 127
    1dac:	ff 4f       	sbci	r31, 0xFF	; 255
    1dae:	80 81       	ld	r24, Z
    1db0:	91 81       	ldd	r25, Z+1	; 0x01
    1db2:	01 97       	sbiw	r24, 0x01	; 1
    1db4:	f1 f7       	brne	.-4      	; 0x1db2 <reenter_pass+0x12c>
    1db6:	fe 01       	movw	r30, r28
    1db8:	ef 57       	subi	r30, 0x7F	; 127
    1dba:	ff 4f       	sbci	r31, 0xFF	; 255
    1dbc:	91 83       	std	Z+1, r25	; 0x01
    1dbe:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dc0:	de 01       	movw	r26, r28
    1dc2:	ad 57       	subi	r26, 0x7D	; 125
    1dc4:	bf 4f       	sbci	r27, 0xFF	; 255
    1dc6:	fe 01       	movw	r30, r28
    1dc8:	ed 57       	subi	r30, 0x7D	; 125
    1dca:	ff 4f       	sbci	r31, 0xFF	; 255
    1dcc:	80 81       	ld	r24, Z
    1dce:	91 81       	ldd	r25, Z+1	; 0x01
    1dd0:	01 97       	sbiw	r24, 0x01	; 1
    1dd2:	11 96       	adiw	r26, 0x01	; 1
    1dd4:	9c 93       	st	X, r25
    1dd6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dd8:	fe 01       	movw	r30, r28
    1dda:	ed 57       	subi	r30, 0x7D	; 125
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	80 81       	ld	r24, Z
    1de0:	91 81       	ldd	r25, Z+1	; 0x01
    1de2:	00 97       	sbiw	r24, 0x00	; 0
    1de4:	d1 f6       	brne	.-76     	; 0x1d9a <reenter_pass+0x114>
    1de6:	c7 c1       	rjmp	.+910    	; 0x2176 <reenter_pass+0x4f0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1de8:	8e 01       	movw	r16, r28
    1dea:	0d 57       	subi	r16, 0x7D	; 125
    1dec:	1f 4f       	sbci	r17, 0xFF	; 255
    1dee:	fe 01       	movw	r30, r28
    1df0:	eb 57       	subi	r30, 0x7B	; 123
    1df2:	ff 4f       	sbci	r31, 0xFF	; 255
    1df4:	60 81       	ld	r22, Z
    1df6:	71 81       	ldd	r23, Z+1	; 0x01
    1df8:	82 81       	ldd	r24, Z+2	; 0x02
    1dfa:	93 81       	ldd	r25, Z+3	; 0x03
    1dfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1e00:	dc 01       	movw	r26, r24
    1e02:	cb 01       	movw	r24, r22
    1e04:	f8 01       	movw	r30, r16
    1e06:	91 83       	std	Z+1, r25	; 0x01
    1e08:	80 83       	st	Z, r24
    1e0a:	de 01       	movw	r26, r28
    1e0c:	a1 58       	subi	r26, 0x81	; 129
    1e0e:	bf 4f       	sbci	r27, 0xFF	; 255
    1e10:	fe 01       	movw	r30, r28
    1e12:	ed 57       	subi	r30, 0x7D	; 125
    1e14:	ff 4f       	sbci	r31, 0xFF	; 255
    1e16:	80 81       	ld	r24, Z
    1e18:	91 81       	ldd	r25, Z+1	; 0x01
    1e1a:	11 96       	adiw	r26, 0x01	; 1
    1e1c:	9c 93       	st	X, r25
    1e1e:	8e 93       	st	-X, r24
    1e20:	fe 01       	movw	r30, r28
    1e22:	e1 58       	subi	r30, 0x81	; 129
    1e24:	ff 4f       	sbci	r31, 0xFF	; 255
    1e26:	80 81       	ld	r24, Z
    1e28:	91 81       	ldd	r25, Z+1	; 0x01
    1e2a:	01 97       	sbiw	r24, 0x01	; 1
    1e2c:	f1 f7       	brne	.-4      	; 0x1e2a <reenter_pass+0x1a4>
    1e2e:	fe 01       	movw	r30, r28
    1e30:	e1 58       	subi	r30, 0x81	; 129
    1e32:	ff 4f       	sbci	r31, 0xFF	; 255
    1e34:	91 83       	std	Z+1, r25	; 0x01
    1e36:	80 83       	st	Z, r24
    1e38:	9e c1       	rjmp	.+828    	; 0x2176 <reenter_pass+0x4f0>
	_delay_ms(10);
	while(KEYPAD_getPressedKey()!=61){ /*wait to save re-input password to check it is true or false compared with
		                                        the first one saved in external eeprom */
		for (int i=0;i<5;i++){
    1e3a:	fe 01       	movw	r30, r28
    1e3c:	e1 57       	subi	r30, 0x71	; 113
    1e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e40:	11 82       	std	Z+1, r1	; 0x01
    1e42:	10 82       	st	Z, r1
    1e44:	8f c1       	rjmp	.+798    	; 0x2164 <reenter_pass+0x4de>

			pass3[i]=KEYPAD_getPressedKey();
    1e46:	fe 01       	movw	r30, r28
    1e48:	e1 57       	subi	r30, 0x71	; 113
    1e4a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4c:	00 81       	ld	r16, Z
    1e4e:	11 81       	ldd	r17, Z+1	; 0x01
    1e50:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
    1e54:	28 2f       	mov	r18, r24
    1e56:	ce 01       	movw	r24, r28
    1e58:	8d 56       	subi	r24, 0x6D	; 109
    1e5a:	9f 4f       	sbci	r25, 0xFF	; 255
    1e5c:	fc 01       	movw	r30, r24
    1e5e:	e0 0f       	add	r30, r16
    1e60:	f1 1f       	adc	r31, r17
    1e62:	20 83       	st	Z, r18
    1e64:	fe 01       	movw	r30, r28
    1e66:	e5 58       	subi	r30, 0x85	; 133
    1e68:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6a:	80 e0       	ldi	r24, 0x00	; 0
    1e6c:	90 e0       	ldi	r25, 0x00	; 0
    1e6e:	a8 ec       	ldi	r26, 0xC8	; 200
    1e70:	b2 e4       	ldi	r27, 0x42	; 66
    1e72:	80 83       	st	Z, r24
    1e74:	91 83       	std	Z+1, r25	; 0x01
    1e76:	a2 83       	std	Z+2, r26	; 0x02
    1e78:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e7a:	8e 01       	movw	r16, r28
    1e7c:	09 58       	subi	r16, 0x89	; 137
    1e7e:	1f 4f       	sbci	r17, 0xFF	; 255
    1e80:	fe 01       	movw	r30, r28
    1e82:	e5 58       	subi	r30, 0x85	; 133
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	60 81       	ld	r22, Z
    1e88:	71 81       	ldd	r23, Z+1	; 0x01
    1e8a:	82 81       	ldd	r24, Z+2	; 0x02
    1e8c:	93 81       	ldd	r25, Z+3	; 0x03
    1e8e:	20 e0       	ldi	r18, 0x00	; 0
    1e90:	30 e0       	ldi	r19, 0x00	; 0
    1e92:	4a ef       	ldi	r20, 0xFA	; 250
    1e94:	54 e4       	ldi	r21, 0x44	; 68
    1e96:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1e9a:	dc 01       	movw	r26, r24
    1e9c:	cb 01       	movw	r24, r22
    1e9e:	f8 01       	movw	r30, r16
    1ea0:	80 83       	st	Z, r24
    1ea2:	91 83       	std	Z+1, r25	; 0x01
    1ea4:	a2 83       	std	Z+2, r26	; 0x02
    1ea6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ea8:	fe 01       	movw	r30, r28
    1eaa:	e9 58       	subi	r30, 0x89	; 137
    1eac:	ff 4f       	sbci	r31, 0xFF	; 255
    1eae:	60 81       	ld	r22, Z
    1eb0:	71 81       	ldd	r23, Z+1	; 0x01
    1eb2:	82 81       	ldd	r24, Z+2	; 0x02
    1eb4:	93 81       	ldd	r25, Z+3	; 0x03
    1eb6:	20 e0       	ldi	r18, 0x00	; 0
    1eb8:	30 e0       	ldi	r19, 0x00	; 0
    1eba:	40 e8       	ldi	r20, 0x80	; 128
    1ebc:	5f e3       	ldi	r21, 0x3F	; 63
    1ebe:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1ec2:	88 23       	and	r24, r24
    1ec4:	44 f4       	brge	.+16     	; 0x1ed6 <reenter_pass+0x250>
		__ticks = 1;
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	eb 58       	subi	r30, 0x8B	; 139
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	81 e0       	ldi	r24, 0x01	; 1
    1ece:	90 e0       	ldi	r25, 0x00	; 0
    1ed0:	91 83       	std	Z+1, r25	; 0x01
    1ed2:	80 83       	st	Z, r24
    1ed4:	64 c0       	rjmp	.+200    	; 0x1f9e <reenter_pass+0x318>
	else if (__tmp > 65535)
    1ed6:	fe 01       	movw	r30, r28
    1ed8:	e9 58       	subi	r30, 0x89	; 137
    1eda:	ff 4f       	sbci	r31, 0xFF	; 255
    1edc:	60 81       	ld	r22, Z
    1ede:	71 81       	ldd	r23, Z+1	; 0x01
    1ee0:	82 81       	ldd	r24, Z+2	; 0x02
    1ee2:	93 81       	ldd	r25, Z+3	; 0x03
    1ee4:	20 e0       	ldi	r18, 0x00	; 0
    1ee6:	3f ef       	ldi	r19, 0xFF	; 255
    1ee8:	4f e7       	ldi	r20, 0x7F	; 127
    1eea:	57 e4       	ldi	r21, 0x47	; 71
    1eec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ef0:	18 16       	cp	r1, r24
    1ef2:	0c f0       	brlt	.+2      	; 0x1ef6 <reenter_pass+0x270>
    1ef4:	43 c0       	rjmp	.+134    	; 0x1f7c <reenter_pass+0x2f6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ef6:	fe 01       	movw	r30, r28
    1ef8:	e5 58       	subi	r30, 0x85	; 133
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	60 81       	ld	r22, Z
    1efe:	71 81       	ldd	r23, Z+1	; 0x01
    1f00:	82 81       	ldd	r24, Z+2	; 0x02
    1f02:	93 81       	ldd	r25, Z+3	; 0x03
    1f04:	20 e0       	ldi	r18, 0x00	; 0
    1f06:	30 e0       	ldi	r19, 0x00	; 0
    1f08:	40 e2       	ldi	r20, 0x20	; 32
    1f0a:	51 e4       	ldi	r21, 0x41	; 65
    1f0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f10:	dc 01       	movw	r26, r24
    1f12:	cb 01       	movw	r24, r22
    1f14:	8e 01       	movw	r16, r28
    1f16:	0b 58       	subi	r16, 0x8B	; 139
    1f18:	1f 4f       	sbci	r17, 0xFF	; 255
    1f1a:	bc 01       	movw	r22, r24
    1f1c:	cd 01       	movw	r24, r26
    1f1e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f22:	dc 01       	movw	r26, r24
    1f24:	cb 01       	movw	r24, r22
    1f26:	f8 01       	movw	r30, r16
    1f28:	91 83       	std	Z+1, r25	; 0x01
    1f2a:	80 83       	st	Z, r24
    1f2c:	1f c0       	rjmp	.+62     	; 0x1f6c <reenter_pass+0x2e6>
    1f2e:	fe 01       	movw	r30, r28
    1f30:	ed 58       	subi	r30, 0x8D	; 141
    1f32:	ff 4f       	sbci	r31, 0xFF	; 255
    1f34:	88 ec       	ldi	r24, 0xC8	; 200
    1f36:	90 e0       	ldi	r25, 0x00	; 0
    1f38:	91 83       	std	Z+1, r25	; 0x01
    1f3a:	80 83       	st	Z, r24
    1f3c:	fe 01       	movw	r30, r28
    1f3e:	ed 58       	subi	r30, 0x8D	; 141
    1f40:	ff 4f       	sbci	r31, 0xFF	; 255
    1f42:	80 81       	ld	r24, Z
    1f44:	91 81       	ldd	r25, Z+1	; 0x01
    1f46:	01 97       	sbiw	r24, 0x01	; 1
    1f48:	f1 f7       	brne	.-4      	; 0x1f46 <reenter_pass+0x2c0>
    1f4a:	fe 01       	movw	r30, r28
    1f4c:	ed 58       	subi	r30, 0x8D	; 141
    1f4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f50:	91 83       	std	Z+1, r25	; 0x01
    1f52:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f54:	de 01       	movw	r26, r28
    1f56:	ab 58       	subi	r26, 0x8B	; 139
    1f58:	bf 4f       	sbci	r27, 0xFF	; 255
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	eb 58       	subi	r30, 0x8B	; 139
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	11 96       	adiw	r26, 0x01	; 1
    1f68:	9c 93       	st	X, r25
    1f6a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f6c:	fe 01       	movw	r30, r28
    1f6e:	eb 58       	subi	r30, 0x8B	; 139
    1f70:	ff 4f       	sbci	r31, 0xFF	; 255
    1f72:	80 81       	ld	r24, Z
    1f74:	91 81       	ldd	r25, Z+1	; 0x01
    1f76:	00 97       	sbiw	r24, 0x00	; 0
    1f78:	d1 f6       	brne	.-76     	; 0x1f2e <reenter_pass+0x2a8>
    1f7a:	27 c0       	rjmp	.+78     	; 0x1fca <reenter_pass+0x344>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f7c:	8e 01       	movw	r16, r28
    1f7e:	0b 58       	subi	r16, 0x8B	; 139
    1f80:	1f 4f       	sbci	r17, 0xFF	; 255
    1f82:	fe 01       	movw	r30, r28
    1f84:	e9 58       	subi	r30, 0x89	; 137
    1f86:	ff 4f       	sbci	r31, 0xFF	; 255
    1f88:	60 81       	ld	r22, Z
    1f8a:	71 81       	ldd	r23, Z+1	; 0x01
    1f8c:	82 81       	ldd	r24, Z+2	; 0x02
    1f8e:	93 81       	ldd	r25, Z+3	; 0x03
    1f90:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f94:	dc 01       	movw	r26, r24
    1f96:	cb 01       	movw	r24, r22
    1f98:	f8 01       	movw	r30, r16
    1f9a:	91 83       	std	Z+1, r25	; 0x01
    1f9c:	80 83       	st	Z, r24
    1f9e:	de 01       	movw	r26, r28
    1fa0:	af 58       	subi	r26, 0x8F	; 143
    1fa2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fa4:	fe 01       	movw	r30, r28
    1fa6:	eb 58       	subi	r30, 0x8B	; 139
    1fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    1faa:	80 81       	ld	r24, Z
    1fac:	91 81       	ldd	r25, Z+1	; 0x01
    1fae:	8d 93       	st	X+, r24
    1fb0:	9c 93       	st	X, r25
    1fb2:	fe 01       	movw	r30, r28
    1fb4:	ef 58       	subi	r30, 0x8F	; 143
    1fb6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fb8:	80 81       	ld	r24, Z
    1fba:	91 81       	ldd	r25, Z+1	; 0x01
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <reenter_pass+0x336>
    1fc0:	fe 01       	movw	r30, r28
    1fc2:	ef 58       	subi	r30, 0x8F	; 143
    1fc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc6:	91 83       	std	Z+1, r25	; 0x01
    1fc8:	80 83       	st	Z, r24
			_delay_ms(100);

			LCD_moveCursor(1,i+7);
    1fca:	fe 01       	movw	r30, r28
    1fcc:	e1 57       	subi	r30, 0x71	; 113
    1fce:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd0:	80 81       	ld	r24, Z
    1fd2:	98 2f       	mov	r25, r24
    1fd4:	99 5f       	subi	r25, 0xF9	; 249
    1fd6:	81 e0       	ldi	r24, 0x01	; 1
    1fd8:	69 2f       	mov	r22, r25
    1fda:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
			LCD_displayString("*");
    1fde:	81 e7       	ldi	r24, 0x71	; 113
    1fe0:	90 e0       	ldi	r25, 0x00	; 0
    1fe2:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    1fe6:	fe 01       	movw	r30, r28
    1fe8:	e3 59       	subi	r30, 0x93	; 147
    1fea:	ff 4f       	sbci	r31, 0xFF	; 255
    1fec:	80 e0       	ldi	r24, 0x00	; 0
    1fee:	90 e0       	ldi	r25, 0x00	; 0
    1ff0:	a8 e4       	ldi	r26, 0x48	; 72
    1ff2:	b3 e4       	ldi	r27, 0x43	; 67
    1ff4:	80 83       	st	Z, r24
    1ff6:	91 83       	std	Z+1, r25	; 0x01
    1ff8:	a2 83       	std	Z+2, r26	; 0x02
    1ffa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ffc:	8e 01       	movw	r16, r28
    1ffe:	07 59       	subi	r16, 0x97	; 151
    2000:	1f 4f       	sbci	r17, 0xFF	; 255
    2002:	fe 01       	movw	r30, r28
    2004:	e3 59       	subi	r30, 0x93	; 147
    2006:	ff 4f       	sbci	r31, 0xFF	; 255
    2008:	60 81       	ld	r22, Z
    200a:	71 81       	ldd	r23, Z+1	; 0x01
    200c:	82 81       	ldd	r24, Z+2	; 0x02
    200e:	93 81       	ldd	r25, Z+3	; 0x03
    2010:	20 e0       	ldi	r18, 0x00	; 0
    2012:	30 e0       	ldi	r19, 0x00	; 0
    2014:	4a ef       	ldi	r20, 0xFA	; 250
    2016:	54 e4       	ldi	r21, 0x44	; 68
    2018:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    201c:	dc 01       	movw	r26, r24
    201e:	cb 01       	movw	r24, r22
    2020:	f8 01       	movw	r30, r16
    2022:	80 83       	st	Z, r24
    2024:	91 83       	std	Z+1, r25	; 0x01
    2026:	a2 83       	std	Z+2, r26	; 0x02
    2028:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    202a:	fe 01       	movw	r30, r28
    202c:	e7 59       	subi	r30, 0x97	; 151
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	60 81       	ld	r22, Z
    2032:	71 81       	ldd	r23, Z+1	; 0x01
    2034:	82 81       	ldd	r24, Z+2	; 0x02
    2036:	93 81       	ldd	r25, Z+3	; 0x03
    2038:	20 e0       	ldi	r18, 0x00	; 0
    203a:	30 e0       	ldi	r19, 0x00	; 0
    203c:	40 e8       	ldi	r20, 0x80	; 128
    203e:	5f e3       	ldi	r21, 0x3F	; 63
    2040:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2044:	88 23       	and	r24, r24
    2046:	44 f4       	brge	.+16     	; 0x2058 <reenter_pass+0x3d2>
		__ticks = 1;
    2048:	fe 01       	movw	r30, r28
    204a:	e9 59       	subi	r30, 0x99	; 153
    204c:	ff 4f       	sbci	r31, 0xFF	; 255
    204e:	81 e0       	ldi	r24, 0x01	; 1
    2050:	90 e0       	ldi	r25, 0x00	; 0
    2052:	91 83       	std	Z+1, r25	; 0x01
    2054:	80 83       	st	Z, r24
    2056:	64 c0       	rjmp	.+200    	; 0x2120 <reenter_pass+0x49a>
	else if (__tmp > 65535)
    2058:	fe 01       	movw	r30, r28
    205a:	e7 59       	subi	r30, 0x97	; 151
    205c:	ff 4f       	sbci	r31, 0xFF	; 255
    205e:	60 81       	ld	r22, Z
    2060:	71 81       	ldd	r23, Z+1	; 0x01
    2062:	82 81       	ldd	r24, Z+2	; 0x02
    2064:	93 81       	ldd	r25, Z+3	; 0x03
    2066:	20 e0       	ldi	r18, 0x00	; 0
    2068:	3f ef       	ldi	r19, 0xFF	; 255
    206a:	4f e7       	ldi	r20, 0x7F	; 127
    206c:	57 e4       	ldi	r21, 0x47	; 71
    206e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2072:	18 16       	cp	r1, r24
    2074:	0c f0       	brlt	.+2      	; 0x2078 <reenter_pass+0x3f2>
    2076:	43 c0       	rjmp	.+134    	; 0x20fe <reenter_pass+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2078:	fe 01       	movw	r30, r28
    207a:	e3 59       	subi	r30, 0x93	; 147
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	40 e2       	ldi	r20, 0x20	; 32
    208c:	51 e4       	ldi	r21, 0x41	; 65
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	8e 01       	movw	r16, r28
    2098:	09 59       	subi	r16, 0x99	; 153
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	bc 01       	movw	r22, r24
    209e:	cd 01       	movw	r24, r26
    20a0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    20a4:	dc 01       	movw	r26, r24
    20a6:	cb 01       	movw	r24, r22
    20a8:	f8 01       	movw	r30, r16
    20aa:	91 83       	std	Z+1, r25	; 0x01
    20ac:	80 83       	st	Z, r24
    20ae:	1f c0       	rjmp	.+62     	; 0x20ee <reenter_pass+0x468>
    20b0:	fe 01       	movw	r30, r28
    20b2:	eb 59       	subi	r30, 0x9B	; 155
    20b4:	ff 4f       	sbci	r31, 0xFF	; 255
    20b6:	88 ec       	ldi	r24, 0xC8	; 200
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	91 83       	std	Z+1, r25	; 0x01
    20bc:	80 83       	st	Z, r24
    20be:	fe 01       	movw	r30, r28
    20c0:	eb 59       	subi	r30, 0x9B	; 155
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	80 81       	ld	r24, Z
    20c6:	91 81       	ldd	r25, Z+1	; 0x01
    20c8:	01 97       	sbiw	r24, 0x01	; 1
    20ca:	f1 f7       	brne	.-4      	; 0x20c8 <reenter_pass+0x442>
    20cc:	fe 01       	movw	r30, r28
    20ce:	eb 59       	subi	r30, 0x9B	; 155
    20d0:	ff 4f       	sbci	r31, 0xFF	; 255
    20d2:	91 83       	std	Z+1, r25	; 0x01
    20d4:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    20d6:	de 01       	movw	r26, r28
    20d8:	a9 59       	subi	r26, 0x99	; 153
    20da:	bf 4f       	sbci	r27, 0xFF	; 255
    20dc:	fe 01       	movw	r30, r28
    20de:	e9 59       	subi	r30, 0x99	; 153
    20e0:	ff 4f       	sbci	r31, 0xFF	; 255
    20e2:	80 81       	ld	r24, Z
    20e4:	91 81       	ldd	r25, Z+1	; 0x01
    20e6:	01 97       	sbiw	r24, 0x01	; 1
    20e8:	11 96       	adiw	r26, 0x01	; 1
    20ea:	9c 93       	st	X, r25
    20ec:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    20ee:	fe 01       	movw	r30, r28
    20f0:	e9 59       	subi	r30, 0x99	; 153
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	80 81       	ld	r24, Z
    20f6:	91 81       	ldd	r25, Z+1	; 0x01
    20f8:	00 97       	sbiw	r24, 0x00	; 0
    20fa:	d1 f6       	brne	.-76     	; 0x20b0 <reenter_pass+0x42a>
    20fc:	27 c0       	rjmp	.+78     	; 0x214c <reenter_pass+0x4c6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    20fe:	8e 01       	movw	r16, r28
    2100:	09 59       	subi	r16, 0x99	; 153
    2102:	1f 4f       	sbci	r17, 0xFF	; 255
    2104:	fe 01       	movw	r30, r28
    2106:	e7 59       	subi	r30, 0x97	; 151
    2108:	ff 4f       	sbci	r31, 0xFF	; 255
    210a:	60 81       	ld	r22, Z
    210c:	71 81       	ldd	r23, Z+1	; 0x01
    210e:	82 81       	ldd	r24, Z+2	; 0x02
    2110:	93 81       	ldd	r25, Z+3	; 0x03
    2112:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2116:	dc 01       	movw	r26, r24
    2118:	cb 01       	movw	r24, r22
    211a:	f8 01       	movw	r30, r16
    211c:	91 83       	std	Z+1, r25	; 0x01
    211e:	80 83       	st	Z, r24
    2120:	de 01       	movw	r26, r28
    2122:	ad 59       	subi	r26, 0x9D	; 157
    2124:	bf 4f       	sbci	r27, 0xFF	; 255
    2126:	fe 01       	movw	r30, r28
    2128:	e9 59       	subi	r30, 0x99	; 153
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	80 81       	ld	r24, Z
    212e:	91 81       	ldd	r25, Z+1	; 0x01
    2130:	8d 93       	st	X+, r24
    2132:	9c 93       	st	X, r25
    2134:	fe 01       	movw	r30, r28
    2136:	ed 59       	subi	r30, 0x9D	; 157
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <reenter_pass+0x4b8>
    2142:	fe 01       	movw	r30, r28
    2144:	ed 59       	subi	r30, 0x9D	; 157
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
	LCD_moveCursor(1,0);
	LCD_displayString("Pass :");
	_delay_ms(10);
	while(KEYPAD_getPressedKey()!=61){ /*wait to save re-input password to check it is true or false compared with
		                                        the first one saved in external eeprom */
		for (int i=0;i<5;i++){
    214c:	de 01       	movw	r26, r28
    214e:	a1 57       	subi	r26, 0x71	; 113
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e1 57       	subi	r30, 0x71	; 113
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	9c 93       	st	X, r25
    2162:	8e 93       	st	-X, r24
    2164:	fe 01       	movw	r30, r28
    2166:	e1 57       	subi	r30, 0x71	; 113
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	85 30       	cpi	r24, 0x05	; 5
    2170:	91 05       	cpc	r25, r1
    2172:	0c f4       	brge	.+2      	; 0x2176 <reenter_pass+0x4f0>
    2174:	68 ce       	rjmp	.-816    	; 0x1e46 <reenter_pass+0x1c0>
	LCD_clearScreen();//clear LCD
	LCD_displayString("PLZ enter YOUR");//display on LCD
	LCD_moveCursor(1,0);
	LCD_displayString("Pass :");
	_delay_ms(10);
	while(KEYPAD_getPressedKey()!=61){ /*wait to save re-input password to check it is true or false compared with
    2176:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
    217a:	8d 33       	cpi	r24, 0x3D	; 61
    217c:	09 f0       	breq	.+2      	; 0x2180 <reenter_pass+0x4fa>
    217e:	5d ce       	rjmp	.-838    	; 0x1e3a <reenter_pass+0x1b4>
    2180:	fe 01       	movw	r30, r28
    2182:	e1 5a       	subi	r30, 0xA1	; 161
    2184:	ff 4f       	sbci	r31, 0xFF	; 255
    2186:	80 e0       	ldi	r24, 0x00	; 0
    2188:	90 e0       	ldi	r25, 0x00	; 0
    218a:	a8 ec       	ldi	r26, 0xC8	; 200
    218c:	b2 e4       	ldi	r27, 0x42	; 66
    218e:	80 83       	st	Z, r24
    2190:	91 83       	std	Z+1, r25	; 0x01
    2192:	a2 83       	std	Z+2, r26	; 0x02
    2194:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2196:	8e 01       	movw	r16, r28
    2198:	05 5a       	subi	r16, 0xA5	; 165
    219a:	1f 4f       	sbci	r17, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	e1 5a       	subi	r30, 0xA1	; 161
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	60 81       	ld	r22, Z
    21a4:	71 81       	ldd	r23, Z+1	; 0x01
    21a6:	82 81       	ldd	r24, Z+2	; 0x02
    21a8:	93 81       	ldd	r25, Z+3	; 0x03
    21aa:	20 e0       	ldi	r18, 0x00	; 0
    21ac:	30 e0       	ldi	r19, 0x00	; 0
    21ae:	4a ef       	ldi	r20, 0xFA	; 250
    21b0:	54 e4       	ldi	r21, 0x44	; 68
    21b2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21b6:	dc 01       	movw	r26, r24
    21b8:	cb 01       	movw	r24, r22
    21ba:	f8 01       	movw	r30, r16
    21bc:	80 83       	st	Z, r24
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	a2 83       	std	Z+2, r26	; 0x02
    21c2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    21c4:	fe 01       	movw	r30, r28
    21c6:	e5 5a       	subi	r30, 0xA5	; 165
    21c8:	ff 4f       	sbci	r31, 0xFF	; 255
    21ca:	60 81       	ld	r22, Z
    21cc:	71 81       	ldd	r23, Z+1	; 0x01
    21ce:	82 81       	ldd	r24, Z+2	; 0x02
    21d0:	93 81       	ldd	r25, Z+3	; 0x03
    21d2:	20 e0       	ldi	r18, 0x00	; 0
    21d4:	30 e0       	ldi	r19, 0x00	; 0
    21d6:	40 e8       	ldi	r20, 0x80	; 128
    21d8:	5f e3       	ldi	r21, 0x3F	; 63
    21da:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    21de:	88 23       	and	r24, r24
    21e0:	44 f4       	brge	.+16     	; 0x21f2 <reenter_pass+0x56c>
		__ticks = 1;
    21e2:	fe 01       	movw	r30, r28
    21e4:	e7 5a       	subi	r30, 0xA7	; 167
    21e6:	ff 4f       	sbci	r31, 0xFF	; 255
    21e8:	81 e0       	ldi	r24, 0x01	; 1
    21ea:	90 e0       	ldi	r25, 0x00	; 0
    21ec:	91 83       	std	Z+1, r25	; 0x01
    21ee:	80 83       	st	Z, r24
    21f0:	64 c0       	rjmp	.+200    	; 0x22ba <reenter_pass+0x634>
	else if (__tmp > 65535)
    21f2:	fe 01       	movw	r30, r28
    21f4:	e5 5a       	subi	r30, 0xA5	; 165
    21f6:	ff 4f       	sbci	r31, 0xFF	; 255
    21f8:	60 81       	ld	r22, Z
    21fa:	71 81       	ldd	r23, Z+1	; 0x01
    21fc:	82 81       	ldd	r24, Z+2	; 0x02
    21fe:	93 81       	ldd	r25, Z+3	; 0x03
    2200:	20 e0       	ldi	r18, 0x00	; 0
    2202:	3f ef       	ldi	r19, 0xFF	; 255
    2204:	4f e7       	ldi	r20, 0x7F	; 127
    2206:	57 e4       	ldi	r21, 0x47	; 71
    2208:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    220c:	18 16       	cp	r1, r24
    220e:	0c f0       	brlt	.+2      	; 0x2212 <reenter_pass+0x58c>
    2210:	43 c0       	rjmp	.+134    	; 0x2298 <reenter_pass+0x612>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2212:	fe 01       	movw	r30, r28
    2214:	e1 5a       	subi	r30, 0xA1	; 161
    2216:	ff 4f       	sbci	r31, 0xFF	; 255
    2218:	60 81       	ld	r22, Z
    221a:	71 81       	ldd	r23, Z+1	; 0x01
    221c:	82 81       	ldd	r24, Z+2	; 0x02
    221e:	93 81       	ldd	r25, Z+3	; 0x03
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	40 e2       	ldi	r20, 0x20	; 32
    2226:	51 e4       	ldi	r21, 0x41	; 65
    2228:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    222c:	dc 01       	movw	r26, r24
    222e:	cb 01       	movw	r24, r22
    2230:	8e 01       	movw	r16, r28
    2232:	07 5a       	subi	r16, 0xA7	; 167
    2234:	1f 4f       	sbci	r17, 0xFF	; 255
    2236:	bc 01       	movw	r22, r24
    2238:	cd 01       	movw	r24, r26
    223a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    223e:	dc 01       	movw	r26, r24
    2240:	cb 01       	movw	r24, r22
    2242:	f8 01       	movw	r30, r16
    2244:	91 83       	std	Z+1, r25	; 0x01
    2246:	80 83       	st	Z, r24
    2248:	1f c0       	rjmp	.+62     	; 0x2288 <reenter_pass+0x602>
    224a:	fe 01       	movw	r30, r28
    224c:	e9 5a       	subi	r30, 0xA9	; 169
    224e:	ff 4f       	sbci	r31, 0xFF	; 255
    2250:	88 ec       	ldi	r24, 0xC8	; 200
    2252:	90 e0       	ldi	r25, 0x00	; 0
    2254:	91 83       	std	Z+1, r25	; 0x01
    2256:	80 83       	st	Z, r24
    2258:	fe 01       	movw	r30, r28
    225a:	e9 5a       	subi	r30, 0xA9	; 169
    225c:	ff 4f       	sbci	r31, 0xFF	; 255
    225e:	80 81       	ld	r24, Z
    2260:	91 81       	ldd	r25, Z+1	; 0x01
    2262:	01 97       	sbiw	r24, 0x01	; 1
    2264:	f1 f7       	brne	.-4      	; 0x2262 <reenter_pass+0x5dc>
    2266:	fe 01       	movw	r30, r28
    2268:	e9 5a       	subi	r30, 0xA9	; 169
    226a:	ff 4f       	sbci	r31, 0xFF	; 255
    226c:	91 83       	std	Z+1, r25	; 0x01
    226e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2270:	de 01       	movw	r26, r28
    2272:	a7 5a       	subi	r26, 0xA7	; 167
    2274:	bf 4f       	sbci	r27, 0xFF	; 255
    2276:	fe 01       	movw	r30, r28
    2278:	e7 5a       	subi	r30, 0xA7	; 167
    227a:	ff 4f       	sbci	r31, 0xFF	; 255
    227c:	80 81       	ld	r24, Z
    227e:	91 81       	ldd	r25, Z+1	; 0x01
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	11 96       	adiw	r26, 0x01	; 1
    2284:	9c 93       	st	X, r25
    2286:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2288:	fe 01       	movw	r30, r28
    228a:	e7 5a       	subi	r30, 0xA7	; 167
    228c:	ff 4f       	sbci	r31, 0xFF	; 255
    228e:	80 81       	ld	r24, Z
    2290:	91 81       	ldd	r25, Z+1	; 0x01
    2292:	00 97       	sbiw	r24, 0x00	; 0
    2294:	d1 f6       	brne	.-76     	; 0x224a <reenter_pass+0x5c4>
    2296:	27 c0       	rjmp	.+78     	; 0x22e6 <reenter_pass+0x660>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2298:	8e 01       	movw	r16, r28
    229a:	07 5a       	subi	r16, 0xA7	; 167
    229c:	1f 4f       	sbci	r17, 0xFF	; 255
    229e:	fe 01       	movw	r30, r28
    22a0:	e5 5a       	subi	r30, 0xA5	; 165
    22a2:	ff 4f       	sbci	r31, 0xFF	; 255
    22a4:	60 81       	ld	r22, Z
    22a6:	71 81       	ldd	r23, Z+1	; 0x01
    22a8:	82 81       	ldd	r24, Z+2	; 0x02
    22aa:	93 81       	ldd	r25, Z+3	; 0x03
    22ac:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22b0:	dc 01       	movw	r26, r24
    22b2:	cb 01       	movw	r24, r22
    22b4:	f8 01       	movw	r30, r16
    22b6:	91 83       	std	Z+1, r25	; 0x01
    22b8:	80 83       	st	Z, r24
    22ba:	de 01       	movw	r26, r28
    22bc:	ab 5a       	subi	r26, 0xAB	; 171
    22be:	bf 4f       	sbci	r27, 0xFF	; 255
    22c0:	fe 01       	movw	r30, r28
    22c2:	e7 5a       	subi	r30, 0xA7	; 167
    22c4:	ff 4f       	sbci	r31, 0xFF	; 255
    22c6:	80 81       	ld	r24, Z
    22c8:	91 81       	ldd	r25, Z+1	; 0x01
    22ca:	8d 93       	st	X+, r24
    22cc:	9c 93       	st	X, r25
    22ce:	fe 01       	movw	r30, r28
    22d0:	eb 5a       	subi	r30, 0xAB	; 171
    22d2:	ff 4f       	sbci	r31, 0xFF	; 255
    22d4:	80 81       	ld	r24, Z
    22d6:	91 81       	ldd	r25, Z+1	; 0x01
    22d8:	01 97       	sbiw	r24, 0x01	; 1
    22da:	f1 f7       	brne	.-4      	; 0x22d8 <reenter_pass+0x652>
    22dc:	fe 01       	movw	r30, r28
    22de:	eb 5a       	subi	r30, 0xAB	; 171
    22e0:	ff 4f       	sbci	r31, 0xFF	; 255
    22e2:	91 83       	std	Z+1, r25	; 0x01
    22e4:	80 83       	st	Z, r24

		}
	}
	_delay_ms(100);
	/********************** To Send The Re-Entered Password to Control_ECU ************************************/
	UART_sendByte(check_reentered_pass);
    22e6:	83 e0       	ldi	r24, 0x03	; 3
    22e8:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    22ec:	fe 01       	movw	r30, r28
    22ee:	ef 5a       	subi	r30, 0xAF	; 175
    22f0:	ff 4f       	sbci	r31, 0xFF	; 255
    22f2:	80 e0       	ldi	r24, 0x00	; 0
    22f4:	90 e0       	ldi	r25, 0x00	; 0
    22f6:	a0 ea       	ldi	r26, 0xA0	; 160
    22f8:	b1 e4       	ldi	r27, 0x41	; 65
    22fa:	80 83       	st	Z, r24
    22fc:	91 83       	std	Z+1, r25	; 0x01
    22fe:	a2 83       	std	Z+2, r26	; 0x02
    2300:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2302:	8e 01       	movw	r16, r28
    2304:	03 5b       	subi	r16, 0xB3	; 179
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	ef 5a       	subi	r30, 0xAF	; 175
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	20 e0       	ldi	r18, 0x00	; 0
    2318:	30 e0       	ldi	r19, 0x00	; 0
    231a:	4a ef       	ldi	r20, 0xFA	; 250
    231c:	54 e4       	ldi	r21, 0x44	; 68
    231e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2322:	dc 01       	movw	r26, r24
    2324:	cb 01       	movw	r24, r22
    2326:	f8 01       	movw	r30, r16
    2328:	80 83       	st	Z, r24
    232a:	91 83       	std	Z+1, r25	; 0x01
    232c:	a2 83       	std	Z+2, r26	; 0x02
    232e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2330:	fe 01       	movw	r30, r28
    2332:	e3 5b       	subi	r30, 0xB3	; 179
    2334:	ff 4f       	sbci	r31, 0xFF	; 255
    2336:	60 81       	ld	r22, Z
    2338:	71 81       	ldd	r23, Z+1	; 0x01
    233a:	82 81       	ldd	r24, Z+2	; 0x02
    233c:	93 81       	ldd	r25, Z+3	; 0x03
    233e:	20 e0       	ldi	r18, 0x00	; 0
    2340:	30 e0       	ldi	r19, 0x00	; 0
    2342:	40 e8       	ldi	r20, 0x80	; 128
    2344:	5f e3       	ldi	r21, 0x3F	; 63
    2346:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    234a:	88 23       	and	r24, r24
    234c:	44 f4       	brge	.+16     	; 0x235e <reenter_pass+0x6d8>
		__ticks = 1;
    234e:	fe 01       	movw	r30, r28
    2350:	e5 5b       	subi	r30, 0xB5	; 181
    2352:	ff 4f       	sbci	r31, 0xFF	; 255
    2354:	81 e0       	ldi	r24, 0x01	; 1
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	91 83       	std	Z+1, r25	; 0x01
    235a:	80 83       	st	Z, r24
    235c:	64 c0       	rjmp	.+200    	; 0x2426 <reenter_pass+0x7a0>
	else if (__tmp > 65535)
    235e:	fe 01       	movw	r30, r28
    2360:	e3 5b       	subi	r30, 0xB3	; 179
    2362:	ff 4f       	sbci	r31, 0xFF	; 255
    2364:	60 81       	ld	r22, Z
    2366:	71 81       	ldd	r23, Z+1	; 0x01
    2368:	82 81       	ldd	r24, Z+2	; 0x02
    236a:	93 81       	ldd	r25, Z+3	; 0x03
    236c:	20 e0       	ldi	r18, 0x00	; 0
    236e:	3f ef       	ldi	r19, 0xFF	; 255
    2370:	4f e7       	ldi	r20, 0x7F	; 127
    2372:	57 e4       	ldi	r21, 0x47	; 71
    2374:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2378:	18 16       	cp	r1, r24
    237a:	0c f0       	brlt	.+2      	; 0x237e <reenter_pass+0x6f8>
    237c:	43 c0       	rjmp	.+134    	; 0x2404 <reenter_pass+0x77e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    237e:	fe 01       	movw	r30, r28
    2380:	ef 5a       	subi	r30, 0xAF	; 175
    2382:	ff 4f       	sbci	r31, 0xFF	; 255
    2384:	60 81       	ld	r22, Z
    2386:	71 81       	ldd	r23, Z+1	; 0x01
    2388:	82 81       	ldd	r24, Z+2	; 0x02
    238a:	93 81       	ldd	r25, Z+3	; 0x03
    238c:	20 e0       	ldi	r18, 0x00	; 0
    238e:	30 e0       	ldi	r19, 0x00	; 0
    2390:	40 e2       	ldi	r20, 0x20	; 32
    2392:	51 e4       	ldi	r21, 0x41	; 65
    2394:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2398:	dc 01       	movw	r26, r24
    239a:	cb 01       	movw	r24, r22
    239c:	8e 01       	movw	r16, r28
    239e:	05 5b       	subi	r16, 0xB5	; 181
    23a0:	1f 4f       	sbci	r17, 0xFF	; 255
    23a2:	bc 01       	movw	r22, r24
    23a4:	cd 01       	movw	r24, r26
    23a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23aa:	dc 01       	movw	r26, r24
    23ac:	cb 01       	movw	r24, r22
    23ae:	f8 01       	movw	r30, r16
    23b0:	91 83       	std	Z+1, r25	; 0x01
    23b2:	80 83       	st	Z, r24
    23b4:	1f c0       	rjmp	.+62     	; 0x23f4 <reenter_pass+0x76e>
    23b6:	fe 01       	movw	r30, r28
    23b8:	e7 5b       	subi	r30, 0xB7	; 183
    23ba:	ff 4f       	sbci	r31, 0xFF	; 255
    23bc:	88 ec       	ldi	r24, 0xC8	; 200
    23be:	90 e0       	ldi	r25, 0x00	; 0
    23c0:	91 83       	std	Z+1, r25	; 0x01
    23c2:	80 83       	st	Z, r24
    23c4:	fe 01       	movw	r30, r28
    23c6:	e7 5b       	subi	r30, 0xB7	; 183
    23c8:	ff 4f       	sbci	r31, 0xFF	; 255
    23ca:	80 81       	ld	r24, Z
    23cc:	91 81       	ldd	r25, Z+1	; 0x01
    23ce:	01 97       	sbiw	r24, 0x01	; 1
    23d0:	f1 f7       	brne	.-4      	; 0x23ce <reenter_pass+0x748>
    23d2:	fe 01       	movw	r30, r28
    23d4:	e7 5b       	subi	r30, 0xB7	; 183
    23d6:	ff 4f       	sbci	r31, 0xFF	; 255
    23d8:	91 83       	std	Z+1, r25	; 0x01
    23da:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23dc:	de 01       	movw	r26, r28
    23de:	a5 5b       	subi	r26, 0xB5	; 181
    23e0:	bf 4f       	sbci	r27, 0xFF	; 255
    23e2:	fe 01       	movw	r30, r28
    23e4:	e5 5b       	subi	r30, 0xB5	; 181
    23e6:	ff 4f       	sbci	r31, 0xFF	; 255
    23e8:	80 81       	ld	r24, Z
    23ea:	91 81       	ldd	r25, Z+1	; 0x01
    23ec:	01 97       	sbiw	r24, 0x01	; 1
    23ee:	11 96       	adiw	r26, 0x01	; 1
    23f0:	9c 93       	st	X, r25
    23f2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23f4:	fe 01       	movw	r30, r28
    23f6:	e5 5b       	subi	r30, 0xB5	; 181
    23f8:	ff 4f       	sbci	r31, 0xFF	; 255
    23fa:	80 81       	ld	r24, Z
    23fc:	91 81       	ldd	r25, Z+1	; 0x01
    23fe:	00 97       	sbiw	r24, 0x00	; 0
    2400:	d1 f6       	brne	.-76     	; 0x23b6 <reenter_pass+0x730>
    2402:	28 c0       	rjmp	.+80     	; 0x2454 <reenter_pass+0x7ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2404:	8e 01       	movw	r16, r28
    2406:	05 5b       	subi	r16, 0xB5	; 181
    2408:	1f 4f       	sbci	r17, 0xFF	; 255
    240a:	fe 01       	movw	r30, r28
    240c:	e3 5b       	subi	r30, 0xB3	; 179
    240e:	ff 4f       	sbci	r31, 0xFF	; 255
    2410:	60 81       	ld	r22, Z
    2412:	71 81       	ldd	r23, Z+1	; 0x01
    2414:	82 81       	ldd	r24, Z+2	; 0x02
    2416:	93 81       	ldd	r25, Z+3	; 0x03
    2418:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    241c:	dc 01       	movw	r26, r24
    241e:	cb 01       	movw	r24, r22
    2420:	f8 01       	movw	r30, r16
    2422:	91 83       	std	Z+1, r25	; 0x01
    2424:	80 83       	st	Z, r24
    2426:	de 01       	movw	r26, r28
    2428:	a9 5b       	subi	r26, 0xB9	; 185
    242a:	bf 4f       	sbci	r27, 0xFF	; 255
    242c:	fe 01       	movw	r30, r28
    242e:	e5 5b       	subi	r30, 0xB5	; 181
    2430:	ff 4f       	sbci	r31, 0xFF	; 255
    2432:	80 81       	ld	r24, Z
    2434:	91 81       	ldd	r25, Z+1	; 0x01
    2436:	11 96       	adiw	r26, 0x01	; 1
    2438:	9c 93       	st	X, r25
    243a:	8e 93       	st	-X, r24
    243c:	fe 01       	movw	r30, r28
    243e:	e9 5b       	subi	r30, 0xB9	; 185
    2440:	ff 4f       	sbci	r31, 0xFF	; 255
    2442:	80 81       	ld	r24, Z
    2444:	91 81       	ldd	r25, Z+1	; 0x01
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	f1 f7       	brne	.-4      	; 0x2446 <reenter_pass+0x7c0>
    244a:	fe 01       	movw	r30, r28
    244c:	e9 5b       	subi	r30, 0xB9	; 185
    244e:	ff 4f       	sbci	r31, 0xFF	; 255
    2450:	91 83       	std	Z+1, r25	; 0x01
    2452:	80 83       	st	Z, r24
	_delay_ms(20);
	for(int i=0;i<5;i++){
    2454:	fe 01       	movw	r30, r28
    2456:	e3 57       	subi	r30, 0x73	; 115
    2458:	ff 4f       	sbci	r31, 0xFF	; 255
    245a:	11 82       	std	Z+1, r1	; 0x01
    245c:	10 82       	st	Z, r1
    245e:	9f c0       	rjmp	.+318    	; 0x259e <reenter_pass+0x918>
		UART_sendByte(pass3[i]);
    2460:	fe 01       	movw	r30, r28
    2462:	e3 57       	subi	r30, 0x73	; 115
    2464:	ff 4f       	sbci	r31, 0xFF	; 255
    2466:	20 81       	ld	r18, Z
    2468:	31 81       	ldd	r19, Z+1	; 0x01
    246a:	ce 01       	movw	r24, r28
    246c:	8d 56       	subi	r24, 0x6D	; 109
    246e:	9f 4f       	sbci	r25, 0xFF	; 255
    2470:	fc 01       	movw	r30, r24
    2472:	e2 0f       	add	r30, r18
    2474:	f3 1f       	adc	r31, r19
    2476:	80 81       	ld	r24, Z
    2478:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    247c:	fe 01       	movw	r30, r28
    247e:	ed 5b       	subi	r30, 0xBD	; 189
    2480:	ff 4f       	sbci	r31, 0xFF	; 255
    2482:	80 e0       	ldi	r24, 0x00	; 0
    2484:	90 e0       	ldi	r25, 0x00	; 0
    2486:	a0 ea       	ldi	r26, 0xA0	; 160
    2488:	b1 e4       	ldi	r27, 0x41	; 65
    248a:	80 83       	st	Z, r24
    248c:	91 83       	std	Z+1, r25	; 0x01
    248e:	a2 83       	std	Z+2, r26	; 0x02
    2490:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2492:	8e 01       	movw	r16, r28
    2494:	01 5c       	subi	r16, 0xC1	; 193
    2496:	1f 4f       	sbci	r17, 0xFF	; 255
    2498:	fe 01       	movw	r30, r28
    249a:	ed 5b       	subi	r30, 0xBD	; 189
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	60 81       	ld	r22, Z
    24a0:	71 81       	ldd	r23, Z+1	; 0x01
    24a2:	82 81       	ldd	r24, Z+2	; 0x02
    24a4:	93 81       	ldd	r25, Z+3	; 0x03
    24a6:	20 e0       	ldi	r18, 0x00	; 0
    24a8:	30 e0       	ldi	r19, 0x00	; 0
    24aa:	4a ef       	ldi	r20, 0xFA	; 250
    24ac:	54 e4       	ldi	r21, 0x44	; 68
    24ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24b2:	dc 01       	movw	r26, r24
    24b4:	cb 01       	movw	r24, r22
    24b6:	f8 01       	movw	r30, r16
    24b8:	80 83       	st	Z, r24
    24ba:	91 83       	std	Z+1, r25	; 0x01
    24bc:	a2 83       	std	Z+2, r26	; 0x02
    24be:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24c0:	fe 01       	movw	r30, r28
    24c2:	ff 96       	adiw	r30, 0x3f	; 63
    24c4:	60 81       	ld	r22, Z
    24c6:	71 81       	ldd	r23, Z+1	; 0x01
    24c8:	82 81       	ldd	r24, Z+2	; 0x02
    24ca:	93 81       	ldd	r25, Z+3	; 0x03
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e8       	ldi	r20, 0x80	; 128
    24d2:	5f e3       	ldi	r21, 0x3F	; 63
    24d4:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    24d8:	88 23       	and	r24, r24
    24da:	2c f4       	brge	.+10     	; 0x24e6 <reenter_pass+0x860>
		__ticks = 1;
    24dc:	81 e0       	ldi	r24, 0x01	; 1
    24de:	90 e0       	ldi	r25, 0x00	; 0
    24e0:	9e af       	std	Y+62, r25	; 0x3e
    24e2:	8d af       	std	Y+61, r24	; 0x3d
    24e4:	46 c0       	rjmp	.+140    	; 0x2572 <reenter_pass+0x8ec>
	else if (__tmp > 65535)
    24e6:	fe 01       	movw	r30, r28
    24e8:	ff 96       	adiw	r30, 0x3f	; 63
    24ea:	60 81       	ld	r22, Z
    24ec:	71 81       	ldd	r23, Z+1	; 0x01
    24ee:	82 81       	ldd	r24, Z+2	; 0x02
    24f0:	93 81       	ldd	r25, Z+3	; 0x03
    24f2:	20 e0       	ldi	r18, 0x00	; 0
    24f4:	3f ef       	ldi	r19, 0xFF	; 255
    24f6:	4f e7       	ldi	r20, 0x7F	; 127
    24f8:	57 e4       	ldi	r21, 0x47	; 71
    24fa:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    24fe:	18 16       	cp	r1, r24
    2500:	64 f5       	brge	.+88     	; 0x255a <reenter_pass+0x8d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2502:	fe 01       	movw	r30, r28
    2504:	ed 5b       	subi	r30, 0xBD	; 189
    2506:	ff 4f       	sbci	r31, 0xFF	; 255
    2508:	60 81       	ld	r22, Z
    250a:	71 81       	ldd	r23, Z+1	; 0x01
    250c:	82 81       	ldd	r24, Z+2	; 0x02
    250e:	93 81       	ldd	r25, Z+3	; 0x03
    2510:	20 e0       	ldi	r18, 0x00	; 0
    2512:	30 e0       	ldi	r19, 0x00	; 0
    2514:	40 e2       	ldi	r20, 0x20	; 32
    2516:	51 e4       	ldi	r21, 0x41	; 65
    2518:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    251c:	dc 01       	movw	r26, r24
    251e:	cb 01       	movw	r24, r22
    2520:	bc 01       	movw	r22, r24
    2522:	cd 01       	movw	r24, r26
    2524:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2528:	dc 01       	movw	r26, r24
    252a:	cb 01       	movw	r24, r22
    252c:	9e af       	std	Y+62, r25	; 0x3e
    252e:	8d af       	std	Y+61, r24	; 0x3d
    2530:	0f c0       	rjmp	.+30     	; 0x2550 <reenter_pass+0x8ca>
    2532:	88 ec       	ldi	r24, 0xC8	; 200
    2534:	90 e0       	ldi	r25, 0x00	; 0
    2536:	9c af       	std	Y+60, r25	; 0x3c
    2538:	8b af       	std	Y+59, r24	; 0x3b
    253a:	8b ad       	ldd	r24, Y+59	; 0x3b
    253c:	9c ad       	ldd	r25, Y+60	; 0x3c
    253e:	01 97       	sbiw	r24, 0x01	; 1
    2540:	f1 f7       	brne	.-4      	; 0x253e <reenter_pass+0x8b8>
    2542:	9c af       	std	Y+60, r25	; 0x3c
    2544:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2546:	8d ad       	ldd	r24, Y+61	; 0x3d
    2548:	9e ad       	ldd	r25, Y+62	; 0x3e
    254a:	01 97       	sbiw	r24, 0x01	; 1
    254c:	9e af       	std	Y+62, r25	; 0x3e
    254e:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2550:	8d ad       	ldd	r24, Y+61	; 0x3d
    2552:	9e ad       	ldd	r25, Y+62	; 0x3e
    2554:	00 97       	sbiw	r24, 0x00	; 0
    2556:	69 f7       	brne	.-38     	; 0x2532 <reenter_pass+0x8ac>
    2558:	16 c0       	rjmp	.+44     	; 0x2586 <reenter_pass+0x900>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    255a:	fe 01       	movw	r30, r28
    255c:	ff 96       	adiw	r30, 0x3f	; 63
    255e:	60 81       	ld	r22, Z
    2560:	71 81       	ldd	r23, Z+1	; 0x01
    2562:	82 81       	ldd	r24, Z+2	; 0x02
    2564:	93 81       	ldd	r25, Z+3	; 0x03
    2566:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	9e af       	std	Y+62, r25	; 0x3e
    2570:	8d af       	std	Y+61, r24	; 0x3d
    2572:	8d ad       	ldd	r24, Y+61	; 0x3d
    2574:	9e ad       	ldd	r25, Y+62	; 0x3e
    2576:	9a af       	std	Y+58, r25	; 0x3a
    2578:	89 af       	std	Y+57, r24	; 0x39
    257a:	89 ad       	ldd	r24, Y+57	; 0x39
    257c:	9a ad       	ldd	r25, Y+58	; 0x3a
    257e:	01 97       	sbiw	r24, 0x01	; 1
    2580:	f1 f7       	brne	.-4      	; 0x257e <reenter_pass+0x8f8>
    2582:	9a af       	std	Y+58, r25	; 0x3a
    2584:	89 af       	std	Y+57, r24	; 0x39
	}
	_delay_ms(100);
	/********************** To Send The Re-Entered Password to Control_ECU ************************************/
	UART_sendByte(check_reentered_pass);
	_delay_ms(20);
	for(int i=0;i<5;i++){
    2586:	de 01       	movw	r26, r28
    2588:	a3 57       	subi	r26, 0x73	; 115
    258a:	bf 4f       	sbci	r27, 0xFF	; 255
    258c:	fe 01       	movw	r30, r28
    258e:	e3 57       	subi	r30, 0x73	; 115
    2590:	ff 4f       	sbci	r31, 0xFF	; 255
    2592:	80 81       	ld	r24, Z
    2594:	91 81       	ldd	r25, Z+1	; 0x01
    2596:	01 96       	adiw	r24, 0x01	; 1
    2598:	11 96       	adiw	r26, 0x01	; 1
    259a:	9c 93       	st	X, r25
    259c:	8e 93       	st	-X, r24
    259e:	fe 01       	movw	r30, r28
    25a0:	e3 57       	subi	r30, 0x73	; 115
    25a2:	ff 4f       	sbci	r31, 0xFF	; 255
    25a4:	80 81       	ld	r24, Z
    25a6:	91 81       	ldd	r25, Z+1	; 0x01
    25a8:	85 30       	cpi	r24, 0x05	; 5
    25aa:	91 05       	cpc	r25, r1
    25ac:	0c f4       	brge	.+2      	; 0x25b0 <reenter_pass+0x92a>
    25ae:	58 cf       	rjmp	.-336    	; 0x2460 <reenter_pass+0x7da>
    25b0:	80 e0       	ldi	r24, 0x00	; 0
    25b2:	90 e0       	ldi	r25, 0x00	; 0
    25b4:	aa e7       	ldi	r26, 0x7A	; 122
    25b6:	b3 e4       	ldi	r27, 0x43	; 67
    25b8:	8d ab       	std	Y+53, r24	; 0x35
    25ba:	9e ab       	std	Y+54, r25	; 0x36
    25bc:	af ab       	std	Y+55, r26	; 0x37
    25be:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25c0:	6d a9       	ldd	r22, Y+53	; 0x35
    25c2:	7e a9       	ldd	r23, Y+54	; 0x36
    25c4:	8f a9       	ldd	r24, Y+55	; 0x37
    25c6:	98 ad       	ldd	r25, Y+56	; 0x38
    25c8:	20 e0       	ldi	r18, 0x00	; 0
    25ca:	30 e0       	ldi	r19, 0x00	; 0
    25cc:	4a ef       	ldi	r20, 0xFA	; 250
    25ce:	54 e4       	ldi	r21, 0x44	; 68
    25d0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    25d4:	dc 01       	movw	r26, r24
    25d6:	cb 01       	movw	r24, r22
    25d8:	89 ab       	std	Y+49, r24	; 0x31
    25da:	9a ab       	std	Y+50, r25	; 0x32
    25dc:	ab ab       	std	Y+51, r26	; 0x33
    25de:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    25e0:	69 a9       	ldd	r22, Y+49	; 0x31
    25e2:	7a a9       	ldd	r23, Y+50	; 0x32
    25e4:	8b a9       	ldd	r24, Y+51	; 0x33
    25e6:	9c a9       	ldd	r25, Y+52	; 0x34
    25e8:	20 e0       	ldi	r18, 0x00	; 0
    25ea:	30 e0       	ldi	r19, 0x00	; 0
    25ec:	40 e8       	ldi	r20, 0x80	; 128
    25ee:	5f e3       	ldi	r21, 0x3F	; 63
    25f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    25f4:	88 23       	and	r24, r24
    25f6:	2c f4       	brge	.+10     	; 0x2602 <reenter_pass+0x97c>
		__ticks = 1;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	98 ab       	std	Y+48, r25	; 0x30
    25fe:	8f a7       	std	Y+47, r24	; 0x2f
    2600:	3f c0       	rjmp	.+126    	; 0x2680 <reenter_pass+0x9fa>
	else if (__tmp > 65535)
    2602:	69 a9       	ldd	r22, Y+49	; 0x31
    2604:	7a a9       	ldd	r23, Y+50	; 0x32
    2606:	8b a9       	ldd	r24, Y+51	; 0x33
    2608:	9c a9       	ldd	r25, Y+52	; 0x34
    260a:	20 e0       	ldi	r18, 0x00	; 0
    260c:	3f ef       	ldi	r19, 0xFF	; 255
    260e:	4f e7       	ldi	r20, 0x7F	; 127
    2610:	57 e4       	ldi	r21, 0x47	; 71
    2612:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2616:	18 16       	cp	r1, r24
    2618:	4c f5       	brge	.+82     	; 0x266c <reenter_pass+0x9e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    261a:	6d a9       	ldd	r22, Y+53	; 0x35
    261c:	7e a9       	ldd	r23, Y+54	; 0x36
    261e:	8f a9       	ldd	r24, Y+55	; 0x37
    2620:	98 ad       	ldd	r25, Y+56	; 0x38
    2622:	20 e0       	ldi	r18, 0x00	; 0
    2624:	30 e0       	ldi	r19, 0x00	; 0
    2626:	40 e2       	ldi	r20, 0x20	; 32
    2628:	51 e4       	ldi	r21, 0x41	; 65
    262a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    262e:	dc 01       	movw	r26, r24
    2630:	cb 01       	movw	r24, r22
    2632:	bc 01       	movw	r22, r24
    2634:	cd 01       	movw	r24, r26
    2636:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    263a:	dc 01       	movw	r26, r24
    263c:	cb 01       	movw	r24, r22
    263e:	98 ab       	std	Y+48, r25	; 0x30
    2640:	8f a7       	std	Y+47, r24	; 0x2f
    2642:	0f c0       	rjmp	.+30     	; 0x2662 <reenter_pass+0x9dc>
    2644:	88 ec       	ldi	r24, 0xC8	; 200
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	9e a7       	std	Y+46, r25	; 0x2e
    264a:	8d a7       	std	Y+45, r24	; 0x2d
    264c:	8d a5       	ldd	r24, Y+45	; 0x2d
    264e:	9e a5       	ldd	r25, Y+46	; 0x2e
    2650:	01 97       	sbiw	r24, 0x01	; 1
    2652:	f1 f7       	brne	.-4      	; 0x2650 <reenter_pass+0x9ca>
    2654:	9e a7       	std	Y+46, r25	; 0x2e
    2656:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2658:	8f a5       	ldd	r24, Y+47	; 0x2f
    265a:	98 a9       	ldd	r25, Y+48	; 0x30
    265c:	01 97       	sbiw	r24, 0x01	; 1
    265e:	98 ab       	std	Y+48, r25	; 0x30
    2660:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2662:	8f a5       	ldd	r24, Y+47	; 0x2f
    2664:	98 a9       	ldd	r25, Y+48	; 0x30
    2666:	00 97       	sbiw	r24, 0x00	; 0
    2668:	69 f7       	brne	.-38     	; 0x2644 <reenter_pass+0x9be>
    266a:	14 c0       	rjmp	.+40     	; 0x2694 <reenter_pass+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    266c:	69 a9       	ldd	r22, Y+49	; 0x31
    266e:	7a a9       	ldd	r23, Y+50	; 0x32
    2670:	8b a9       	ldd	r24, Y+51	; 0x33
    2672:	9c a9       	ldd	r25, Y+52	; 0x34
    2674:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2678:	dc 01       	movw	r26, r24
    267a:	cb 01       	movw	r24, r22
    267c:	98 ab       	std	Y+48, r25	; 0x30
    267e:	8f a7       	std	Y+47, r24	; 0x2f
    2680:	8f a5       	ldd	r24, Y+47	; 0x2f
    2682:	98 a9       	ldd	r25, Y+48	; 0x30
    2684:	9c a7       	std	Y+44, r25	; 0x2c
    2686:	8b a7       	std	Y+43, r24	; 0x2b
    2688:	8b a5       	ldd	r24, Y+43	; 0x2b
    268a:	9c a5       	ldd	r25, Y+44	; 0x2c
    268c:	01 97       	sbiw	r24, 0x01	; 1
    268e:	f1 f7       	brne	.-4      	; 0x268c <reenter_pass+0xa06>
    2690:	9c a7       	std	Y+44, r25	; 0x2c
    2692:	8b a7       	std	Y+43, r24	; 0x2b
		UART_sendByte(pass3[i]);
		_delay_ms(20);
	}
	_delay_ms(250);
	/******************** Receive the Result of the check operation from the Control_ECU */
	check1=UART_recieveByte();
    2694:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_recieveByte>
    2698:	fe 01       	movw	r30, r28
    269a:	ef 56       	subi	r30, 0x6F	; 111
    269c:	ff 4f       	sbci	r31, 0xFF	; 255
    269e:	88 2f       	mov	r24, r24
    26a0:	90 e0       	ldi	r25, 0x00	; 0
    26a2:	91 83       	std	Z+1, r25	; 0x01
    26a4:	80 83       	st	Z, r24
    26a6:	80 e0       	ldi	r24, 0x00	; 0
    26a8:	90 e0       	ldi	r25, 0x00	; 0
    26aa:	a0 ea       	ldi	r26, 0xA0	; 160
    26ac:	b1 e4       	ldi	r27, 0x41	; 65
    26ae:	8f a3       	std	Y+39, r24	; 0x27
    26b0:	98 a7       	std	Y+40, r25	; 0x28
    26b2:	a9 a7       	std	Y+41, r26	; 0x29
    26b4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b6:	6f a1       	ldd	r22, Y+39	; 0x27
    26b8:	78 a5       	ldd	r23, Y+40	; 0x28
    26ba:	89 a5       	ldd	r24, Y+41	; 0x29
    26bc:	9a a5       	ldd	r25, Y+42	; 0x2a
    26be:	20 e0       	ldi	r18, 0x00	; 0
    26c0:	30 e0       	ldi	r19, 0x00	; 0
    26c2:	4a ef       	ldi	r20, 0xFA	; 250
    26c4:	54 e4       	ldi	r21, 0x44	; 68
    26c6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26ca:	dc 01       	movw	r26, r24
    26cc:	cb 01       	movw	r24, r22
    26ce:	8b a3       	std	Y+35, r24	; 0x23
    26d0:	9c a3       	std	Y+36, r25	; 0x24
    26d2:	ad a3       	std	Y+37, r26	; 0x25
    26d4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    26d6:	6b a1       	ldd	r22, Y+35	; 0x23
    26d8:	7c a1       	ldd	r23, Y+36	; 0x24
    26da:	8d a1       	ldd	r24, Y+37	; 0x25
    26dc:	9e a1       	ldd	r25, Y+38	; 0x26
    26de:	20 e0       	ldi	r18, 0x00	; 0
    26e0:	30 e0       	ldi	r19, 0x00	; 0
    26e2:	40 e8       	ldi	r20, 0x80	; 128
    26e4:	5f e3       	ldi	r21, 0x3F	; 63
    26e6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    26ea:	88 23       	and	r24, r24
    26ec:	2c f4       	brge	.+10     	; 0x26f8 <reenter_pass+0xa72>
		__ticks = 1;
    26ee:	81 e0       	ldi	r24, 0x01	; 1
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	9a a3       	std	Y+34, r25	; 0x22
    26f4:	89 a3       	std	Y+33, r24	; 0x21
    26f6:	3f c0       	rjmp	.+126    	; 0x2776 <reenter_pass+0xaf0>
	else if (__tmp > 65535)
    26f8:	6b a1       	ldd	r22, Y+35	; 0x23
    26fa:	7c a1       	ldd	r23, Y+36	; 0x24
    26fc:	8d a1       	ldd	r24, Y+37	; 0x25
    26fe:	9e a1       	ldd	r25, Y+38	; 0x26
    2700:	20 e0       	ldi	r18, 0x00	; 0
    2702:	3f ef       	ldi	r19, 0xFF	; 255
    2704:	4f e7       	ldi	r20, 0x7F	; 127
    2706:	57 e4       	ldi	r21, 0x47	; 71
    2708:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    270c:	18 16       	cp	r1, r24
    270e:	4c f5       	brge	.+82     	; 0x2762 <reenter_pass+0xadc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2710:	6f a1       	ldd	r22, Y+39	; 0x27
    2712:	78 a5       	ldd	r23, Y+40	; 0x28
    2714:	89 a5       	ldd	r24, Y+41	; 0x29
    2716:	9a a5       	ldd	r25, Y+42	; 0x2a
    2718:	20 e0       	ldi	r18, 0x00	; 0
    271a:	30 e0       	ldi	r19, 0x00	; 0
    271c:	40 e2       	ldi	r20, 0x20	; 32
    271e:	51 e4       	ldi	r21, 0x41	; 65
    2720:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2724:	dc 01       	movw	r26, r24
    2726:	cb 01       	movw	r24, r22
    2728:	bc 01       	movw	r22, r24
    272a:	cd 01       	movw	r24, r26
    272c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2730:	dc 01       	movw	r26, r24
    2732:	cb 01       	movw	r24, r22
    2734:	9a a3       	std	Y+34, r25	; 0x22
    2736:	89 a3       	std	Y+33, r24	; 0x21
    2738:	0f c0       	rjmp	.+30     	; 0x2758 <reenter_pass+0xad2>
    273a:	88 ec       	ldi	r24, 0xC8	; 200
    273c:	90 e0       	ldi	r25, 0x00	; 0
    273e:	98 a3       	std	Y+32, r25	; 0x20
    2740:	8f 8f       	std	Y+31, r24	; 0x1f
    2742:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2744:	98 a1       	ldd	r25, Y+32	; 0x20
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <reenter_pass+0xac0>
    274a:	98 a3       	std	Y+32, r25	; 0x20
    274c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    274e:	89 a1       	ldd	r24, Y+33	; 0x21
    2750:	9a a1       	ldd	r25, Y+34	; 0x22
    2752:	01 97       	sbiw	r24, 0x01	; 1
    2754:	9a a3       	std	Y+34, r25	; 0x22
    2756:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2758:	89 a1       	ldd	r24, Y+33	; 0x21
    275a:	9a a1       	ldd	r25, Y+34	; 0x22
    275c:	00 97       	sbiw	r24, 0x00	; 0
    275e:	69 f7       	brne	.-38     	; 0x273a <reenter_pass+0xab4>
    2760:	14 c0       	rjmp	.+40     	; 0x278a <reenter_pass+0xb04>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2762:	6b a1       	ldd	r22, Y+35	; 0x23
    2764:	7c a1       	ldd	r23, Y+36	; 0x24
    2766:	8d a1       	ldd	r24, Y+37	; 0x25
    2768:	9e a1       	ldd	r25, Y+38	; 0x26
    276a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    276e:	dc 01       	movw	r26, r24
    2770:	cb 01       	movw	r24, r22
    2772:	9a a3       	std	Y+34, r25	; 0x22
    2774:	89 a3       	std	Y+33, r24	; 0x21
    2776:	89 a1       	ldd	r24, Y+33	; 0x21
    2778:	9a a1       	ldd	r25, Y+34	; 0x22
    277a:	9e 8f       	std	Y+30, r25	; 0x1e
    277c:	8d 8f       	std	Y+29, r24	; 0x1d
    277e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2780:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2782:	01 97       	sbiw	r24, 0x01	; 1
    2784:	f1 f7       	brne	.-4      	; 0x2782 <reenter_pass+0xafc>
    2786:	9e 8f       	std	Y+30, r25	; 0x1e
    2788:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);

	if(check1==1){
    278a:	fe 01       	movw	r30, r28
    278c:	ef 56       	subi	r30, 0x6F	; 111
    278e:	ff 4f       	sbci	r31, 0xFF	; 255
    2790:	80 81       	ld	r24, Z
    2792:	91 81       	ldd	r25, Z+1	; 0x01
    2794:	81 30       	cpi	r24, 0x01	; 1
    2796:	91 05       	cpc	r25, r1
    2798:	09 f0       	breq	.+2      	; 0x279c <reenter_pass+0xb16>
    279a:	8c c0       	rjmp	.+280    	; 0x28b4 <reenter_pass+0xc2e>

		if(operation==43){
    279c:	80 91 36 01 	lds	r24, 0x0136
    27a0:	8b 32       	cpi	r24, 0x2B	; 43
    27a2:	41 f4       	brne	.+16     	; 0x27b4 <reenter_pass+0xb2e>
			counter1=1;
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	80 93 27 01 	sts	0x0127, r24
			open_door();//call the open-door function
    27aa:	0e 94 03 17 	call	0x2e06	; 0x2e06 <open_door>
			main_option();//then re-call the main-option function
    27ae:	0e 94 09 15 	call	0x2a12	; 0x2a12 <main_option>
    27b2:	23 c1       	rjmp	.+582    	; 0x29fa <reenter_pass+0xd74>
		}

		else if(operation==45){
    27b4:	80 91 36 01 	lds	r24, 0x0136
    27b8:	8d 32       	cpi	r24, 0x2D	; 45
    27ba:	09 f0       	breq	.+2      	; 0x27be <reenter_pass+0xb38>
    27bc:	1e c1       	rjmp	.+572    	; 0x29fa <reenter_pass+0xd74>
			counter1=1;
    27be:	81 e0       	ldi	r24, 0x01	; 1
    27c0:	80 93 27 01 	sts	0x0127, r24
			UART_sendByte(changee_pass);//send the required operation to the Control_ECU
    27c4:	85 e0       	ldi	r24, 0x05	; 5
    27c6:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    27ca:	80 e0       	ldi	r24, 0x00	; 0
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	a0 e2       	ldi	r26, 0x20	; 32
    27d0:	b1 e4       	ldi	r27, 0x41	; 65
    27d2:	89 8f       	std	Y+25, r24	; 0x19
    27d4:	9a 8f       	std	Y+26, r25	; 0x1a
    27d6:	ab 8f       	std	Y+27, r26	; 0x1b
    27d8:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27da:	69 8d       	ldd	r22, Y+25	; 0x19
    27dc:	7a 8d       	ldd	r23, Y+26	; 0x1a
    27de:	8b 8d       	ldd	r24, Y+27	; 0x1b
    27e0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    27e2:	20 e0       	ldi	r18, 0x00	; 0
    27e4:	30 e0       	ldi	r19, 0x00	; 0
    27e6:	4a ef       	ldi	r20, 0xFA	; 250
    27e8:	54 e4       	ldi	r21, 0x44	; 68
    27ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27ee:	dc 01       	movw	r26, r24
    27f0:	cb 01       	movw	r24, r22
    27f2:	8d 8b       	std	Y+21, r24	; 0x15
    27f4:	9e 8b       	std	Y+22, r25	; 0x16
    27f6:	af 8b       	std	Y+23, r26	; 0x17
    27f8:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    27fa:	6d 89       	ldd	r22, Y+21	; 0x15
    27fc:	7e 89       	ldd	r23, Y+22	; 0x16
    27fe:	8f 89       	ldd	r24, Y+23	; 0x17
    2800:	98 8d       	ldd	r25, Y+24	; 0x18
    2802:	20 e0       	ldi	r18, 0x00	; 0
    2804:	30 e0       	ldi	r19, 0x00	; 0
    2806:	40 e8       	ldi	r20, 0x80	; 128
    2808:	5f e3       	ldi	r21, 0x3F	; 63
    280a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    280e:	88 23       	and	r24, r24
    2810:	2c f4       	brge	.+10     	; 0x281c <reenter_pass+0xb96>
		__ticks = 1;
    2812:	81 e0       	ldi	r24, 0x01	; 1
    2814:	90 e0       	ldi	r25, 0x00	; 0
    2816:	9c 8b       	std	Y+20, r25	; 0x14
    2818:	8b 8b       	std	Y+19, r24	; 0x13
    281a:	3f c0       	rjmp	.+126    	; 0x289a <reenter_pass+0xc14>
	else if (__tmp > 65535)
    281c:	6d 89       	ldd	r22, Y+21	; 0x15
    281e:	7e 89       	ldd	r23, Y+22	; 0x16
    2820:	8f 89       	ldd	r24, Y+23	; 0x17
    2822:	98 8d       	ldd	r25, Y+24	; 0x18
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	3f ef       	ldi	r19, 0xFF	; 255
    2828:	4f e7       	ldi	r20, 0x7F	; 127
    282a:	57 e4       	ldi	r21, 0x47	; 71
    282c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2830:	18 16       	cp	r1, r24
    2832:	4c f5       	brge	.+82     	; 0x2886 <reenter_pass+0xc00>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2834:	69 8d       	ldd	r22, Y+25	; 0x19
    2836:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2838:	8b 8d       	ldd	r24, Y+27	; 0x1b
    283a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	30 e0       	ldi	r19, 0x00	; 0
    2840:	40 e2       	ldi	r20, 0x20	; 32
    2842:	51 e4       	ldi	r21, 0x41	; 65
    2844:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2848:	dc 01       	movw	r26, r24
    284a:	cb 01       	movw	r24, r22
    284c:	bc 01       	movw	r22, r24
    284e:	cd 01       	movw	r24, r26
    2850:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2854:	dc 01       	movw	r26, r24
    2856:	cb 01       	movw	r24, r22
    2858:	9c 8b       	std	Y+20, r25	; 0x14
    285a:	8b 8b       	std	Y+19, r24	; 0x13
    285c:	0f c0       	rjmp	.+30     	; 0x287c <reenter_pass+0xbf6>
    285e:	88 ec       	ldi	r24, 0xC8	; 200
    2860:	90 e0       	ldi	r25, 0x00	; 0
    2862:	9a 8b       	std	Y+18, r25	; 0x12
    2864:	89 8b       	std	Y+17, r24	; 0x11
    2866:	89 89       	ldd	r24, Y+17	; 0x11
    2868:	9a 89       	ldd	r25, Y+18	; 0x12
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <reenter_pass+0xbe4>
    286e:	9a 8b       	std	Y+18, r25	; 0x12
    2870:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2872:	8b 89       	ldd	r24, Y+19	; 0x13
    2874:	9c 89       	ldd	r25, Y+20	; 0x14
    2876:	01 97       	sbiw	r24, 0x01	; 1
    2878:	9c 8b       	std	Y+20, r25	; 0x14
    287a:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    287c:	8b 89       	ldd	r24, Y+19	; 0x13
    287e:	9c 89       	ldd	r25, Y+20	; 0x14
    2880:	00 97       	sbiw	r24, 0x00	; 0
    2882:	69 f7       	brne	.-38     	; 0x285e <reenter_pass+0xbd8>
    2884:	14 c0       	rjmp	.+40     	; 0x28ae <reenter_pass+0xc28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2886:	6d 89       	ldd	r22, Y+21	; 0x15
    2888:	7e 89       	ldd	r23, Y+22	; 0x16
    288a:	8f 89       	ldd	r24, Y+23	; 0x17
    288c:	98 8d       	ldd	r25, Y+24	; 0x18
    288e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2892:	dc 01       	movw	r26, r24
    2894:	cb 01       	movw	r24, r22
    2896:	9c 8b       	std	Y+20, r25	; 0x14
    2898:	8b 8b       	std	Y+19, r24	; 0x13
    289a:	8b 89       	ldd	r24, Y+19	; 0x13
    289c:	9c 89       	ldd	r25, Y+20	; 0x14
    289e:	98 8b       	std	Y+16, r25	; 0x10
    28a0:	8f 87       	std	Y+15, r24	; 0x0f
    28a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    28a4:	98 89       	ldd	r25, Y+16	; 0x10
    28a6:	01 97       	sbiw	r24, 0x01	; 1
    28a8:	f1 f7       	brne	.-4      	; 0x28a6 <reenter_pass+0xc20>
    28aa:	98 8b       	std	Y+16, r25	; 0x10
    28ac:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(10);
			change_pass();//call the change password function
    28ae:	0e 94 af 17 	call	0x2f5e	; 0x2f5e <change_pass>
    28b2:	a3 c0       	rjmp	.+326    	; 0x29fa <reenter_pass+0xd74>
		}
	}


	else if(check1==0){
    28b4:	fe 01       	movw	r30, r28
    28b6:	ef 56       	subi	r30, 0x6F	; 111
    28b8:	ff 4f       	sbci	r31, 0xFF	; 255
    28ba:	80 81       	ld	r24, Z
    28bc:	91 81       	ldd	r25, Z+1	; 0x01
    28be:	00 97       	sbiw	r24, 0x00	; 0
    28c0:	09 f0       	breq	.+2      	; 0x28c4 <reenter_pass+0xc3e>
    28c2:	9b c0       	rjmp	.+310    	; 0x29fa <reenter_pass+0xd74>

		counter1++;
    28c4:	80 91 27 01 	lds	r24, 0x0127
    28c8:	8f 5f       	subi	r24, 0xFF	; 255
    28ca:	80 93 27 01 	sts	0x0127, r24
		if(counter1<4){
    28ce:	80 91 27 01 	lds	r24, 0x0127
    28d2:	84 30       	cpi	r24, 0x04	; 4
    28d4:	08 f0       	brcs	.+2      	; 0x28d8 <reenter_pass+0xc52>
    28d6:	88 c0       	rjmp	.+272    	; 0x29e8 <reenter_pass+0xd62>
			LCD_clearScreen();//clear the LCD
    28d8:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
			LCD_moveCursor(0,1);//move the cursor of LCD
    28dc:	80 e0       	ldi	r24, 0x00	; 0
    28de:	61 e0       	ldi	r22, 0x01	; 1
    28e0:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
			LCD_displayString("WRONG PASSWORD");//display on LCD
    28e4:	86 ea       	ldi	r24, 0xA6	; 166
    28e6:	90 e0       	ldi	r25, 0x00	; 0
    28e8:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
			LCD_moveCursor(1,4);//move the cursor of LCD
    28ec:	81 e0       	ldi	r24, 0x01	; 1
    28ee:	64 e0       	ldi	r22, 0x04	; 4
    28f0:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
			LCD_displayString("TRY AGAIN");//display on LCD
    28f4:	85 eb       	ldi	r24, 0xB5	; 181
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    28fc:	80 e0       	ldi	r24, 0x00	; 0
    28fe:	90 e0       	ldi	r25, 0x00	; 0
    2900:	aa e7       	ldi	r26, 0x7A	; 122
    2902:	b4 e4       	ldi	r27, 0x44	; 68
    2904:	8b 87       	std	Y+11, r24	; 0x0b
    2906:	9c 87       	std	Y+12, r25	; 0x0c
    2908:	ad 87       	std	Y+13, r26	; 0x0d
    290a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    290c:	6b 85       	ldd	r22, Y+11	; 0x0b
    290e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2910:	8d 85       	ldd	r24, Y+13	; 0x0d
    2912:	9e 85       	ldd	r25, Y+14	; 0x0e
    2914:	20 e0       	ldi	r18, 0x00	; 0
    2916:	30 e0       	ldi	r19, 0x00	; 0
    2918:	4a ef       	ldi	r20, 0xFA	; 250
    291a:	54 e4       	ldi	r21, 0x44	; 68
    291c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2920:	dc 01       	movw	r26, r24
    2922:	cb 01       	movw	r24, r22
    2924:	8f 83       	std	Y+7, r24	; 0x07
    2926:	98 87       	std	Y+8, r25	; 0x08
    2928:	a9 87       	std	Y+9, r26	; 0x09
    292a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    292c:	6f 81       	ldd	r22, Y+7	; 0x07
    292e:	78 85       	ldd	r23, Y+8	; 0x08
    2930:	89 85       	ldd	r24, Y+9	; 0x09
    2932:	9a 85       	ldd	r25, Y+10	; 0x0a
    2934:	20 e0       	ldi	r18, 0x00	; 0
    2936:	30 e0       	ldi	r19, 0x00	; 0
    2938:	40 e8       	ldi	r20, 0x80	; 128
    293a:	5f e3       	ldi	r21, 0x3F	; 63
    293c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2940:	88 23       	and	r24, r24
    2942:	2c f4       	brge	.+10     	; 0x294e <reenter_pass+0xcc8>
		__ticks = 1;
    2944:	81 e0       	ldi	r24, 0x01	; 1
    2946:	90 e0       	ldi	r25, 0x00	; 0
    2948:	9e 83       	std	Y+6, r25	; 0x06
    294a:	8d 83       	std	Y+5, r24	; 0x05
    294c:	3f c0       	rjmp	.+126    	; 0x29cc <reenter_pass+0xd46>
	else if (__tmp > 65535)
    294e:	6f 81       	ldd	r22, Y+7	; 0x07
    2950:	78 85       	ldd	r23, Y+8	; 0x08
    2952:	89 85       	ldd	r24, Y+9	; 0x09
    2954:	9a 85       	ldd	r25, Y+10	; 0x0a
    2956:	20 e0       	ldi	r18, 0x00	; 0
    2958:	3f ef       	ldi	r19, 0xFF	; 255
    295a:	4f e7       	ldi	r20, 0x7F	; 127
    295c:	57 e4       	ldi	r21, 0x47	; 71
    295e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2962:	18 16       	cp	r1, r24
    2964:	4c f5       	brge	.+82     	; 0x29b8 <reenter_pass+0xd32>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2966:	6b 85       	ldd	r22, Y+11	; 0x0b
    2968:	7c 85       	ldd	r23, Y+12	; 0x0c
    296a:	8d 85       	ldd	r24, Y+13	; 0x0d
    296c:	9e 85       	ldd	r25, Y+14	; 0x0e
    296e:	20 e0       	ldi	r18, 0x00	; 0
    2970:	30 e0       	ldi	r19, 0x00	; 0
    2972:	40 e2       	ldi	r20, 0x20	; 32
    2974:	51 e4       	ldi	r21, 0x41	; 65
    2976:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    297a:	dc 01       	movw	r26, r24
    297c:	cb 01       	movw	r24, r22
    297e:	bc 01       	movw	r22, r24
    2980:	cd 01       	movw	r24, r26
    2982:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2986:	dc 01       	movw	r26, r24
    2988:	cb 01       	movw	r24, r22
    298a:	9e 83       	std	Y+6, r25	; 0x06
    298c:	8d 83       	std	Y+5, r24	; 0x05
    298e:	0f c0       	rjmp	.+30     	; 0x29ae <reenter_pass+0xd28>
    2990:	88 ec       	ldi	r24, 0xC8	; 200
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	9c 83       	std	Y+4, r25	; 0x04
    2996:	8b 83       	std	Y+3, r24	; 0x03
    2998:	8b 81       	ldd	r24, Y+3	; 0x03
    299a:	9c 81       	ldd	r25, Y+4	; 0x04
    299c:	01 97       	sbiw	r24, 0x01	; 1
    299e:	f1 f7       	brne	.-4      	; 0x299c <reenter_pass+0xd16>
    29a0:	9c 83       	std	Y+4, r25	; 0x04
    29a2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    29a4:	8d 81       	ldd	r24, Y+5	; 0x05
    29a6:	9e 81       	ldd	r25, Y+6	; 0x06
    29a8:	01 97       	sbiw	r24, 0x01	; 1
    29aa:	9e 83       	std	Y+6, r25	; 0x06
    29ac:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29ae:	8d 81       	ldd	r24, Y+5	; 0x05
    29b0:	9e 81       	ldd	r25, Y+6	; 0x06
    29b2:	00 97       	sbiw	r24, 0x00	; 0
    29b4:	69 f7       	brne	.-38     	; 0x2990 <reenter_pass+0xd0a>
    29b6:	14 c0       	rjmp	.+40     	; 0x29e0 <reenter_pass+0xd5a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b8:	6f 81       	ldd	r22, Y+7	; 0x07
    29ba:	78 85       	ldd	r23, Y+8	; 0x08
    29bc:	89 85       	ldd	r24, Y+9	; 0x09
    29be:	9a 85       	ldd	r25, Y+10	; 0x0a
    29c0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29c4:	dc 01       	movw	r26, r24
    29c6:	cb 01       	movw	r24, r22
    29c8:	9e 83       	std	Y+6, r25	; 0x06
    29ca:	8d 83       	std	Y+5, r24	; 0x05
    29cc:	8d 81       	ldd	r24, Y+5	; 0x05
    29ce:	9e 81       	ldd	r25, Y+6	; 0x06
    29d0:	9a 83       	std	Y+2, r25	; 0x02
    29d2:	89 83       	std	Y+1, r24	; 0x01
    29d4:	89 81       	ldd	r24, Y+1	; 0x01
    29d6:	9a 81       	ldd	r25, Y+2	; 0x02
    29d8:	01 97       	sbiw	r24, 0x01	; 1
    29da:	f1 f7       	brne	.-4      	; 0x29d8 <reenter_pass+0xd52>
    29dc:	9a 83       	std	Y+2, r25	; 0x02
    29de:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(1000);
			flagg=1;// re-call the re-entered password function again
    29e0:	81 e0       	ldi	r24, 0x01	; 1
    29e2:	80 93 38 01 	sts	0x0138, r24
    29e6:	09 c0       	rjmp	.+18     	; 0x29fa <reenter_pass+0xd74>
		}

		else{
			counter1=1;
    29e8:	81 e0       	ldi	r24, 0x01	; 1
    29ea:	80 93 27 01 	sts	0x0127, r24
			flagg=0;
    29ee:	10 92 38 01 	sts	0x0138, r1
			Error_display();//call the error function
    29f2:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <Error_display>
			main_option();//then call the main option function after the error function it is done
    29f6:	0e 94 09 15 	call	0x2a12	; 0x2a12 <main_option>

		}
	}

}
    29fa:	c9 56       	subi	r28, 0x69	; 105
    29fc:	df 4f       	sbci	r29, 0xFF	; 255
    29fe:	0f b6       	in	r0, 0x3f	; 63
    2a00:	f8 94       	cli
    2a02:	de bf       	out	0x3e, r29	; 62
    2a04:	0f be       	out	0x3f, r0	; 63
    2a06:	cd bf       	out	0x3d, r28	; 61
    2a08:	cf 91       	pop	r28
    2a0a:	df 91       	pop	r29
    2a0c:	1f 91       	pop	r17
    2a0e:	0f 91       	pop	r16
    2a10:	08 95       	ret

00002a12 <main_option>:

void main_option(void){
    2a12:	df 93       	push	r29
    2a14:	cf 93       	push	r28
    2a16:	cd b7       	in	r28, 0x3d	; 61
    2a18:	de b7       	in	r29, 0x3e	; 62
    2a1a:	e8 97       	sbiw	r28, 0x38	; 56
    2a1c:	0f b6       	in	r0, 0x3f	; 63
    2a1e:	f8 94       	cli
    2a20:	de bf       	out	0x3e, r29	; 62
    2a22:	0f be       	out	0x3f, r0	; 63
    2a24:	cd bf       	out	0x3d, r28	; 61

	/**************************** To Display The Main Options on LCD ****************************/

	LCD_clearScreen();//clear the LCD
    2a26:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_moveCursor(0,0);//move the cursor of LCD
    2a2a:	80 e0       	ldi	r24, 0x00	; 0
    2a2c:	60 e0       	ldi	r22, 0x00	; 0
    2a2e:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("+ : OPEN DOOR");//display on LCD
    2a32:	8f eb       	ldi	r24, 0xBF	; 191
    2a34:	90 e0       	ldi	r25, 0x00	; 0
    2a36:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
	LCD_moveCursor(1,0);
    2a3a:	81 e0       	ldi	r24, 0x01	; 1
    2a3c:	60 e0       	ldi	r22, 0x00	; 0
    2a3e:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("- : CHANGE PASS");
    2a42:	8d ec       	ldi	r24, 0xCD	; 205
    2a44:	90 e0       	ldi	r25, 0x00	; 0
    2a46:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
    2a4a:	80 e0       	ldi	r24, 0x00	; 0
    2a4c:	90 e0       	ldi	r25, 0x00	; 0
    2a4e:	a8 e4       	ldi	r26, 0x48	; 72
    2a50:	b2 e4       	ldi	r27, 0x42	; 66
    2a52:	8d ab       	std	Y+53, r24	; 0x35
    2a54:	9e ab       	std	Y+54, r25	; 0x36
    2a56:	af ab       	std	Y+55, r26	; 0x37
    2a58:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a5a:	6d a9       	ldd	r22, Y+53	; 0x35
    2a5c:	7e a9       	ldd	r23, Y+54	; 0x36
    2a5e:	8f a9       	ldd	r24, Y+55	; 0x37
    2a60:	98 ad       	ldd	r25, Y+56	; 0x38
    2a62:	20 e0       	ldi	r18, 0x00	; 0
    2a64:	30 e0       	ldi	r19, 0x00	; 0
    2a66:	4a ef       	ldi	r20, 0xFA	; 250
    2a68:	54 e4       	ldi	r21, 0x44	; 68
    2a6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a6e:	dc 01       	movw	r26, r24
    2a70:	cb 01       	movw	r24, r22
    2a72:	89 ab       	std	Y+49, r24	; 0x31
    2a74:	9a ab       	std	Y+50, r25	; 0x32
    2a76:	ab ab       	std	Y+51, r26	; 0x33
    2a78:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2a7a:	69 a9       	ldd	r22, Y+49	; 0x31
    2a7c:	7a a9       	ldd	r23, Y+50	; 0x32
    2a7e:	8b a9       	ldd	r24, Y+51	; 0x33
    2a80:	9c a9       	ldd	r25, Y+52	; 0x34
    2a82:	20 e0       	ldi	r18, 0x00	; 0
    2a84:	30 e0       	ldi	r19, 0x00	; 0
    2a86:	40 e8       	ldi	r20, 0x80	; 128
    2a88:	5f e3       	ldi	r21, 0x3F	; 63
    2a8a:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2a8e:	88 23       	and	r24, r24
    2a90:	2c f4       	brge	.+10     	; 0x2a9c <main_option+0x8a>
		__ticks = 1;
    2a92:	81 e0       	ldi	r24, 0x01	; 1
    2a94:	90 e0       	ldi	r25, 0x00	; 0
    2a96:	98 ab       	std	Y+48, r25	; 0x30
    2a98:	8f a7       	std	Y+47, r24	; 0x2f
    2a9a:	3f c0       	rjmp	.+126    	; 0x2b1a <main_option+0x108>
	else if (__tmp > 65535)
    2a9c:	69 a9       	ldd	r22, Y+49	; 0x31
    2a9e:	7a a9       	ldd	r23, Y+50	; 0x32
    2aa0:	8b a9       	ldd	r24, Y+51	; 0x33
    2aa2:	9c a9       	ldd	r25, Y+52	; 0x34
    2aa4:	20 e0       	ldi	r18, 0x00	; 0
    2aa6:	3f ef       	ldi	r19, 0xFF	; 255
    2aa8:	4f e7       	ldi	r20, 0x7F	; 127
    2aaa:	57 e4       	ldi	r21, 0x47	; 71
    2aac:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ab0:	18 16       	cp	r1, r24
    2ab2:	4c f5       	brge	.+82     	; 0x2b06 <main_option+0xf4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ab4:	6d a9       	ldd	r22, Y+53	; 0x35
    2ab6:	7e a9       	ldd	r23, Y+54	; 0x36
    2ab8:	8f a9       	ldd	r24, Y+55	; 0x37
    2aba:	98 ad       	ldd	r25, Y+56	; 0x38
    2abc:	20 e0       	ldi	r18, 0x00	; 0
    2abe:	30 e0       	ldi	r19, 0x00	; 0
    2ac0:	40 e2       	ldi	r20, 0x20	; 32
    2ac2:	51 e4       	ldi	r21, 0x41	; 65
    2ac4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ac8:	dc 01       	movw	r26, r24
    2aca:	cb 01       	movw	r24, r22
    2acc:	bc 01       	movw	r22, r24
    2ace:	cd 01       	movw	r24, r26
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	98 ab       	std	Y+48, r25	; 0x30
    2ada:	8f a7       	std	Y+47, r24	; 0x2f
    2adc:	0f c0       	rjmp	.+30     	; 0x2afc <main_option+0xea>
    2ade:	88 ec       	ldi	r24, 0xC8	; 200
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	9e a7       	std	Y+46, r25	; 0x2e
    2ae4:	8d a7       	std	Y+45, r24	; 0x2d
    2ae6:	8d a5       	ldd	r24, Y+45	; 0x2d
    2ae8:	9e a5       	ldd	r25, Y+46	; 0x2e
    2aea:	01 97       	sbiw	r24, 0x01	; 1
    2aec:	f1 f7       	brne	.-4      	; 0x2aea <main_option+0xd8>
    2aee:	9e a7       	std	Y+46, r25	; 0x2e
    2af0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2af2:	8f a5       	ldd	r24, Y+47	; 0x2f
    2af4:	98 a9       	ldd	r25, Y+48	; 0x30
    2af6:	01 97       	sbiw	r24, 0x01	; 1
    2af8:	98 ab       	std	Y+48, r25	; 0x30
    2afa:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2afc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2afe:	98 a9       	ldd	r25, Y+48	; 0x30
    2b00:	00 97       	sbiw	r24, 0x00	; 0
    2b02:	69 f7       	brne	.-38     	; 0x2ade <main_option+0xcc>
    2b04:	14 c0       	rjmp	.+40     	; 0x2b2e <main_option+0x11c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b06:	69 a9       	ldd	r22, Y+49	; 0x31
    2b08:	7a a9       	ldd	r23, Y+50	; 0x32
    2b0a:	8b a9       	ldd	r24, Y+51	; 0x33
    2b0c:	9c a9       	ldd	r25, Y+52	; 0x34
    2b0e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b12:	dc 01       	movw	r26, r24
    2b14:	cb 01       	movw	r24, r22
    2b16:	98 ab       	std	Y+48, r25	; 0x30
    2b18:	8f a7       	std	Y+47, r24	; 0x2f
    2b1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b1c:	98 a9       	ldd	r25, Y+48	; 0x30
    2b1e:	9c a7       	std	Y+44, r25	; 0x2c
    2b20:	8b a7       	std	Y+43, r24	; 0x2b
    2b22:	8b a5       	ldd	r24, Y+43	; 0x2b
    2b24:	9c a5       	ldd	r25, Y+44	; 0x2c
    2b26:	01 97       	sbiw	r24, 0x01	; 1
    2b28:	f1 f7       	brne	.-4      	; 0x2b26 <main_option+0x114>
    2b2a:	9c a7       	std	Y+44, r25	; 0x2c
    2b2c:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(50);

	operation=KEYPAD_getPressedKey();
    2b2e:	0e 94 f4 1b 	call	0x37e8	; 0x37e8 <KEYPAD_getPressedKey>
    2b32:	80 93 36 01 	sts	0x0136, r24
    2b36:	80 e0       	ldi	r24, 0x00	; 0
    2b38:	90 e0       	ldi	r25, 0x00	; 0
    2b3a:	a0 ea       	ldi	r26, 0xA0	; 160
    2b3c:	b1 e4       	ldi	r27, 0x41	; 65
    2b3e:	8f a3       	std	Y+39, r24	; 0x27
    2b40:	98 a7       	std	Y+40, r25	; 0x28
    2b42:	a9 a7       	std	Y+41, r26	; 0x29
    2b44:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b46:	6f a1       	ldd	r22, Y+39	; 0x27
    2b48:	78 a5       	ldd	r23, Y+40	; 0x28
    2b4a:	89 a5       	ldd	r24, Y+41	; 0x29
    2b4c:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b4e:	20 e0       	ldi	r18, 0x00	; 0
    2b50:	30 e0       	ldi	r19, 0x00	; 0
    2b52:	4a ef       	ldi	r20, 0xFA	; 250
    2b54:	54 e4       	ldi	r21, 0x44	; 68
    2b56:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b5a:	dc 01       	movw	r26, r24
    2b5c:	cb 01       	movw	r24, r22
    2b5e:	8b a3       	std	Y+35, r24	; 0x23
    2b60:	9c a3       	std	Y+36, r25	; 0x24
    2b62:	ad a3       	std	Y+37, r26	; 0x25
    2b64:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2b66:	6b a1       	ldd	r22, Y+35	; 0x23
    2b68:	7c a1       	ldd	r23, Y+36	; 0x24
    2b6a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b6c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b6e:	20 e0       	ldi	r18, 0x00	; 0
    2b70:	30 e0       	ldi	r19, 0x00	; 0
    2b72:	40 e8       	ldi	r20, 0x80	; 128
    2b74:	5f e3       	ldi	r21, 0x3F	; 63
    2b76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2b7a:	88 23       	and	r24, r24
    2b7c:	2c f4       	brge	.+10     	; 0x2b88 <main_option+0x176>
		__ticks = 1;
    2b7e:	81 e0       	ldi	r24, 0x01	; 1
    2b80:	90 e0       	ldi	r25, 0x00	; 0
    2b82:	9a a3       	std	Y+34, r25	; 0x22
    2b84:	89 a3       	std	Y+33, r24	; 0x21
    2b86:	3f c0       	rjmp	.+126    	; 0x2c06 <main_option+0x1f4>
	else if (__tmp > 65535)
    2b88:	6b a1       	ldd	r22, Y+35	; 0x23
    2b8a:	7c a1       	ldd	r23, Y+36	; 0x24
    2b8c:	8d a1       	ldd	r24, Y+37	; 0x25
    2b8e:	9e a1       	ldd	r25, Y+38	; 0x26
    2b90:	20 e0       	ldi	r18, 0x00	; 0
    2b92:	3f ef       	ldi	r19, 0xFF	; 255
    2b94:	4f e7       	ldi	r20, 0x7F	; 127
    2b96:	57 e4       	ldi	r21, 0x47	; 71
    2b98:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2b9c:	18 16       	cp	r1, r24
    2b9e:	4c f5       	brge	.+82     	; 0x2bf2 <main_option+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ba0:	6f a1       	ldd	r22, Y+39	; 0x27
    2ba2:	78 a5       	ldd	r23, Y+40	; 0x28
    2ba4:	89 a5       	ldd	r24, Y+41	; 0x29
    2ba6:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ba8:	20 e0       	ldi	r18, 0x00	; 0
    2baa:	30 e0       	ldi	r19, 0x00	; 0
    2bac:	40 e2       	ldi	r20, 0x20	; 32
    2bae:	51 e4       	ldi	r21, 0x41	; 65
    2bb0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	bc 01       	movw	r22, r24
    2bba:	cd 01       	movw	r24, r26
    2bbc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bc0:	dc 01       	movw	r26, r24
    2bc2:	cb 01       	movw	r24, r22
    2bc4:	9a a3       	std	Y+34, r25	; 0x22
    2bc6:	89 a3       	std	Y+33, r24	; 0x21
    2bc8:	0f c0       	rjmp	.+30     	; 0x2be8 <main_option+0x1d6>
    2bca:	88 ec       	ldi	r24, 0xC8	; 200
    2bcc:	90 e0       	ldi	r25, 0x00	; 0
    2bce:	98 a3       	std	Y+32, r25	; 0x20
    2bd0:	8f 8f       	std	Y+31, r24	; 0x1f
    2bd2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2bd4:	98 a1       	ldd	r25, Y+32	; 0x20
    2bd6:	01 97       	sbiw	r24, 0x01	; 1
    2bd8:	f1 f7       	brne	.-4      	; 0x2bd6 <main_option+0x1c4>
    2bda:	98 a3       	std	Y+32, r25	; 0x20
    2bdc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2bde:	89 a1       	ldd	r24, Y+33	; 0x21
    2be0:	9a a1       	ldd	r25, Y+34	; 0x22
    2be2:	01 97       	sbiw	r24, 0x01	; 1
    2be4:	9a a3       	std	Y+34, r25	; 0x22
    2be6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2be8:	89 a1       	ldd	r24, Y+33	; 0x21
    2bea:	9a a1       	ldd	r25, Y+34	; 0x22
    2bec:	00 97       	sbiw	r24, 0x00	; 0
    2bee:	69 f7       	brne	.-38     	; 0x2bca <main_option+0x1b8>
    2bf0:	14 c0       	rjmp	.+40     	; 0x2c1a <main_option+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2bf2:	6b a1       	ldd	r22, Y+35	; 0x23
    2bf4:	7c a1       	ldd	r23, Y+36	; 0x24
    2bf6:	8d a1       	ldd	r24, Y+37	; 0x25
    2bf8:	9e a1       	ldd	r25, Y+38	; 0x26
    2bfa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bfe:	dc 01       	movw	r26, r24
    2c00:	cb 01       	movw	r24, r22
    2c02:	9a a3       	std	Y+34, r25	; 0x22
    2c04:	89 a3       	std	Y+33, r24	; 0x21
    2c06:	89 a1       	ldd	r24, Y+33	; 0x21
    2c08:	9a a1       	ldd	r25, Y+34	; 0x22
    2c0a:	9e 8f       	std	Y+30, r25	; 0x1e
    2c0c:	8d 8f       	std	Y+29, r24	; 0x1d
    2c0e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2c10:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2c12:	01 97       	sbiw	r24, 0x01	; 1
    2c14:	f1 f7       	brne	.-4      	; 0x2c12 <main_option+0x200>
    2c16:	9e 8f       	std	Y+30, r25	; 0x1e
    2c18:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(20);
	/*********** send the required operation to the Control_ECU */
	UART_sendByte(required_operation);
    2c1a:	82 e0       	ldi	r24, 0x02	; 2
    2c1c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    2c20:	80 e0       	ldi	r24, 0x00	; 0
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	a0 ea       	ldi	r26, 0xA0	; 160
    2c26:	b1 e4       	ldi	r27, 0x41	; 65
    2c28:	89 8f       	std	Y+25, r24	; 0x19
    2c2a:	9a 8f       	std	Y+26, r25	; 0x1a
    2c2c:	ab 8f       	std	Y+27, r26	; 0x1b
    2c2e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c30:	69 8d       	ldd	r22, Y+25	; 0x19
    2c32:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c34:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c36:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c38:	20 e0       	ldi	r18, 0x00	; 0
    2c3a:	30 e0       	ldi	r19, 0x00	; 0
    2c3c:	4a ef       	ldi	r20, 0xFA	; 250
    2c3e:	54 e4       	ldi	r21, 0x44	; 68
    2c40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c44:	dc 01       	movw	r26, r24
    2c46:	cb 01       	movw	r24, r22
    2c48:	8d 8b       	std	Y+21, r24	; 0x15
    2c4a:	9e 8b       	std	Y+22, r25	; 0x16
    2c4c:	af 8b       	std	Y+23, r26	; 0x17
    2c4e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2c50:	6d 89       	ldd	r22, Y+21	; 0x15
    2c52:	7e 89       	ldd	r23, Y+22	; 0x16
    2c54:	8f 89       	ldd	r24, Y+23	; 0x17
    2c56:	98 8d       	ldd	r25, Y+24	; 0x18
    2c58:	20 e0       	ldi	r18, 0x00	; 0
    2c5a:	30 e0       	ldi	r19, 0x00	; 0
    2c5c:	40 e8       	ldi	r20, 0x80	; 128
    2c5e:	5f e3       	ldi	r21, 0x3F	; 63
    2c60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2c64:	88 23       	and	r24, r24
    2c66:	2c f4       	brge	.+10     	; 0x2c72 <main_option+0x260>
		__ticks = 1;
    2c68:	81 e0       	ldi	r24, 0x01	; 1
    2c6a:	90 e0       	ldi	r25, 0x00	; 0
    2c6c:	9c 8b       	std	Y+20, r25	; 0x14
    2c6e:	8b 8b       	std	Y+19, r24	; 0x13
    2c70:	3f c0       	rjmp	.+126    	; 0x2cf0 <main_option+0x2de>
	else if (__tmp > 65535)
    2c72:	6d 89       	ldd	r22, Y+21	; 0x15
    2c74:	7e 89       	ldd	r23, Y+22	; 0x16
    2c76:	8f 89       	ldd	r24, Y+23	; 0x17
    2c78:	98 8d       	ldd	r25, Y+24	; 0x18
    2c7a:	20 e0       	ldi	r18, 0x00	; 0
    2c7c:	3f ef       	ldi	r19, 0xFF	; 255
    2c7e:	4f e7       	ldi	r20, 0x7F	; 127
    2c80:	57 e4       	ldi	r21, 0x47	; 71
    2c82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2c86:	18 16       	cp	r1, r24
    2c88:	4c f5       	brge	.+82     	; 0x2cdc <main_option+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c8a:	69 8d       	ldd	r22, Y+25	; 0x19
    2c8c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2c8e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2c90:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2c92:	20 e0       	ldi	r18, 0x00	; 0
    2c94:	30 e0       	ldi	r19, 0x00	; 0
    2c96:	40 e2       	ldi	r20, 0x20	; 32
    2c98:	51 e4       	ldi	r21, 0x41	; 65
    2c9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	bc 01       	movw	r22, r24
    2ca4:	cd 01       	movw	r24, r26
    2ca6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2caa:	dc 01       	movw	r26, r24
    2cac:	cb 01       	movw	r24, r22
    2cae:	9c 8b       	std	Y+20, r25	; 0x14
    2cb0:	8b 8b       	std	Y+19, r24	; 0x13
    2cb2:	0f c0       	rjmp	.+30     	; 0x2cd2 <main_option+0x2c0>
    2cb4:	88 ec       	ldi	r24, 0xC8	; 200
    2cb6:	90 e0       	ldi	r25, 0x00	; 0
    2cb8:	9a 8b       	std	Y+18, r25	; 0x12
    2cba:	89 8b       	std	Y+17, r24	; 0x11
    2cbc:	89 89       	ldd	r24, Y+17	; 0x11
    2cbe:	9a 89       	ldd	r25, Y+18	; 0x12
    2cc0:	01 97       	sbiw	r24, 0x01	; 1
    2cc2:	f1 f7       	brne	.-4      	; 0x2cc0 <main_option+0x2ae>
    2cc4:	9a 8b       	std	Y+18, r25	; 0x12
    2cc6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2cc8:	8b 89       	ldd	r24, Y+19	; 0x13
    2cca:	9c 89       	ldd	r25, Y+20	; 0x14
    2ccc:	01 97       	sbiw	r24, 0x01	; 1
    2cce:	9c 8b       	std	Y+20, r25	; 0x14
    2cd0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2cd2:	8b 89       	ldd	r24, Y+19	; 0x13
    2cd4:	9c 89       	ldd	r25, Y+20	; 0x14
    2cd6:	00 97       	sbiw	r24, 0x00	; 0
    2cd8:	69 f7       	brne	.-38     	; 0x2cb4 <main_option+0x2a2>
    2cda:	14 c0       	rjmp	.+40     	; 0x2d04 <main_option+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2cdc:	6d 89       	ldd	r22, Y+21	; 0x15
    2cde:	7e 89       	ldd	r23, Y+22	; 0x16
    2ce0:	8f 89       	ldd	r24, Y+23	; 0x17
    2ce2:	98 8d       	ldd	r25, Y+24	; 0x18
    2ce4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	9c 8b       	std	Y+20, r25	; 0x14
    2cee:	8b 8b       	std	Y+19, r24	; 0x13
    2cf0:	8b 89       	ldd	r24, Y+19	; 0x13
    2cf2:	9c 89       	ldd	r25, Y+20	; 0x14
    2cf4:	98 8b       	std	Y+16, r25	; 0x10
    2cf6:	8f 87       	std	Y+15, r24	; 0x0f
    2cf8:	8f 85       	ldd	r24, Y+15	; 0x0f
    2cfa:	98 89       	ldd	r25, Y+16	; 0x10
    2cfc:	01 97       	sbiw	r24, 0x01	; 1
    2cfe:	f1 f7       	brne	.-4      	; 0x2cfc <main_option+0x2ea>
    2d00:	98 8b       	std	Y+16, r25	; 0x10
    2d02:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(20);
	/***************** send what the user operation wanted ***************/
	UART_sendByte(operation);
    2d04:	80 91 36 01 	lds	r24, 0x0136
    2d08:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    2d0c:	80 e0       	ldi	r24, 0x00	; 0
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	a0 ea       	ldi	r26, 0xA0	; 160
    2d12:	b1 e4       	ldi	r27, 0x41	; 65
    2d14:	8b 87       	std	Y+11, r24	; 0x0b
    2d16:	9c 87       	std	Y+12, r25	; 0x0c
    2d18:	ad 87       	std	Y+13, r26	; 0x0d
    2d1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d24:	20 e0       	ldi	r18, 0x00	; 0
    2d26:	30 e0       	ldi	r19, 0x00	; 0
    2d28:	4a ef       	ldi	r20, 0xFA	; 250
    2d2a:	54 e4       	ldi	r21, 0x44	; 68
    2d2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d30:	dc 01       	movw	r26, r24
    2d32:	cb 01       	movw	r24, r22
    2d34:	8f 83       	std	Y+7, r24	; 0x07
    2d36:	98 87       	std	Y+8, r25	; 0x08
    2d38:	a9 87       	std	Y+9, r26	; 0x09
    2d3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d3e:	78 85       	ldd	r23, Y+8	; 0x08
    2d40:	89 85       	ldd	r24, Y+9	; 0x09
    2d42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d44:	20 e0       	ldi	r18, 0x00	; 0
    2d46:	30 e0       	ldi	r19, 0x00	; 0
    2d48:	40 e8       	ldi	r20, 0x80	; 128
    2d4a:	5f e3       	ldi	r21, 0x3F	; 63
    2d4c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d50:	88 23       	and	r24, r24
    2d52:	2c f4       	brge	.+10     	; 0x2d5e <main_option+0x34c>
		__ticks = 1;
    2d54:	81 e0       	ldi	r24, 0x01	; 1
    2d56:	90 e0       	ldi	r25, 0x00	; 0
    2d58:	9e 83       	std	Y+6, r25	; 0x06
    2d5a:	8d 83       	std	Y+5, r24	; 0x05
    2d5c:	3f c0       	rjmp	.+126    	; 0x2ddc <main_option+0x3ca>
	else if (__tmp > 65535)
    2d5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d60:	78 85       	ldd	r23, Y+8	; 0x08
    2d62:	89 85       	ldd	r24, Y+9	; 0x09
    2d64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d66:	20 e0       	ldi	r18, 0x00	; 0
    2d68:	3f ef       	ldi	r19, 0xFF	; 255
    2d6a:	4f e7       	ldi	r20, 0x7F	; 127
    2d6c:	57 e4       	ldi	r21, 0x47	; 71
    2d6e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2d72:	18 16       	cp	r1, r24
    2d74:	4c f5       	brge	.+82     	; 0x2dc8 <main_option+0x3b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d7e:	20 e0       	ldi	r18, 0x00	; 0
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	40 e2       	ldi	r20, 0x20	; 32
    2d84:	51 e4       	ldi	r21, 0x41	; 65
    2d86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d8a:	dc 01       	movw	r26, r24
    2d8c:	cb 01       	movw	r24, r22
    2d8e:	bc 01       	movw	r22, r24
    2d90:	cd 01       	movw	r24, r26
    2d92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d96:	dc 01       	movw	r26, r24
    2d98:	cb 01       	movw	r24, r22
    2d9a:	9e 83       	std	Y+6, r25	; 0x06
    2d9c:	8d 83       	std	Y+5, r24	; 0x05
    2d9e:	0f c0       	rjmp	.+30     	; 0x2dbe <main_option+0x3ac>
    2da0:	88 ec       	ldi	r24, 0xC8	; 200
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	9c 83       	std	Y+4, r25	; 0x04
    2da6:	8b 83       	std	Y+3, r24	; 0x03
    2da8:	8b 81       	ldd	r24, Y+3	; 0x03
    2daa:	9c 81       	ldd	r25, Y+4	; 0x04
    2dac:	01 97       	sbiw	r24, 0x01	; 1
    2dae:	f1 f7       	brne	.-4      	; 0x2dac <main_option+0x39a>
    2db0:	9c 83       	std	Y+4, r25	; 0x04
    2db2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2db4:	8d 81       	ldd	r24, Y+5	; 0x05
    2db6:	9e 81       	ldd	r25, Y+6	; 0x06
    2db8:	01 97       	sbiw	r24, 0x01	; 1
    2dba:	9e 83       	std	Y+6, r25	; 0x06
    2dbc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dbe:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc0:	9e 81       	ldd	r25, Y+6	; 0x06
    2dc2:	00 97       	sbiw	r24, 0x00	; 0
    2dc4:	69 f7       	brne	.-38     	; 0x2da0 <main_option+0x38e>
    2dc6:	14 c0       	rjmp	.+40     	; 0x2df0 <main_option+0x3de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dc8:	6f 81       	ldd	r22, Y+7	; 0x07
    2dca:	78 85       	ldd	r23, Y+8	; 0x08
    2dcc:	89 85       	ldd	r24, Y+9	; 0x09
    2dce:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dd0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2dd4:	dc 01       	movw	r26, r24
    2dd6:	cb 01       	movw	r24, r22
    2dd8:	9e 83       	std	Y+6, r25	; 0x06
    2dda:	8d 83       	std	Y+5, r24	; 0x05
    2ddc:	8d 81       	ldd	r24, Y+5	; 0x05
    2dde:	9e 81       	ldd	r25, Y+6	; 0x06
    2de0:	9a 83       	std	Y+2, r25	; 0x02
    2de2:	89 83       	std	Y+1, r24	; 0x01
    2de4:	89 81       	ldd	r24, Y+1	; 0x01
    2de6:	9a 81       	ldd	r25, Y+2	; 0x02
    2de8:	01 97       	sbiw	r24, 0x01	; 1
    2dea:	f1 f7       	brne	.-4      	; 0x2de8 <main_option+0x3d6>
    2dec:	9a 83       	std	Y+2, r25	; 0x02
    2dee:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(20);

	reenter_pass();//call the re-entered function
    2df0:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <reenter_pass>




}
    2df4:	e8 96       	adiw	r28, 0x38	; 56
    2df6:	0f b6       	in	r0, 0x3f	; 63
    2df8:	f8 94       	cli
    2dfa:	de bf       	out	0x3e, r29	; 62
    2dfc:	0f be       	out	0x3f, r0	; 63
    2dfe:	cd bf       	out	0x3d, r28	; 61
    2e00:	cf 91       	pop	r28
    2e02:	df 91       	pop	r29
    2e04:	08 95       	ret

00002e06 <open_door>:


void open_door(void){
    2e06:	df 93       	push	r29
    2e08:	cf 93       	push	r28
    2e0a:	cd b7       	in	r28, 0x3d	; 61
    2e0c:	de b7       	in	r29, 0x3e	; 62
    2e0e:	2e 97       	sbiw	r28, 0x0e	; 14
    2e10:	0f b6       	in	r0, 0x3f	; 63
    2e12:	f8 94       	cli
    2e14:	de bf       	out	0x3e, r29	; 62
    2e16:	0f be       	out	0x3f, r0	; 63
    2e18:	cd bf       	out	0x3d, r28	; 61
	UART_sendByte(open_dooor);
    2e1a:	84 e0       	ldi	r24, 0x04	; 4
    2e1c:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    2e20:	80 e0       	ldi	r24, 0x00	; 0
    2e22:	90 e0       	ldi	r25, 0x00	; 0
    2e24:	a0 e2       	ldi	r26, 0x20	; 32
    2e26:	b1 e4       	ldi	r27, 0x41	; 65
    2e28:	8b 87       	std	Y+11, r24	; 0x0b
    2e2a:	9c 87       	std	Y+12, r25	; 0x0c
    2e2c:	ad 87       	std	Y+13, r26	; 0x0d
    2e2e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2e30:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e32:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e34:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e36:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e38:	20 e0       	ldi	r18, 0x00	; 0
    2e3a:	30 e0       	ldi	r19, 0x00	; 0
    2e3c:	4a ef       	ldi	r20, 0xFA	; 250
    2e3e:	54 e4       	ldi	r21, 0x44	; 68
    2e40:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e44:	dc 01       	movw	r26, r24
    2e46:	cb 01       	movw	r24, r22
    2e48:	8f 83       	std	Y+7, r24	; 0x07
    2e4a:	98 87       	std	Y+8, r25	; 0x08
    2e4c:	a9 87       	std	Y+9, r26	; 0x09
    2e4e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e50:	6f 81       	ldd	r22, Y+7	; 0x07
    2e52:	78 85       	ldd	r23, Y+8	; 0x08
    2e54:	89 85       	ldd	r24, Y+9	; 0x09
    2e56:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e58:	20 e0       	ldi	r18, 0x00	; 0
    2e5a:	30 e0       	ldi	r19, 0x00	; 0
    2e5c:	40 e8       	ldi	r20, 0x80	; 128
    2e5e:	5f e3       	ldi	r21, 0x3F	; 63
    2e60:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2e64:	88 23       	and	r24, r24
    2e66:	2c f4       	brge	.+10     	; 0x2e72 <open_door+0x6c>
		__ticks = 1;
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	9e 83       	std	Y+6, r25	; 0x06
    2e6e:	8d 83       	std	Y+5, r24	; 0x05
    2e70:	3f c0       	rjmp	.+126    	; 0x2ef0 <open_door+0xea>
	else if (__tmp > 65535)
    2e72:	6f 81       	ldd	r22, Y+7	; 0x07
    2e74:	78 85       	ldd	r23, Y+8	; 0x08
    2e76:	89 85       	ldd	r24, Y+9	; 0x09
    2e78:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e7a:	20 e0       	ldi	r18, 0x00	; 0
    2e7c:	3f ef       	ldi	r19, 0xFF	; 255
    2e7e:	4f e7       	ldi	r20, 0x7F	; 127
    2e80:	57 e4       	ldi	r21, 0x47	; 71
    2e82:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2e86:	18 16       	cp	r1, r24
    2e88:	4c f5       	brge	.+82     	; 0x2edc <open_door+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e8a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e8c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e8e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e90:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e92:	20 e0       	ldi	r18, 0x00	; 0
    2e94:	30 e0       	ldi	r19, 0x00	; 0
    2e96:	40 e2       	ldi	r20, 0x20	; 32
    2e98:	51 e4       	ldi	r21, 0x41	; 65
    2e9a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e9e:	dc 01       	movw	r26, r24
    2ea0:	cb 01       	movw	r24, r22
    2ea2:	bc 01       	movw	r22, r24
    2ea4:	cd 01       	movw	r24, r26
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
    2eb2:	0f c0       	rjmp	.+30     	; 0x2ed2 <open_door+0xcc>
    2eb4:	88 ec       	ldi	r24, 0xC8	; 200
    2eb6:	90 e0       	ldi	r25, 0x00	; 0
    2eb8:	9c 83       	std	Y+4, r25	; 0x04
    2eba:	8b 83       	std	Y+3, r24	; 0x03
    2ebc:	8b 81       	ldd	r24, Y+3	; 0x03
    2ebe:	9c 81       	ldd	r25, Y+4	; 0x04
    2ec0:	01 97       	sbiw	r24, 0x01	; 1
    2ec2:	f1 f7       	brne	.-4      	; 0x2ec0 <open_door+0xba>
    2ec4:	9c 83       	std	Y+4, r25	; 0x04
    2ec6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ec8:	8d 81       	ldd	r24, Y+5	; 0x05
    2eca:	9e 81       	ldd	r25, Y+6	; 0x06
    2ecc:	01 97       	sbiw	r24, 0x01	; 1
    2ece:	9e 83       	std	Y+6, r25	; 0x06
    2ed0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2ed2:	8d 81       	ldd	r24, Y+5	; 0x05
    2ed4:	9e 81       	ldd	r25, Y+6	; 0x06
    2ed6:	00 97       	sbiw	r24, 0x00	; 0
    2ed8:	69 f7       	brne	.-38     	; 0x2eb4 <open_door+0xae>
    2eda:	14 c0       	rjmp	.+40     	; 0x2f04 <open_door+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2edc:	6f 81       	ldd	r22, Y+7	; 0x07
    2ede:	78 85       	ldd	r23, Y+8	; 0x08
    2ee0:	89 85       	ldd	r24, Y+9	; 0x09
    2ee2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ee4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ee8:	dc 01       	movw	r26, r24
    2eea:	cb 01       	movw	r24, r22
    2eec:	9e 83       	std	Y+6, r25	; 0x06
    2eee:	8d 83       	std	Y+5, r24	; 0x05
    2ef0:	8d 81       	ldd	r24, Y+5	; 0x05
    2ef2:	9e 81       	ldd	r25, Y+6	; 0x06
    2ef4:	9a 83       	std	Y+2, r25	; 0x02
    2ef6:	89 83       	std	Y+1, r24	; 0x01
    2ef8:	89 81       	ldd	r24, Y+1	; 0x01
    2efa:	9a 81       	ldd	r25, Y+2	; 0x02
    2efc:	01 97       	sbiw	r24, 0x01	; 1
    2efe:	f1 f7       	brne	.-4      	; 0x2efc <open_door+0xf6>
    2f00:	9a 83       	std	Y+2, r25	; 0x02
    2f02:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);

	LCD_clearScreen();//clear LCD
    2f04:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "Door Unlocking");//display on LCD
    2f08:	2d ed       	ldi	r18, 0xDD	; 221
    2f0a:	30 e0       	ldi	r19, 0x00	; 0
    2f0c:	80 e0       	ldi	r24, 0x00	; 0
    2f0e:	61 e0       	ldi	r22, 0x01	; 1
    2f10:	a9 01       	movw	r20, r18
    2f12:	0e 94 6d 22 	call	0x44da	; 0x44da <LCD_displayStringRowColumn>
	delay(15); /* Waiting For 15 Seconds */
    2f16:	8f e0       	ldi	r24, 0x0F	; 15
    2f18:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>

	/* Door Holding */
	LCD_clearScreen();
    2f1c:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "Door is open");
    2f20:	2c ee       	ldi	r18, 0xEC	; 236
    2f22:	30 e0       	ldi	r19, 0x00	; 0
    2f24:	80 e0       	ldi	r24, 0x00	; 0
    2f26:	61 e0       	ldi	r22, 0x01	; 1
    2f28:	a9 01       	movw	r20, r18
    2f2a:	0e 94 6d 22 	call	0x44da	; 0x44da <LCD_displayStringRowColumn>
	delay(5); /* Waiting For 3 Seconds */
    2f2e:	85 e0       	ldi	r24, 0x05	; 5
    2f30:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>

	/* Door locking */
	LCD_clearScreen();
    2f34:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_displayStringRowColumn(0, 1, "Door Locking");
    2f38:	29 ef       	ldi	r18, 0xF9	; 249
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	80 e0       	ldi	r24, 0x00	; 0
    2f3e:	61 e0       	ldi	r22, 0x01	; 1
    2f40:	a9 01       	movw	r20, r18
    2f42:	0e 94 6d 22 	call	0x44da	; 0x44da <LCD_displayStringRowColumn>
	delay(15); /* Waiting For 15 Seconds */
    2f46:	8f e0       	ldi	r24, 0x0F	; 15
    2f48:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
}
    2f4c:	2e 96       	adiw	r28, 0x0e	; 14
    2f4e:	0f b6       	in	r0, 0x3f	; 63
    2f50:	f8 94       	cli
    2f52:	de bf       	out	0x3e, r29	; 62
    2f54:	0f be       	out	0x3f, r0	; 63
    2f56:	cd bf       	out	0x3d, r28	; 61
    2f58:	cf 91       	pop	r28
    2f5a:	df 91       	pop	r29
    2f5c:	08 95       	ret

00002f5e <change_pass>:

void change_pass(void){
    2f5e:	df 93       	push	r29
    2f60:	cf 93       	push	r28
    2f62:	cd b7       	in	r28, 0x3d	; 61
    2f64:	de b7       	in	r29, 0x3e	; 62

	creat_pass();//re-call creat new password function
    2f66:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <creat_pass>

}
    2f6a:	cf 91       	pop	r28
    2f6c:	df 91       	pop	r29
    2f6e:	08 95       	ret

00002f70 <Error_display>:
void Error_display(void){
    2f70:	df 93       	push	r29
    2f72:	cf 93       	push	r28
    2f74:	cd b7       	in	r28, 0x3d	; 61
    2f76:	de b7       	in	r29, 0x3e	; 62
    2f78:	60 97       	sbiw	r28, 0x10	; 16
    2f7a:	0f b6       	in	r0, 0x3f	; 63
    2f7c:	f8 94       	cli
    2f7e:	de bf       	out	0x3e, r29	; 62
    2f80:	0f be       	out	0x3f, r0	; 63
    2f82:	cd bf       	out	0x3d, r28	; 61
	/************* send ERROR to the Control_ECU to Turn ON the Buzzer ***********/
	UART_sendByte(ERROR);
    2f84:	86 e0       	ldi	r24, 0x06	; 6
    2f86:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
    2f8a:	80 e0       	ldi	r24, 0x00	; 0
    2f8c:	90 e0       	ldi	r25, 0x00	; 0
    2f8e:	a0 e2       	ldi	r26, 0x20	; 32
    2f90:	b1 e4       	ldi	r27, 0x41	; 65
    2f92:	8b 87       	std	Y+11, r24	; 0x0b
    2f94:	9c 87       	std	Y+12, r25	; 0x0c
    2f96:	ad 87       	std	Y+13, r26	; 0x0d
    2f98:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    2f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    2f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fa2:	20 e0       	ldi	r18, 0x00	; 0
    2fa4:	30 e0       	ldi	r19, 0x00	; 0
    2fa6:	4a ef       	ldi	r20, 0xFA	; 250
    2fa8:	54 e4       	ldi	r21, 0x44	; 68
    2faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fae:	dc 01       	movw	r26, r24
    2fb0:	cb 01       	movw	r24, r22
    2fb2:	8f 83       	std	Y+7, r24	; 0x07
    2fb4:	98 87       	std	Y+8, r25	; 0x08
    2fb6:	a9 87       	std	Y+9, r26	; 0x09
    2fb8:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2fba:	6f 81       	ldd	r22, Y+7	; 0x07
    2fbc:	78 85       	ldd	r23, Y+8	; 0x08
    2fbe:	89 85       	ldd	r24, Y+9	; 0x09
    2fc0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fc2:	20 e0       	ldi	r18, 0x00	; 0
    2fc4:	30 e0       	ldi	r19, 0x00	; 0
    2fc6:	40 e8       	ldi	r20, 0x80	; 128
    2fc8:	5f e3       	ldi	r21, 0x3F	; 63
    2fca:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2fce:	88 23       	and	r24, r24
    2fd0:	2c f4       	brge	.+10     	; 0x2fdc <Error_display+0x6c>
		__ticks = 1;
    2fd2:	81 e0       	ldi	r24, 0x01	; 1
    2fd4:	90 e0       	ldi	r25, 0x00	; 0
    2fd6:	9e 83       	std	Y+6, r25	; 0x06
    2fd8:	8d 83       	std	Y+5, r24	; 0x05
    2fda:	3f c0       	rjmp	.+126    	; 0x305a <Error_display+0xea>
	else if (__tmp > 65535)
    2fdc:	6f 81       	ldd	r22, Y+7	; 0x07
    2fde:	78 85       	ldd	r23, Y+8	; 0x08
    2fe0:	89 85       	ldd	r24, Y+9	; 0x09
    2fe2:	9a 85       	ldd	r25, Y+10	; 0x0a
    2fe4:	20 e0       	ldi	r18, 0x00	; 0
    2fe6:	3f ef       	ldi	r19, 0xFF	; 255
    2fe8:	4f e7       	ldi	r20, 0x7F	; 127
    2fea:	57 e4       	ldi	r21, 0x47	; 71
    2fec:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2ff0:	18 16       	cp	r1, r24
    2ff2:	4c f5       	brge	.+82     	; 0x3046 <Error_display+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2ff4:	6b 85       	ldd	r22, Y+11	; 0x0b
    2ff6:	7c 85       	ldd	r23, Y+12	; 0x0c
    2ff8:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ffa:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ffc:	20 e0       	ldi	r18, 0x00	; 0
    2ffe:	30 e0       	ldi	r19, 0x00	; 0
    3000:	40 e2       	ldi	r20, 0x20	; 32
    3002:	51 e4       	ldi	r21, 0x41	; 65
    3004:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3008:	dc 01       	movw	r26, r24
    300a:	cb 01       	movw	r24, r22
    300c:	bc 01       	movw	r22, r24
    300e:	cd 01       	movw	r24, r26
    3010:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3014:	dc 01       	movw	r26, r24
    3016:	cb 01       	movw	r24, r22
    3018:	9e 83       	std	Y+6, r25	; 0x06
    301a:	8d 83       	std	Y+5, r24	; 0x05
    301c:	0f c0       	rjmp	.+30     	; 0x303c <Error_display+0xcc>
    301e:	88 ec       	ldi	r24, 0xC8	; 200
    3020:	90 e0       	ldi	r25, 0x00	; 0
    3022:	9c 83       	std	Y+4, r25	; 0x04
    3024:	8b 83       	std	Y+3, r24	; 0x03
    3026:	8b 81       	ldd	r24, Y+3	; 0x03
    3028:	9c 81       	ldd	r25, Y+4	; 0x04
    302a:	01 97       	sbiw	r24, 0x01	; 1
    302c:	f1 f7       	brne	.-4      	; 0x302a <Error_display+0xba>
    302e:	9c 83       	std	Y+4, r25	; 0x04
    3030:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3032:	8d 81       	ldd	r24, Y+5	; 0x05
    3034:	9e 81       	ldd	r25, Y+6	; 0x06
    3036:	01 97       	sbiw	r24, 0x01	; 1
    3038:	9e 83       	std	Y+6, r25	; 0x06
    303a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    303c:	8d 81       	ldd	r24, Y+5	; 0x05
    303e:	9e 81       	ldd	r25, Y+6	; 0x06
    3040:	00 97       	sbiw	r24, 0x00	; 0
    3042:	69 f7       	brne	.-38     	; 0x301e <Error_display+0xae>
    3044:	14 c0       	rjmp	.+40     	; 0x306e <Error_display+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3046:	6f 81       	ldd	r22, Y+7	; 0x07
    3048:	78 85       	ldd	r23, Y+8	; 0x08
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	9a 85       	ldd	r25, Y+10	; 0x0a
    304e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3052:	dc 01       	movw	r26, r24
    3054:	cb 01       	movw	r24, r22
    3056:	9e 83       	std	Y+6, r25	; 0x06
    3058:	8d 83       	std	Y+5, r24	; 0x05
    305a:	8d 81       	ldd	r24, Y+5	; 0x05
    305c:	9e 81       	ldd	r25, Y+6	; 0x06
    305e:	9a 83       	std	Y+2, r25	; 0x02
    3060:	89 83       	std	Y+1, r24	; 0x01
    3062:	89 81       	ldd	r24, Y+1	; 0x01
    3064:	9a 81       	ldd	r25, Y+2	; 0x02
    3066:	01 97       	sbiw	r24, 0x01	; 1
    3068:	f1 f7       	brne	.-4      	; 0x3066 <Error_display+0xf6>
    306a:	9a 83       	std	Y+2, r25	; 0x02
    306c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
	LCD_clearScreen();
    306e:	0e 94 a9 22 	call	0x4552	; 0x4552 <LCD_clearScreen>
	LCD_moveCursor(0,0);
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	60 e0       	ldi	r22, 0x00	; 0
    3076:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("SYSTEM IS LOCKED");
    307a:	86 e0       	ldi	r24, 0x06	; 6
    307c:	91 e0       	ldi	r25, 0x01	; 1
    307e:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
	LCD_moveCursor(1,0);
    3082:	81 e0       	ldi	r24, 0x01	; 1
    3084:	60 e0       	ldi	r22, 0x00	; 0
    3086:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString("for :");
    308a:	87 e1       	ldi	r24, 0x17	; 23
    308c:	91 e0       	ldi	r25, 0x01	; 1
    308e:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>

	//count down 60 seconds delay
	for(int i=10;i>=0;i--){
    3092:	8a e0       	ldi	r24, 0x0A	; 10
    3094:	90 e0       	ldi	r25, 0x00	; 0
    3096:	98 8b       	std	Y+16, r25	; 0x10
    3098:	8f 87       	std	Y+15, r24	; 0x0f
    309a:	14 c0       	rjmp	.+40     	; 0x30c4 <Error_display+0x154>

		LCD_moveCursor(1,7);
    309c:	81 e0       	ldi	r24, 0x01	; 1
    309e:	67 e0       	ldi	r22, 0x07	; 7
    30a0:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
		LCD_intgerToString(i);
    30a4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30a6:	98 89       	ldd	r25, Y+16	; 0x10
    30a8:	0e 94 86 22 	call	0x450c	; 0x450c <LCD_intgerToString>
		LCD_displayString(" ");
    30ac:	8d e1       	ldi	r24, 0x1D	; 29
    30ae:	91 e0       	ldi	r25, 0x01	; 1
    30b0:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
		delay(1);
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
	LCD_displayString("SYSTEM IS LOCKED");
	LCD_moveCursor(1,0);
	LCD_displayString("for :");

	//count down 60 seconds delay
	for(int i=10;i>=0;i--){
    30ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    30bc:	98 89       	ldd	r25, Y+16	; 0x10
    30be:	01 97       	sbiw	r24, 0x01	; 1
    30c0:	98 8b       	std	Y+16, r25	; 0x10
    30c2:	8f 87       	std	Y+15, r24	; 0x0f
    30c4:	8f 85       	ldd	r24, Y+15	; 0x0f
    30c6:	98 89       	ldd	r25, Y+16	; 0x10
    30c8:	99 23       	and	r25, r25
    30ca:	44 f7       	brge	.-48     	; 0x309c <Error_display+0x12c>
		LCD_intgerToString(i);
		LCD_displayString(" ");
		delay(1);

	}
}
    30cc:	60 96       	adiw	r28, 0x10	; 16
    30ce:	0f b6       	in	r0, 0x3f	; 63
    30d0:	f8 94       	cli
    30d2:	de bf       	out	0x3e, r29	; 62
    30d4:	0f be       	out	0x3f, r0	; 63
    30d6:	cd bf       	out	0x3d, r28	; 61
    30d8:	cf 91       	pop	r28
    30da:	df 91       	pop	r29
    30dc:	08 95       	ret

000030de <main>:


int main(void){
    30de:	df 93       	push	r29
    30e0:	cf 93       	push	r28
    30e2:	cd b7       	in	r28, 0x3d	; 61
    30e4:	de b7       	in	r29, 0x3e	; 62
    30e6:	2c 97       	sbiw	r28, 0x0c	; 12
    30e8:	0f b6       	in	r0, 0x3f	; 63
    30ea:	f8 94       	cli
    30ec:	de bf       	out	0x3e, r29	; 62
    30ee:	0f be       	out	0x3f, r0	; 63
    30f0:	cd bf       	out	0x3d, r28	; 61

	SREG |= (1<<7); /* Enable global interrupts in MC */
    30f2:	af e5       	ldi	r26, 0x5F	; 95
    30f4:	b0 e0       	ldi	r27, 0x00	; 0
    30f6:	ef e5       	ldi	r30, 0x5F	; 95
    30f8:	f0 e0       	ldi	r31, 0x00	; 0
    30fa:	80 81       	ld	r24, Z
    30fc:	80 68       	ori	r24, 0x80	; 128
    30fe:	8c 93       	st	X, r24
	LCD_init();
    3100:	0e 94 88 1d 	call	0x3b10	; 0x3b10 <LCD_init>
	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
    3104:	83 ea       	ldi	r24, 0xA3	; 163
    3106:	95 e0       	ldi	r25, 0x05	; 5
    3108:	0e 94 bc 23 	call	0x4778	; 0x4778 <Timer1_setCallBack>
	UART_configType  configurations ={eight_bits,disable,one_bit,9600};
    310c:	ce 01       	movw	r24, r28
    310e:	01 96       	adiw	r24, 0x01	; 1
    3110:	99 87       	std	Y+9, r25	; 0x09
    3112:	88 87       	std	Y+8, r24	; 0x08
    3114:	ee e2       	ldi	r30, 0x2E	; 46
    3116:	f1 e0       	ldi	r31, 0x01	; 1
    3118:	fb 87       	std	Y+11, r31	; 0x0b
    311a:	ea 87       	std	Y+10, r30	; 0x0a
    311c:	f7 e0       	ldi	r31, 0x07	; 7
    311e:	fc 87       	std	Y+12, r31	; 0x0c
    3120:	ea 85       	ldd	r30, Y+10	; 0x0a
    3122:	fb 85       	ldd	r31, Y+11	; 0x0b
    3124:	00 80       	ld	r0, Z
    3126:	8a 85       	ldd	r24, Y+10	; 0x0a
    3128:	9b 85       	ldd	r25, Y+11	; 0x0b
    312a:	01 96       	adiw	r24, 0x01	; 1
    312c:	9b 87       	std	Y+11, r25	; 0x0b
    312e:	8a 87       	std	Y+10, r24	; 0x0a
    3130:	e8 85       	ldd	r30, Y+8	; 0x08
    3132:	f9 85       	ldd	r31, Y+9	; 0x09
    3134:	00 82       	st	Z, r0
    3136:	88 85       	ldd	r24, Y+8	; 0x08
    3138:	99 85       	ldd	r25, Y+9	; 0x09
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	99 87       	std	Y+9, r25	; 0x09
    313e:	88 87       	std	Y+8, r24	; 0x08
    3140:	9c 85       	ldd	r25, Y+12	; 0x0c
    3142:	91 50       	subi	r25, 0x01	; 1
    3144:	9c 87       	std	Y+12, r25	; 0x0c
    3146:	ec 85       	ldd	r30, Y+12	; 0x0c
    3148:	ee 23       	and	r30, r30
    314a:	51 f7       	brne	.-44     	; 0x3120 <main+0x42>
	UART_init(&configurations);
    314c:	ce 01       	movw	r24, r28
    314e:	01 96       	adiw	r24, 0x01	; 1
    3150:	0e 94 ce 23 	call	0x479c	; 0x479c <UART_init>
	UART_recieveByte(); /* Waiting For MCU2 To be Ready */
    3154:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_recieveByte>

	while(1){

		creat_pass();
    3158:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <creat_pass>
    315c:	02 c0       	rjmp	.+4      	; 0x3162 <main+0x84>
		while(flagg==1){reenter_pass();}
    315e:	0e 94 43 0e 	call	0x1c86	; 0x1c86 <reenter_pass>
    3162:	80 91 38 01 	lds	r24, 0x0138
    3166:	81 30       	cpi	r24, 0x01	; 1
    3168:	d1 f3       	breq	.-12     	; 0x315e <main+0x80>
    316a:	f6 cf       	rjmp	.-20     	; 0x3158 <main+0x7a>

0000316c <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    316c:	df 93       	push	r29
    316e:	cf 93       	push	r28
    3170:	00 d0       	rcall	.+0      	; 0x3172 <GPIO_setupPinDirection+0x6>
    3172:	00 d0       	rcall	.+0      	; 0x3174 <GPIO_setupPinDirection+0x8>
    3174:	0f 92       	push	r0
    3176:	cd b7       	in	r28, 0x3d	; 61
    3178:	de b7       	in	r29, 0x3e	; 62
    317a:	89 83       	std	Y+1, r24	; 0x01
    317c:	6a 83       	std	Y+2, r22	; 0x02
    317e:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3180:	8a 81       	ldd	r24, Y+2	; 0x02
    3182:	88 30       	cpi	r24, 0x08	; 8
    3184:	08 f0       	brcs	.+2      	; 0x3188 <GPIO_setupPinDirection+0x1c>
    3186:	d5 c0       	rjmp	.+426    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
    3188:	89 81       	ldd	r24, Y+1	; 0x01
    318a:	84 30       	cpi	r24, 0x04	; 4
    318c:	08 f0       	brcs	.+2      	; 0x3190 <GPIO_setupPinDirection+0x24>
    318e:	d1 c0       	rjmp	.+418    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    3190:	89 81       	ldd	r24, Y+1	; 0x01
    3192:	28 2f       	mov	r18, r24
    3194:	30 e0       	ldi	r19, 0x00	; 0
    3196:	3d 83       	std	Y+5, r19	; 0x05
    3198:	2c 83       	std	Y+4, r18	; 0x04
    319a:	8c 81       	ldd	r24, Y+4	; 0x04
    319c:	9d 81       	ldd	r25, Y+5	; 0x05
    319e:	81 30       	cpi	r24, 0x01	; 1
    31a0:	91 05       	cpc	r25, r1
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <GPIO_setupPinDirection+0x3a>
    31a4:	43 c0       	rjmp	.+134    	; 0x322c <GPIO_setupPinDirection+0xc0>
    31a6:	2c 81       	ldd	r18, Y+4	; 0x04
    31a8:	3d 81       	ldd	r19, Y+5	; 0x05
    31aa:	22 30       	cpi	r18, 0x02	; 2
    31ac:	31 05       	cpc	r19, r1
    31ae:	2c f4       	brge	.+10     	; 0x31ba <GPIO_setupPinDirection+0x4e>
    31b0:	8c 81       	ldd	r24, Y+4	; 0x04
    31b2:	9d 81       	ldd	r25, Y+5	; 0x05
    31b4:	00 97       	sbiw	r24, 0x00	; 0
    31b6:	71 f0       	breq	.+28     	; 0x31d4 <GPIO_setupPinDirection+0x68>
    31b8:	bc c0       	rjmp	.+376    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
    31ba:	2c 81       	ldd	r18, Y+4	; 0x04
    31bc:	3d 81       	ldd	r19, Y+5	; 0x05
    31be:	22 30       	cpi	r18, 0x02	; 2
    31c0:	31 05       	cpc	r19, r1
    31c2:	09 f4       	brne	.+2      	; 0x31c6 <GPIO_setupPinDirection+0x5a>
    31c4:	5f c0       	rjmp	.+190    	; 0x3284 <GPIO_setupPinDirection+0x118>
    31c6:	8c 81       	ldd	r24, Y+4	; 0x04
    31c8:	9d 81       	ldd	r25, Y+5	; 0x05
    31ca:	83 30       	cpi	r24, 0x03	; 3
    31cc:	91 05       	cpc	r25, r1
    31ce:	09 f4       	brne	.+2      	; 0x31d2 <GPIO_setupPinDirection+0x66>
    31d0:	85 c0       	rjmp	.+266    	; 0x32dc <GPIO_setupPinDirection+0x170>
    31d2:	af c0       	rjmp	.+350    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    31d4:	8b 81       	ldd	r24, Y+3	; 0x03
    31d6:	81 30       	cpi	r24, 0x01	; 1
    31d8:	a1 f4       	brne	.+40     	; 0x3202 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    31da:	aa e3       	ldi	r26, 0x3A	; 58
    31dc:	b0 e0       	ldi	r27, 0x00	; 0
    31de:	ea e3       	ldi	r30, 0x3A	; 58
    31e0:	f0 e0       	ldi	r31, 0x00	; 0
    31e2:	80 81       	ld	r24, Z
    31e4:	48 2f       	mov	r20, r24
    31e6:	8a 81       	ldd	r24, Y+2	; 0x02
    31e8:	28 2f       	mov	r18, r24
    31ea:	30 e0       	ldi	r19, 0x00	; 0
    31ec:	81 e0       	ldi	r24, 0x01	; 1
    31ee:	90 e0       	ldi	r25, 0x00	; 0
    31f0:	02 2e       	mov	r0, r18
    31f2:	02 c0       	rjmp	.+4      	; 0x31f8 <GPIO_setupPinDirection+0x8c>
    31f4:	88 0f       	add	r24, r24
    31f6:	99 1f       	adc	r25, r25
    31f8:	0a 94       	dec	r0
    31fa:	e2 f7       	brpl	.-8      	; 0x31f4 <GPIO_setupPinDirection+0x88>
    31fc:	84 2b       	or	r24, r20
    31fe:	8c 93       	st	X, r24
    3200:	98 c0       	rjmp	.+304    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    3202:	aa e3       	ldi	r26, 0x3A	; 58
    3204:	b0 e0       	ldi	r27, 0x00	; 0
    3206:	ea e3       	ldi	r30, 0x3A	; 58
    3208:	f0 e0       	ldi	r31, 0x00	; 0
    320a:	80 81       	ld	r24, Z
    320c:	48 2f       	mov	r20, r24
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	28 2f       	mov	r18, r24
    3212:	30 e0       	ldi	r19, 0x00	; 0
    3214:	81 e0       	ldi	r24, 0x01	; 1
    3216:	90 e0       	ldi	r25, 0x00	; 0
    3218:	02 2e       	mov	r0, r18
    321a:	02 c0       	rjmp	.+4      	; 0x3220 <GPIO_setupPinDirection+0xb4>
    321c:	88 0f       	add	r24, r24
    321e:	99 1f       	adc	r25, r25
    3220:	0a 94       	dec	r0
    3222:	e2 f7       	brpl	.-8      	; 0x321c <GPIO_setupPinDirection+0xb0>
    3224:	80 95       	com	r24
    3226:	84 23       	and	r24, r20
    3228:	8c 93       	st	X, r24
    322a:	83 c0       	rjmp	.+262    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    322c:	8b 81       	ldd	r24, Y+3	; 0x03
    322e:	81 30       	cpi	r24, 0x01	; 1
    3230:	a1 f4       	brne	.+40     	; 0x325a <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    3232:	a7 e3       	ldi	r26, 0x37	; 55
    3234:	b0 e0       	ldi	r27, 0x00	; 0
    3236:	e7 e3       	ldi	r30, 0x37	; 55
    3238:	f0 e0       	ldi	r31, 0x00	; 0
    323a:	80 81       	ld	r24, Z
    323c:	48 2f       	mov	r20, r24
    323e:	8a 81       	ldd	r24, Y+2	; 0x02
    3240:	28 2f       	mov	r18, r24
    3242:	30 e0       	ldi	r19, 0x00	; 0
    3244:	81 e0       	ldi	r24, 0x01	; 1
    3246:	90 e0       	ldi	r25, 0x00	; 0
    3248:	02 2e       	mov	r0, r18
    324a:	02 c0       	rjmp	.+4      	; 0x3250 <GPIO_setupPinDirection+0xe4>
    324c:	88 0f       	add	r24, r24
    324e:	99 1f       	adc	r25, r25
    3250:	0a 94       	dec	r0
    3252:	e2 f7       	brpl	.-8      	; 0x324c <GPIO_setupPinDirection+0xe0>
    3254:	84 2b       	or	r24, r20
    3256:	8c 93       	st	X, r24
    3258:	6c c0       	rjmp	.+216    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    325a:	a7 e3       	ldi	r26, 0x37	; 55
    325c:	b0 e0       	ldi	r27, 0x00	; 0
    325e:	e7 e3       	ldi	r30, 0x37	; 55
    3260:	f0 e0       	ldi	r31, 0x00	; 0
    3262:	80 81       	ld	r24, Z
    3264:	48 2f       	mov	r20, r24
    3266:	8a 81       	ldd	r24, Y+2	; 0x02
    3268:	28 2f       	mov	r18, r24
    326a:	30 e0       	ldi	r19, 0x00	; 0
    326c:	81 e0       	ldi	r24, 0x01	; 1
    326e:	90 e0       	ldi	r25, 0x00	; 0
    3270:	02 2e       	mov	r0, r18
    3272:	02 c0       	rjmp	.+4      	; 0x3278 <GPIO_setupPinDirection+0x10c>
    3274:	88 0f       	add	r24, r24
    3276:	99 1f       	adc	r25, r25
    3278:	0a 94       	dec	r0
    327a:	e2 f7       	brpl	.-8      	; 0x3274 <GPIO_setupPinDirection+0x108>
    327c:	80 95       	com	r24
    327e:	84 23       	and	r24, r20
    3280:	8c 93       	st	X, r24
    3282:	57 c0       	rjmp	.+174    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    3284:	8b 81       	ldd	r24, Y+3	; 0x03
    3286:	81 30       	cpi	r24, 0x01	; 1
    3288:	a1 f4       	brne	.+40     	; 0x32b2 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    328a:	a4 e3       	ldi	r26, 0x34	; 52
    328c:	b0 e0       	ldi	r27, 0x00	; 0
    328e:	e4 e3       	ldi	r30, 0x34	; 52
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	48 2f       	mov	r20, r24
    3296:	8a 81       	ldd	r24, Y+2	; 0x02
    3298:	28 2f       	mov	r18, r24
    329a:	30 e0       	ldi	r19, 0x00	; 0
    329c:	81 e0       	ldi	r24, 0x01	; 1
    329e:	90 e0       	ldi	r25, 0x00	; 0
    32a0:	02 2e       	mov	r0, r18
    32a2:	02 c0       	rjmp	.+4      	; 0x32a8 <GPIO_setupPinDirection+0x13c>
    32a4:	88 0f       	add	r24, r24
    32a6:	99 1f       	adc	r25, r25
    32a8:	0a 94       	dec	r0
    32aa:	e2 f7       	brpl	.-8      	; 0x32a4 <GPIO_setupPinDirection+0x138>
    32ac:	84 2b       	or	r24, r20
    32ae:	8c 93       	st	X, r24
    32b0:	40 c0       	rjmp	.+128    	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    32b2:	a4 e3       	ldi	r26, 0x34	; 52
    32b4:	b0 e0       	ldi	r27, 0x00	; 0
    32b6:	e4 e3       	ldi	r30, 0x34	; 52
    32b8:	f0 e0       	ldi	r31, 0x00	; 0
    32ba:	80 81       	ld	r24, Z
    32bc:	48 2f       	mov	r20, r24
    32be:	8a 81       	ldd	r24, Y+2	; 0x02
    32c0:	28 2f       	mov	r18, r24
    32c2:	30 e0       	ldi	r19, 0x00	; 0
    32c4:	81 e0       	ldi	r24, 0x01	; 1
    32c6:	90 e0       	ldi	r25, 0x00	; 0
    32c8:	02 2e       	mov	r0, r18
    32ca:	02 c0       	rjmp	.+4      	; 0x32d0 <GPIO_setupPinDirection+0x164>
    32cc:	88 0f       	add	r24, r24
    32ce:	99 1f       	adc	r25, r25
    32d0:	0a 94       	dec	r0
    32d2:	e2 f7       	brpl	.-8      	; 0x32cc <GPIO_setupPinDirection+0x160>
    32d4:	80 95       	com	r24
    32d6:	84 23       	and	r24, r20
    32d8:	8c 93       	st	X, r24
    32da:	2b c0       	rjmp	.+86     	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    32dc:	8b 81       	ldd	r24, Y+3	; 0x03
    32de:	81 30       	cpi	r24, 0x01	; 1
    32e0:	a1 f4       	brne	.+40     	; 0x330a <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    32e2:	a1 e3       	ldi	r26, 0x31	; 49
    32e4:	b0 e0       	ldi	r27, 0x00	; 0
    32e6:	e1 e3       	ldi	r30, 0x31	; 49
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	80 81       	ld	r24, Z
    32ec:	48 2f       	mov	r20, r24
    32ee:	8a 81       	ldd	r24, Y+2	; 0x02
    32f0:	28 2f       	mov	r18, r24
    32f2:	30 e0       	ldi	r19, 0x00	; 0
    32f4:	81 e0       	ldi	r24, 0x01	; 1
    32f6:	90 e0       	ldi	r25, 0x00	; 0
    32f8:	02 2e       	mov	r0, r18
    32fa:	02 c0       	rjmp	.+4      	; 0x3300 <GPIO_setupPinDirection+0x194>
    32fc:	88 0f       	add	r24, r24
    32fe:	99 1f       	adc	r25, r25
    3300:	0a 94       	dec	r0
    3302:	e2 f7       	brpl	.-8      	; 0x32fc <GPIO_setupPinDirection+0x190>
    3304:	84 2b       	or	r24, r20
    3306:	8c 93       	st	X, r24
    3308:	14 c0       	rjmp	.+40     	; 0x3332 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    330a:	a1 e3       	ldi	r26, 0x31	; 49
    330c:	b0 e0       	ldi	r27, 0x00	; 0
    330e:	e1 e3       	ldi	r30, 0x31	; 49
    3310:	f0 e0       	ldi	r31, 0x00	; 0
    3312:	80 81       	ld	r24, Z
    3314:	48 2f       	mov	r20, r24
    3316:	8a 81       	ldd	r24, Y+2	; 0x02
    3318:	28 2f       	mov	r18, r24
    331a:	30 e0       	ldi	r19, 0x00	; 0
    331c:	81 e0       	ldi	r24, 0x01	; 1
    331e:	90 e0       	ldi	r25, 0x00	; 0
    3320:	02 2e       	mov	r0, r18
    3322:	02 c0       	rjmp	.+4      	; 0x3328 <GPIO_setupPinDirection+0x1bc>
    3324:	88 0f       	add	r24, r24
    3326:	99 1f       	adc	r25, r25
    3328:	0a 94       	dec	r0
    332a:	e2 f7       	brpl	.-8      	; 0x3324 <GPIO_setupPinDirection+0x1b8>
    332c:	80 95       	com	r24
    332e:	84 23       	and	r24, r20
    3330:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3332:	0f 90       	pop	r0
    3334:	0f 90       	pop	r0
    3336:	0f 90       	pop	r0
    3338:	0f 90       	pop	r0
    333a:	0f 90       	pop	r0
    333c:	cf 91       	pop	r28
    333e:	df 91       	pop	r29
    3340:	08 95       	ret

00003342 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    3342:	df 93       	push	r29
    3344:	cf 93       	push	r28
    3346:	00 d0       	rcall	.+0      	; 0x3348 <GPIO_writePin+0x6>
    3348:	00 d0       	rcall	.+0      	; 0x334a <GPIO_writePin+0x8>
    334a:	0f 92       	push	r0
    334c:	cd b7       	in	r28, 0x3d	; 61
    334e:	de b7       	in	r29, 0x3e	; 62
    3350:	89 83       	std	Y+1, r24	; 0x01
    3352:	6a 83       	std	Y+2, r22	; 0x02
    3354:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    3356:	8a 81       	ldd	r24, Y+2	; 0x02
    3358:	88 30       	cpi	r24, 0x08	; 8
    335a:	08 f0       	brcs	.+2      	; 0x335e <GPIO_writePin+0x1c>
    335c:	d5 c0       	rjmp	.+426    	; 0x3508 <GPIO_writePin+0x1c6>
    335e:	89 81       	ldd	r24, Y+1	; 0x01
    3360:	84 30       	cpi	r24, 0x04	; 4
    3362:	08 f0       	brcs	.+2      	; 0x3366 <GPIO_writePin+0x24>
    3364:	d1 c0       	rjmp	.+418    	; 0x3508 <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    3366:	89 81       	ldd	r24, Y+1	; 0x01
    3368:	28 2f       	mov	r18, r24
    336a:	30 e0       	ldi	r19, 0x00	; 0
    336c:	3d 83       	std	Y+5, r19	; 0x05
    336e:	2c 83       	std	Y+4, r18	; 0x04
    3370:	8c 81       	ldd	r24, Y+4	; 0x04
    3372:	9d 81       	ldd	r25, Y+5	; 0x05
    3374:	81 30       	cpi	r24, 0x01	; 1
    3376:	91 05       	cpc	r25, r1
    3378:	09 f4       	brne	.+2      	; 0x337c <GPIO_writePin+0x3a>
    337a:	43 c0       	rjmp	.+134    	; 0x3402 <GPIO_writePin+0xc0>
    337c:	2c 81       	ldd	r18, Y+4	; 0x04
    337e:	3d 81       	ldd	r19, Y+5	; 0x05
    3380:	22 30       	cpi	r18, 0x02	; 2
    3382:	31 05       	cpc	r19, r1
    3384:	2c f4       	brge	.+10     	; 0x3390 <GPIO_writePin+0x4e>
    3386:	8c 81       	ldd	r24, Y+4	; 0x04
    3388:	9d 81       	ldd	r25, Y+5	; 0x05
    338a:	00 97       	sbiw	r24, 0x00	; 0
    338c:	71 f0       	breq	.+28     	; 0x33aa <GPIO_writePin+0x68>
    338e:	bc c0       	rjmp	.+376    	; 0x3508 <GPIO_writePin+0x1c6>
    3390:	2c 81       	ldd	r18, Y+4	; 0x04
    3392:	3d 81       	ldd	r19, Y+5	; 0x05
    3394:	22 30       	cpi	r18, 0x02	; 2
    3396:	31 05       	cpc	r19, r1
    3398:	09 f4       	brne	.+2      	; 0x339c <GPIO_writePin+0x5a>
    339a:	5f c0       	rjmp	.+190    	; 0x345a <GPIO_writePin+0x118>
    339c:	8c 81       	ldd	r24, Y+4	; 0x04
    339e:	9d 81       	ldd	r25, Y+5	; 0x05
    33a0:	83 30       	cpi	r24, 0x03	; 3
    33a2:	91 05       	cpc	r25, r1
    33a4:	09 f4       	brne	.+2      	; 0x33a8 <GPIO_writePin+0x66>
    33a6:	85 c0       	rjmp	.+266    	; 0x34b2 <GPIO_writePin+0x170>
    33a8:	af c0       	rjmp	.+350    	; 0x3508 <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    33aa:	8b 81       	ldd	r24, Y+3	; 0x03
    33ac:	81 30       	cpi	r24, 0x01	; 1
    33ae:	a1 f4       	brne	.+40     	; 0x33d8 <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    33b0:	ab e3       	ldi	r26, 0x3B	; 59
    33b2:	b0 e0       	ldi	r27, 0x00	; 0
    33b4:	eb e3       	ldi	r30, 0x3B	; 59
    33b6:	f0 e0       	ldi	r31, 0x00	; 0
    33b8:	80 81       	ld	r24, Z
    33ba:	48 2f       	mov	r20, r24
    33bc:	8a 81       	ldd	r24, Y+2	; 0x02
    33be:	28 2f       	mov	r18, r24
    33c0:	30 e0       	ldi	r19, 0x00	; 0
    33c2:	81 e0       	ldi	r24, 0x01	; 1
    33c4:	90 e0       	ldi	r25, 0x00	; 0
    33c6:	02 2e       	mov	r0, r18
    33c8:	02 c0       	rjmp	.+4      	; 0x33ce <GPIO_writePin+0x8c>
    33ca:	88 0f       	add	r24, r24
    33cc:	99 1f       	adc	r25, r25
    33ce:	0a 94       	dec	r0
    33d0:	e2 f7       	brpl	.-8      	; 0x33ca <GPIO_writePin+0x88>
    33d2:	84 2b       	or	r24, r20
    33d4:	8c 93       	st	X, r24
    33d6:	98 c0       	rjmp	.+304    	; 0x3508 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    33d8:	ab e3       	ldi	r26, 0x3B	; 59
    33da:	b0 e0       	ldi	r27, 0x00	; 0
    33dc:	eb e3       	ldi	r30, 0x3B	; 59
    33de:	f0 e0       	ldi	r31, 0x00	; 0
    33e0:	80 81       	ld	r24, Z
    33e2:	48 2f       	mov	r20, r24
    33e4:	8a 81       	ldd	r24, Y+2	; 0x02
    33e6:	28 2f       	mov	r18, r24
    33e8:	30 e0       	ldi	r19, 0x00	; 0
    33ea:	81 e0       	ldi	r24, 0x01	; 1
    33ec:	90 e0       	ldi	r25, 0x00	; 0
    33ee:	02 2e       	mov	r0, r18
    33f0:	02 c0       	rjmp	.+4      	; 0x33f6 <GPIO_writePin+0xb4>
    33f2:	88 0f       	add	r24, r24
    33f4:	99 1f       	adc	r25, r25
    33f6:	0a 94       	dec	r0
    33f8:	e2 f7       	brpl	.-8      	; 0x33f2 <GPIO_writePin+0xb0>
    33fa:	80 95       	com	r24
    33fc:	84 23       	and	r24, r20
    33fe:	8c 93       	st	X, r24
    3400:	83 c0       	rjmp	.+262    	; 0x3508 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    3402:	8b 81       	ldd	r24, Y+3	; 0x03
    3404:	81 30       	cpi	r24, 0x01	; 1
    3406:	a1 f4       	brne	.+40     	; 0x3430 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    3408:	a8 e3       	ldi	r26, 0x38	; 56
    340a:	b0 e0       	ldi	r27, 0x00	; 0
    340c:	e8 e3       	ldi	r30, 0x38	; 56
    340e:	f0 e0       	ldi	r31, 0x00	; 0
    3410:	80 81       	ld	r24, Z
    3412:	48 2f       	mov	r20, r24
    3414:	8a 81       	ldd	r24, Y+2	; 0x02
    3416:	28 2f       	mov	r18, r24
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	81 e0       	ldi	r24, 0x01	; 1
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	02 2e       	mov	r0, r18
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <GPIO_writePin+0xe4>
    3422:	88 0f       	add	r24, r24
    3424:	99 1f       	adc	r25, r25
    3426:	0a 94       	dec	r0
    3428:	e2 f7       	brpl	.-8      	; 0x3422 <GPIO_writePin+0xe0>
    342a:	84 2b       	or	r24, r20
    342c:	8c 93       	st	X, r24
    342e:	6c c0       	rjmp	.+216    	; 0x3508 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    3430:	a8 e3       	ldi	r26, 0x38	; 56
    3432:	b0 e0       	ldi	r27, 0x00	; 0
    3434:	e8 e3       	ldi	r30, 0x38	; 56
    3436:	f0 e0       	ldi	r31, 0x00	; 0
    3438:	80 81       	ld	r24, Z
    343a:	48 2f       	mov	r20, r24
    343c:	8a 81       	ldd	r24, Y+2	; 0x02
    343e:	28 2f       	mov	r18, r24
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	81 e0       	ldi	r24, 0x01	; 1
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	02 2e       	mov	r0, r18
    3448:	02 c0       	rjmp	.+4      	; 0x344e <GPIO_writePin+0x10c>
    344a:	88 0f       	add	r24, r24
    344c:	99 1f       	adc	r25, r25
    344e:	0a 94       	dec	r0
    3450:	e2 f7       	brpl	.-8      	; 0x344a <GPIO_writePin+0x108>
    3452:	80 95       	com	r24
    3454:	84 23       	and	r24, r20
    3456:	8c 93       	st	X, r24
    3458:	57 c0       	rjmp	.+174    	; 0x3508 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    345a:	8b 81       	ldd	r24, Y+3	; 0x03
    345c:	81 30       	cpi	r24, 0x01	; 1
    345e:	a1 f4       	brne	.+40     	; 0x3488 <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    3460:	a5 e3       	ldi	r26, 0x35	; 53
    3462:	b0 e0       	ldi	r27, 0x00	; 0
    3464:	e5 e3       	ldi	r30, 0x35	; 53
    3466:	f0 e0       	ldi	r31, 0x00	; 0
    3468:	80 81       	ld	r24, Z
    346a:	48 2f       	mov	r20, r24
    346c:	8a 81       	ldd	r24, Y+2	; 0x02
    346e:	28 2f       	mov	r18, r24
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	81 e0       	ldi	r24, 0x01	; 1
    3474:	90 e0       	ldi	r25, 0x00	; 0
    3476:	02 2e       	mov	r0, r18
    3478:	02 c0       	rjmp	.+4      	; 0x347e <GPIO_writePin+0x13c>
    347a:	88 0f       	add	r24, r24
    347c:	99 1f       	adc	r25, r25
    347e:	0a 94       	dec	r0
    3480:	e2 f7       	brpl	.-8      	; 0x347a <GPIO_writePin+0x138>
    3482:	84 2b       	or	r24, r20
    3484:	8c 93       	st	X, r24
    3486:	40 c0       	rjmp	.+128    	; 0x3508 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    3488:	a5 e3       	ldi	r26, 0x35	; 53
    348a:	b0 e0       	ldi	r27, 0x00	; 0
    348c:	e5 e3       	ldi	r30, 0x35	; 53
    348e:	f0 e0       	ldi	r31, 0x00	; 0
    3490:	80 81       	ld	r24, Z
    3492:	48 2f       	mov	r20, r24
    3494:	8a 81       	ldd	r24, Y+2	; 0x02
    3496:	28 2f       	mov	r18, r24
    3498:	30 e0       	ldi	r19, 0x00	; 0
    349a:	81 e0       	ldi	r24, 0x01	; 1
    349c:	90 e0       	ldi	r25, 0x00	; 0
    349e:	02 2e       	mov	r0, r18
    34a0:	02 c0       	rjmp	.+4      	; 0x34a6 <GPIO_writePin+0x164>
    34a2:	88 0f       	add	r24, r24
    34a4:	99 1f       	adc	r25, r25
    34a6:	0a 94       	dec	r0
    34a8:	e2 f7       	brpl	.-8      	; 0x34a2 <GPIO_writePin+0x160>
    34aa:	80 95       	com	r24
    34ac:	84 23       	and	r24, r20
    34ae:	8c 93       	st	X, r24
    34b0:	2b c0       	rjmp	.+86     	; 0x3508 <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    34b2:	8b 81       	ldd	r24, Y+3	; 0x03
    34b4:	81 30       	cpi	r24, 0x01	; 1
    34b6:	a1 f4       	brne	.+40     	; 0x34e0 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    34b8:	a2 e3       	ldi	r26, 0x32	; 50
    34ba:	b0 e0       	ldi	r27, 0x00	; 0
    34bc:	e2 e3       	ldi	r30, 0x32	; 50
    34be:	f0 e0       	ldi	r31, 0x00	; 0
    34c0:	80 81       	ld	r24, Z
    34c2:	48 2f       	mov	r20, r24
    34c4:	8a 81       	ldd	r24, Y+2	; 0x02
    34c6:	28 2f       	mov	r18, r24
    34c8:	30 e0       	ldi	r19, 0x00	; 0
    34ca:	81 e0       	ldi	r24, 0x01	; 1
    34cc:	90 e0       	ldi	r25, 0x00	; 0
    34ce:	02 2e       	mov	r0, r18
    34d0:	02 c0       	rjmp	.+4      	; 0x34d6 <GPIO_writePin+0x194>
    34d2:	88 0f       	add	r24, r24
    34d4:	99 1f       	adc	r25, r25
    34d6:	0a 94       	dec	r0
    34d8:	e2 f7       	brpl	.-8      	; 0x34d2 <GPIO_writePin+0x190>
    34da:	84 2b       	or	r24, r20
    34dc:	8c 93       	st	X, r24
    34de:	14 c0       	rjmp	.+40     	; 0x3508 <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    34e0:	a2 e3       	ldi	r26, 0x32	; 50
    34e2:	b0 e0       	ldi	r27, 0x00	; 0
    34e4:	e2 e3       	ldi	r30, 0x32	; 50
    34e6:	f0 e0       	ldi	r31, 0x00	; 0
    34e8:	80 81       	ld	r24, Z
    34ea:	48 2f       	mov	r20, r24
    34ec:	8a 81       	ldd	r24, Y+2	; 0x02
    34ee:	28 2f       	mov	r18, r24
    34f0:	30 e0       	ldi	r19, 0x00	; 0
    34f2:	81 e0       	ldi	r24, 0x01	; 1
    34f4:	90 e0       	ldi	r25, 0x00	; 0
    34f6:	02 2e       	mov	r0, r18
    34f8:	02 c0       	rjmp	.+4      	; 0x34fe <GPIO_writePin+0x1bc>
    34fa:	88 0f       	add	r24, r24
    34fc:	99 1f       	adc	r25, r25
    34fe:	0a 94       	dec	r0
    3500:	e2 f7       	brpl	.-8      	; 0x34fa <GPIO_writePin+0x1b8>
    3502:	80 95       	com	r24
    3504:	84 23       	and	r24, r20
    3506:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    3508:	0f 90       	pop	r0
    350a:	0f 90       	pop	r0
    350c:	0f 90       	pop	r0
    350e:	0f 90       	pop	r0
    3510:	0f 90       	pop	r0
    3512:	cf 91       	pop	r28
    3514:	df 91       	pop	r29
    3516:	08 95       	ret

00003518 <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    3518:	df 93       	push	r29
    351a:	cf 93       	push	r28
    351c:	00 d0       	rcall	.+0      	; 0x351e <GPIO_readPin+0x6>
    351e:	00 d0       	rcall	.+0      	; 0x3520 <GPIO_readPin+0x8>
    3520:	0f 92       	push	r0
    3522:	cd b7       	in	r28, 0x3d	; 61
    3524:	de b7       	in	r29, 0x3e	; 62
    3526:	8a 83       	std	Y+2, r24	; 0x02
    3528:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    352a:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    352c:	8b 81       	ldd	r24, Y+3	; 0x03
    352e:	88 30       	cpi	r24, 0x08	; 8
    3530:	08 f0       	brcs	.+2      	; 0x3534 <GPIO_readPin+0x1c>
    3532:	84 c0       	rjmp	.+264    	; 0x363c <GPIO_readPin+0x124>
    3534:	8a 81       	ldd	r24, Y+2	; 0x02
    3536:	84 30       	cpi	r24, 0x04	; 4
    3538:	08 f0       	brcs	.+2      	; 0x353c <GPIO_readPin+0x24>
    353a:	80 c0       	rjmp	.+256    	; 0x363c <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	28 2f       	mov	r18, r24
    3540:	30 e0       	ldi	r19, 0x00	; 0
    3542:	3d 83       	std	Y+5, r19	; 0x05
    3544:	2c 83       	std	Y+4, r18	; 0x04
    3546:	4c 81       	ldd	r20, Y+4	; 0x04
    3548:	5d 81       	ldd	r21, Y+5	; 0x05
    354a:	41 30       	cpi	r20, 0x01	; 1
    354c:	51 05       	cpc	r21, r1
    354e:	79 f1       	breq	.+94     	; 0x35ae <GPIO_readPin+0x96>
    3550:	8c 81       	ldd	r24, Y+4	; 0x04
    3552:	9d 81       	ldd	r25, Y+5	; 0x05
    3554:	82 30       	cpi	r24, 0x02	; 2
    3556:	91 05       	cpc	r25, r1
    3558:	34 f4       	brge	.+12     	; 0x3566 <GPIO_readPin+0x4e>
    355a:	2c 81       	ldd	r18, Y+4	; 0x04
    355c:	3d 81       	ldd	r19, Y+5	; 0x05
    355e:	21 15       	cp	r18, r1
    3560:	31 05       	cpc	r19, r1
    3562:	69 f0       	breq	.+26     	; 0x357e <GPIO_readPin+0x66>
    3564:	6b c0       	rjmp	.+214    	; 0x363c <GPIO_readPin+0x124>
    3566:	4c 81       	ldd	r20, Y+4	; 0x04
    3568:	5d 81       	ldd	r21, Y+5	; 0x05
    356a:	42 30       	cpi	r20, 0x02	; 2
    356c:	51 05       	cpc	r21, r1
    356e:	b9 f1       	breq	.+110    	; 0x35de <GPIO_readPin+0xc6>
    3570:	8c 81       	ldd	r24, Y+4	; 0x04
    3572:	9d 81       	ldd	r25, Y+5	; 0x05
    3574:	83 30       	cpi	r24, 0x03	; 3
    3576:	91 05       	cpc	r25, r1
    3578:	09 f4       	brne	.+2      	; 0x357c <GPIO_readPin+0x64>
    357a:	49 c0       	rjmp	.+146    	; 0x360e <GPIO_readPin+0xf6>
    357c:	5f c0       	rjmp	.+190    	; 0x363c <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    357e:	e9 e3       	ldi	r30, 0x39	; 57
    3580:	f0 e0       	ldi	r31, 0x00	; 0
    3582:	80 81       	ld	r24, Z
    3584:	28 2f       	mov	r18, r24
    3586:	30 e0       	ldi	r19, 0x00	; 0
    3588:	8b 81       	ldd	r24, Y+3	; 0x03
    358a:	88 2f       	mov	r24, r24
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	a9 01       	movw	r20, r18
    3590:	02 c0       	rjmp	.+4      	; 0x3596 <GPIO_readPin+0x7e>
    3592:	55 95       	asr	r21
    3594:	47 95       	ror	r20
    3596:	8a 95       	dec	r24
    3598:	e2 f7       	brpl	.-8      	; 0x3592 <GPIO_readPin+0x7a>
    359a:	ca 01       	movw	r24, r20
    359c:	81 70       	andi	r24, 0x01	; 1
    359e:	90 70       	andi	r25, 0x00	; 0
    35a0:	88 23       	and	r24, r24
    35a2:	19 f0       	breq	.+6      	; 0x35aa <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    35a4:	81 e0       	ldi	r24, 0x01	; 1
    35a6:	89 83       	std	Y+1, r24	; 0x01
    35a8:	49 c0       	rjmp	.+146    	; 0x363c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    35aa:	19 82       	std	Y+1, r1	; 0x01
    35ac:	47 c0       	rjmp	.+142    	; 0x363c <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    35ae:	e6 e3       	ldi	r30, 0x36	; 54
    35b0:	f0 e0       	ldi	r31, 0x00	; 0
    35b2:	80 81       	ld	r24, Z
    35b4:	28 2f       	mov	r18, r24
    35b6:	30 e0       	ldi	r19, 0x00	; 0
    35b8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ba:	88 2f       	mov	r24, r24
    35bc:	90 e0       	ldi	r25, 0x00	; 0
    35be:	a9 01       	movw	r20, r18
    35c0:	02 c0       	rjmp	.+4      	; 0x35c6 <GPIO_readPin+0xae>
    35c2:	55 95       	asr	r21
    35c4:	47 95       	ror	r20
    35c6:	8a 95       	dec	r24
    35c8:	e2 f7       	brpl	.-8      	; 0x35c2 <GPIO_readPin+0xaa>
    35ca:	ca 01       	movw	r24, r20
    35cc:	81 70       	andi	r24, 0x01	; 1
    35ce:	90 70       	andi	r25, 0x00	; 0
    35d0:	88 23       	and	r24, r24
    35d2:	19 f0       	breq	.+6      	; 0x35da <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    35d4:	81 e0       	ldi	r24, 0x01	; 1
    35d6:	89 83       	std	Y+1, r24	; 0x01
    35d8:	31 c0       	rjmp	.+98     	; 0x363c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    35da:	19 82       	std	Y+1, r1	; 0x01
    35dc:	2f c0       	rjmp	.+94     	; 0x363c <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    35de:	e3 e3       	ldi	r30, 0x33	; 51
    35e0:	f0 e0       	ldi	r31, 0x00	; 0
    35e2:	80 81       	ld	r24, Z
    35e4:	28 2f       	mov	r18, r24
    35e6:	30 e0       	ldi	r19, 0x00	; 0
    35e8:	8b 81       	ldd	r24, Y+3	; 0x03
    35ea:	88 2f       	mov	r24, r24
    35ec:	90 e0       	ldi	r25, 0x00	; 0
    35ee:	a9 01       	movw	r20, r18
    35f0:	02 c0       	rjmp	.+4      	; 0x35f6 <GPIO_readPin+0xde>
    35f2:	55 95       	asr	r21
    35f4:	47 95       	ror	r20
    35f6:	8a 95       	dec	r24
    35f8:	e2 f7       	brpl	.-8      	; 0x35f2 <GPIO_readPin+0xda>
    35fa:	ca 01       	movw	r24, r20
    35fc:	81 70       	andi	r24, 0x01	; 1
    35fe:	90 70       	andi	r25, 0x00	; 0
    3600:	88 23       	and	r24, r24
    3602:	19 f0       	breq	.+6      	; 0x360a <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    3604:	81 e0       	ldi	r24, 0x01	; 1
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	19 c0       	rjmp	.+50     	; 0x363c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    360a:	19 82       	std	Y+1, r1	; 0x01
    360c:	17 c0       	rjmp	.+46     	; 0x363c <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    360e:	e0 e3       	ldi	r30, 0x30	; 48
    3610:	f0 e0       	ldi	r31, 0x00	; 0
    3612:	80 81       	ld	r24, Z
    3614:	28 2f       	mov	r18, r24
    3616:	30 e0       	ldi	r19, 0x00	; 0
    3618:	8b 81       	ldd	r24, Y+3	; 0x03
    361a:	88 2f       	mov	r24, r24
    361c:	90 e0       	ldi	r25, 0x00	; 0
    361e:	a9 01       	movw	r20, r18
    3620:	02 c0       	rjmp	.+4      	; 0x3626 <GPIO_readPin+0x10e>
    3622:	55 95       	asr	r21
    3624:	47 95       	ror	r20
    3626:	8a 95       	dec	r24
    3628:	e2 f7       	brpl	.-8      	; 0x3622 <GPIO_readPin+0x10a>
    362a:	ca 01       	movw	r24, r20
    362c:	81 70       	andi	r24, 0x01	; 1
    362e:	90 70       	andi	r25, 0x00	; 0
    3630:	88 23       	and	r24, r24
    3632:	19 f0       	breq	.+6      	; 0x363a <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    3634:	81 e0       	ldi	r24, 0x01	; 1
    3636:	89 83       	std	Y+1, r24	; 0x01
    3638:	01 c0       	rjmp	.+2      	; 0x363c <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    363a:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    363c:	89 81       	ldd	r24, Y+1	; 0x01
}
    363e:	0f 90       	pop	r0
    3640:	0f 90       	pop	r0
    3642:	0f 90       	pop	r0
    3644:	0f 90       	pop	r0
    3646:	0f 90       	pop	r0
    3648:	cf 91       	pop	r28
    364a:	df 91       	pop	r29
    364c:	08 95       	ret

0000364e <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    364e:	df 93       	push	r29
    3650:	cf 93       	push	r28
    3652:	00 d0       	rcall	.+0      	; 0x3654 <GPIO_setupPortDirection+0x6>
    3654:	00 d0       	rcall	.+0      	; 0x3656 <GPIO_setupPortDirection+0x8>
    3656:	cd b7       	in	r28, 0x3d	; 61
    3658:	de b7       	in	r29, 0x3e	; 62
    365a:	89 83       	std	Y+1, r24	; 0x01
    365c:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    365e:	89 81       	ldd	r24, Y+1	; 0x01
    3660:	84 30       	cpi	r24, 0x04	; 4
    3662:	90 f5       	brcc	.+100    	; 0x36c8 <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    3664:	89 81       	ldd	r24, Y+1	; 0x01
    3666:	28 2f       	mov	r18, r24
    3668:	30 e0       	ldi	r19, 0x00	; 0
    366a:	3c 83       	std	Y+4, r19	; 0x04
    366c:	2b 83       	std	Y+3, r18	; 0x03
    366e:	8b 81       	ldd	r24, Y+3	; 0x03
    3670:	9c 81       	ldd	r25, Y+4	; 0x04
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	91 05       	cpc	r25, r1
    3676:	d1 f0       	breq	.+52     	; 0x36ac <GPIO_setupPortDirection+0x5e>
    3678:	2b 81       	ldd	r18, Y+3	; 0x03
    367a:	3c 81       	ldd	r19, Y+4	; 0x04
    367c:	22 30       	cpi	r18, 0x02	; 2
    367e:	31 05       	cpc	r19, r1
    3680:	2c f4       	brge	.+10     	; 0x368c <GPIO_setupPortDirection+0x3e>
    3682:	8b 81       	ldd	r24, Y+3	; 0x03
    3684:	9c 81       	ldd	r25, Y+4	; 0x04
    3686:	00 97       	sbiw	r24, 0x00	; 0
    3688:	61 f0       	breq	.+24     	; 0x36a2 <GPIO_setupPortDirection+0x54>
    368a:	1e c0       	rjmp	.+60     	; 0x36c8 <GPIO_setupPortDirection+0x7a>
    368c:	2b 81       	ldd	r18, Y+3	; 0x03
    368e:	3c 81       	ldd	r19, Y+4	; 0x04
    3690:	22 30       	cpi	r18, 0x02	; 2
    3692:	31 05       	cpc	r19, r1
    3694:	81 f0       	breq	.+32     	; 0x36b6 <GPIO_setupPortDirection+0x68>
    3696:	8b 81       	ldd	r24, Y+3	; 0x03
    3698:	9c 81       	ldd	r25, Y+4	; 0x04
    369a:	83 30       	cpi	r24, 0x03	; 3
    369c:	91 05       	cpc	r25, r1
    369e:	81 f0       	breq	.+32     	; 0x36c0 <GPIO_setupPortDirection+0x72>
    36a0:	13 c0       	rjmp	.+38     	; 0x36c8 <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    36a2:	ea e3       	ldi	r30, 0x3A	; 58
    36a4:	f0 e0       	ldi	r31, 0x00	; 0
    36a6:	8a 81       	ldd	r24, Y+2	; 0x02
    36a8:	80 83       	st	Z, r24
    36aa:	0e c0       	rjmp	.+28     	; 0x36c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    36ac:	e7 e3       	ldi	r30, 0x37	; 55
    36ae:	f0 e0       	ldi	r31, 0x00	; 0
    36b0:	8a 81       	ldd	r24, Y+2	; 0x02
    36b2:	80 83       	st	Z, r24
    36b4:	09 c0       	rjmp	.+18     	; 0x36c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    36b6:	e4 e3       	ldi	r30, 0x34	; 52
    36b8:	f0 e0       	ldi	r31, 0x00	; 0
    36ba:	8a 81       	ldd	r24, Y+2	; 0x02
    36bc:	80 83       	st	Z, r24
    36be:	04 c0       	rjmp	.+8      	; 0x36c8 <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    36c0:	e1 e3       	ldi	r30, 0x31	; 49
    36c2:	f0 e0       	ldi	r31, 0x00	; 0
    36c4:	8a 81       	ldd	r24, Y+2	; 0x02
    36c6:	80 83       	st	Z, r24
			break;
		}
	}
}
    36c8:	0f 90       	pop	r0
    36ca:	0f 90       	pop	r0
    36cc:	0f 90       	pop	r0
    36ce:	0f 90       	pop	r0
    36d0:	cf 91       	pop	r28
    36d2:	df 91       	pop	r29
    36d4:	08 95       	ret

000036d6 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    36d6:	df 93       	push	r29
    36d8:	cf 93       	push	r28
    36da:	00 d0       	rcall	.+0      	; 0x36dc <GPIO_writePort+0x6>
    36dc:	00 d0       	rcall	.+0      	; 0x36de <GPIO_writePort+0x8>
    36de:	cd b7       	in	r28, 0x3d	; 61
    36e0:	de b7       	in	r29, 0x3e	; 62
    36e2:	89 83       	std	Y+1, r24	; 0x01
    36e4:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    36e6:	89 81       	ldd	r24, Y+1	; 0x01
    36e8:	84 30       	cpi	r24, 0x04	; 4
    36ea:	90 f5       	brcc	.+100    	; 0x3750 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    36ec:	89 81       	ldd	r24, Y+1	; 0x01
    36ee:	28 2f       	mov	r18, r24
    36f0:	30 e0       	ldi	r19, 0x00	; 0
    36f2:	3c 83       	std	Y+4, r19	; 0x04
    36f4:	2b 83       	std	Y+3, r18	; 0x03
    36f6:	8b 81       	ldd	r24, Y+3	; 0x03
    36f8:	9c 81       	ldd	r25, Y+4	; 0x04
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	91 05       	cpc	r25, r1
    36fe:	d1 f0       	breq	.+52     	; 0x3734 <GPIO_writePort+0x5e>
    3700:	2b 81       	ldd	r18, Y+3	; 0x03
    3702:	3c 81       	ldd	r19, Y+4	; 0x04
    3704:	22 30       	cpi	r18, 0x02	; 2
    3706:	31 05       	cpc	r19, r1
    3708:	2c f4       	brge	.+10     	; 0x3714 <GPIO_writePort+0x3e>
    370a:	8b 81       	ldd	r24, Y+3	; 0x03
    370c:	9c 81       	ldd	r25, Y+4	; 0x04
    370e:	00 97       	sbiw	r24, 0x00	; 0
    3710:	61 f0       	breq	.+24     	; 0x372a <GPIO_writePort+0x54>
    3712:	1e c0       	rjmp	.+60     	; 0x3750 <GPIO_writePort+0x7a>
    3714:	2b 81       	ldd	r18, Y+3	; 0x03
    3716:	3c 81       	ldd	r19, Y+4	; 0x04
    3718:	22 30       	cpi	r18, 0x02	; 2
    371a:	31 05       	cpc	r19, r1
    371c:	81 f0       	breq	.+32     	; 0x373e <GPIO_writePort+0x68>
    371e:	8b 81       	ldd	r24, Y+3	; 0x03
    3720:	9c 81       	ldd	r25, Y+4	; 0x04
    3722:	83 30       	cpi	r24, 0x03	; 3
    3724:	91 05       	cpc	r25, r1
    3726:	81 f0       	breq	.+32     	; 0x3748 <GPIO_writePort+0x72>
    3728:	13 c0       	rjmp	.+38     	; 0x3750 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    372a:	eb e3       	ldi	r30, 0x3B	; 59
    372c:	f0 e0       	ldi	r31, 0x00	; 0
    372e:	8a 81       	ldd	r24, Y+2	; 0x02
    3730:	80 83       	st	Z, r24
    3732:	0e c0       	rjmp	.+28     	; 0x3750 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    3734:	e8 e3       	ldi	r30, 0x38	; 56
    3736:	f0 e0       	ldi	r31, 0x00	; 0
    3738:	8a 81       	ldd	r24, Y+2	; 0x02
    373a:	80 83       	st	Z, r24
    373c:	09 c0       	rjmp	.+18     	; 0x3750 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    373e:	e5 e3       	ldi	r30, 0x35	; 53
    3740:	f0 e0       	ldi	r31, 0x00	; 0
    3742:	8a 81       	ldd	r24, Y+2	; 0x02
    3744:	80 83       	st	Z, r24
    3746:	04 c0       	rjmp	.+8      	; 0x3750 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    3748:	e2 e3       	ldi	r30, 0x32	; 50
    374a:	f0 e0       	ldi	r31, 0x00	; 0
    374c:	8a 81       	ldd	r24, Y+2	; 0x02
    374e:	80 83       	st	Z, r24
			break;
		}
	}
}
    3750:	0f 90       	pop	r0
    3752:	0f 90       	pop	r0
    3754:	0f 90       	pop	r0
    3756:	0f 90       	pop	r0
    3758:	cf 91       	pop	r28
    375a:	df 91       	pop	r29
    375c:	08 95       	ret

0000375e <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    375e:	df 93       	push	r29
    3760:	cf 93       	push	r28
    3762:	00 d0       	rcall	.+0      	; 0x3764 <GPIO_readPort+0x6>
    3764:	00 d0       	rcall	.+0      	; 0x3766 <GPIO_readPort+0x8>
    3766:	cd b7       	in	r28, 0x3d	; 61
    3768:	de b7       	in	r29, 0x3e	; 62
    376a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    376c:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	84 30       	cpi	r24, 0x04	; 4
    3772:	90 f5       	brcc	.+100    	; 0x37d8 <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    3774:	8a 81       	ldd	r24, Y+2	; 0x02
    3776:	28 2f       	mov	r18, r24
    3778:	30 e0       	ldi	r19, 0x00	; 0
    377a:	3c 83       	std	Y+4, r19	; 0x04
    377c:	2b 83       	std	Y+3, r18	; 0x03
    377e:	8b 81       	ldd	r24, Y+3	; 0x03
    3780:	9c 81       	ldd	r25, Y+4	; 0x04
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	91 05       	cpc	r25, r1
    3786:	d1 f0       	breq	.+52     	; 0x37bc <GPIO_readPort+0x5e>
    3788:	2b 81       	ldd	r18, Y+3	; 0x03
    378a:	3c 81       	ldd	r19, Y+4	; 0x04
    378c:	22 30       	cpi	r18, 0x02	; 2
    378e:	31 05       	cpc	r19, r1
    3790:	2c f4       	brge	.+10     	; 0x379c <GPIO_readPort+0x3e>
    3792:	8b 81       	ldd	r24, Y+3	; 0x03
    3794:	9c 81       	ldd	r25, Y+4	; 0x04
    3796:	00 97       	sbiw	r24, 0x00	; 0
    3798:	61 f0       	breq	.+24     	; 0x37b2 <GPIO_readPort+0x54>
    379a:	1e c0       	rjmp	.+60     	; 0x37d8 <GPIO_readPort+0x7a>
    379c:	2b 81       	ldd	r18, Y+3	; 0x03
    379e:	3c 81       	ldd	r19, Y+4	; 0x04
    37a0:	22 30       	cpi	r18, 0x02	; 2
    37a2:	31 05       	cpc	r19, r1
    37a4:	81 f0       	breq	.+32     	; 0x37c6 <GPIO_readPort+0x68>
    37a6:	8b 81       	ldd	r24, Y+3	; 0x03
    37a8:	9c 81       	ldd	r25, Y+4	; 0x04
    37aa:	83 30       	cpi	r24, 0x03	; 3
    37ac:	91 05       	cpc	r25, r1
    37ae:	81 f0       	breq	.+32     	; 0x37d0 <GPIO_readPort+0x72>
    37b0:	13 c0       	rjmp	.+38     	; 0x37d8 <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    37b2:	e9 e3       	ldi	r30, 0x39	; 57
    37b4:	f0 e0       	ldi	r31, 0x00	; 0
    37b6:	80 81       	ld	r24, Z
    37b8:	89 83       	std	Y+1, r24	; 0x01
    37ba:	0e c0       	rjmp	.+28     	; 0x37d8 <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    37bc:	e6 e3       	ldi	r30, 0x36	; 54
    37be:	f0 e0       	ldi	r31, 0x00	; 0
    37c0:	80 81       	ld	r24, Z
    37c2:	89 83       	std	Y+1, r24	; 0x01
    37c4:	09 c0       	rjmp	.+18     	; 0x37d8 <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    37c6:	e3 e3       	ldi	r30, 0x33	; 51
    37c8:	f0 e0       	ldi	r31, 0x00	; 0
    37ca:	80 81       	ld	r24, Z
    37cc:	89 83       	std	Y+1, r24	; 0x01
    37ce:	04 c0       	rjmp	.+8      	; 0x37d8 <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    37d0:	e0 e3       	ldi	r30, 0x30	; 48
    37d2:	f0 e0       	ldi	r31, 0x00	; 0
    37d4:	80 81       	ld	r24, Z
    37d6:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    37d8:	89 81       	ldd	r24, Y+1	; 0x01

}
    37da:	0f 90       	pop	r0
    37dc:	0f 90       	pop	r0
    37de:	0f 90       	pop	r0
    37e0:	0f 90       	pop	r0
    37e2:	cf 91       	pop	r28
    37e4:	df 91       	pop	r29
    37e6:	08 95       	ret

000037e8 <KEYPAD_getPressedKey>:
/*******************************************************************************
 *                      Functions Definitions                                  *
 *******************************************************************************/

uint8 KEYPAD_getPressedKey(void)
{
    37e8:	df 93       	push	r29
    37ea:	cf 93       	push	r28
    37ec:	cd b7       	in	r28, 0x3d	; 61
    37ee:	de b7       	in	r29, 0x3e	; 62
    37f0:	60 97       	sbiw	r28, 0x10	; 16
    37f2:	0f b6       	in	r0, 0x3f	; 63
    37f4:	f8 94       	cli
    37f6:	de bf       	out	0x3e, r29	; 62
    37f8:	0f be       	out	0x3f, r0	; 63
    37fa:	cd bf       	out	0x3d, r28	; 61
	uint8 col,row;
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID, PIN_INPUT);
    37fc:	81 e0       	ldi	r24, 0x01	; 1
    37fe:	64 e0       	ldi	r22, 0x04	; 4
    3800:	40 e0       	ldi	r20, 0x00	; 0
    3802:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+1, PIN_INPUT);
    3806:	81 e0       	ldi	r24, 0x01	; 1
    3808:	65 e0       	ldi	r22, 0x05	; 5
    380a:	40 e0       	ldi	r20, 0x00	; 0
    380c:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+2, PIN_INPUT);
    3810:	81 e0       	ldi	r24, 0x01	; 1
    3812:	66 e0       	ldi	r22, 0x06	; 6
    3814:	40 e0       	ldi	r20, 0x00	; 0
    3816:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+3, PIN_INPUT);
    381a:	81 e0       	ldi	r24, 0x01	; 1
    381c:	67 e0       	ldi	r22, 0x07	; 7
    381e:	40 e0       	ldi	r20, 0x00	; 0
    3820:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>

	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID, PIN_INPUT);
    3824:	83 e0       	ldi	r24, 0x03	; 3
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	40 e0       	ldi	r20, 0x00	; 0
    382a:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+1, PIN_INPUT);
    382e:	83 e0       	ldi	r24, 0x03	; 3
    3830:	63 e0       	ldi	r22, 0x03	; 3
    3832:	40 e0       	ldi	r20, 0x00	; 0
    3834:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+2, PIN_INPUT);
    3838:	83 e0       	ldi	r24, 0x03	; 3
    383a:	64 e0       	ldi	r22, 0x04	; 4
    383c:	40 e0       	ldi	r20, 0x00	; 0
    383e:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
    3842:	83 e0       	ldi	r24, 0x03	; 3
    3844:	65 e0       	ldi	r22, 0x05	; 5
    3846:	40 e0       	ldi	r20, 0x00	; 0
    3848:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    384c:	1f 86       	std	Y+15, r1	; 0x0f
    384e:	b4 c0       	rjmp	.+360    	; 0x39b8 <KEYPAD_getPressedKey+0x1d0>
		{
			/*
			 * Each time setup the direction for all keypad port as input pins,
			 * except this row will be output pin
			 */
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);
    3850:	8f 85       	ldd	r24, Y+15	; 0x0f
    3852:	98 2f       	mov	r25, r24
    3854:	9c 5f       	subi	r25, 0xFC	; 252
    3856:	81 e0       	ldi	r24, 0x01	; 1
    3858:	69 2f       	mov	r22, r25
    385a:	41 e0       	ldi	r20, 0x01	; 1
    385c:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);
    3860:	8f 85       	ldd	r24, Y+15	; 0x0f
    3862:	98 2f       	mov	r25, r24
    3864:	9c 5f       	subi	r25, 0xFC	; 252
    3866:	81 e0       	ldi	r24, 0x01	; 1
    3868:	69 2f       	mov	r22, r25
    386a:	40 e0       	ldi	r20, 0x00	; 0
    386c:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    3870:	18 8a       	std	Y+16, r1	; 0x10
    3872:	22 c0       	rjmp	.+68     	; 0x38b8 <KEYPAD_getPressedKey+0xd0>
			{
				/* Check if the switch is pressed in this column */
				if(GPIO_readPin(KEYPAD_COL_PORT_ID,KEYPAD_FIRST_COL_PIN_ID+col) == KEYPAD_BUTTON_PRESSED)
    3874:	88 89       	ldd	r24, Y+16	; 0x10
    3876:	98 2f       	mov	r25, r24
    3878:	9e 5f       	subi	r25, 0xFE	; 254
    387a:	83 e0       	ldi	r24, 0x03	; 3
    387c:	69 2f       	mov	r22, r25
    387e:	0e 94 8c 1a 	call	0x3518	; 0x3518 <GPIO_readPin>
    3882:	88 23       	and	r24, r24
    3884:	b1 f4       	brne	.+44     	; 0x38b2 <KEYPAD_getPressedKey+0xca>
						#endif
					#elif (KEYPAD_NUM_COLS == 4)
						#ifdef STANDARD_KEYPAD
							return ((row*KEYPAD_NUM_COLS)+col+1);
						#else
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
    3886:	8f 85       	ldd	r24, Y+15	; 0x0f
    3888:	88 2f       	mov	r24, r24
    388a:	90 e0       	ldi	r25, 0x00	; 0
    388c:	88 0f       	add	r24, r24
    388e:	99 1f       	adc	r25, r25
    3890:	88 0f       	add	r24, r24
    3892:	99 1f       	adc	r25, r25
    3894:	98 2f       	mov	r25, r24
    3896:	88 89       	ldd	r24, Y+16	; 0x10
    3898:	89 0f       	add	r24, r25
    389a:	8f 5f       	subi	r24, 0xFF	; 255
    389c:	0e 94 e1 1c 	call	0x39c2	; 0x39c2 <KEYPAD_4x4_adjustKeyNumber>
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
			_delay_ms(5); /* Add small delay to fix CPU load issue in proteus */
		}
	}
}
    38a0:	60 96       	adiw	r28, 0x10	; 16
    38a2:	0f b6       	in	r0, 0x3f	; 63
    38a4:	f8 94       	cli
    38a6:	de bf       	out	0x3e, r29	; 62
    38a8:	0f be       	out	0x3f, r0	; 63
    38aa:	cd bf       	out	0x3d, r28	; 61
    38ac:	cf 91       	pop	r28
    38ae:	df 91       	pop	r29
    38b0:	08 95       	ret
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_OUTPUT);

			/* Set/Clear the row output pin */
			GPIO_writePin(KEYPAD_ROW_PORT_ID, KEYPAD_FIRST_ROW_PIN_ID+row, KEYPAD_BUTTON_PRESSED);

			for(col=0 ; col<KEYPAD_NUM_COLS ; col++) /* loop for columns */
    38b2:	88 89       	ldd	r24, Y+16	; 0x10
    38b4:	8f 5f       	subi	r24, 0xFF	; 255
    38b6:	88 8b       	std	Y+16, r24	; 0x10
    38b8:	88 89       	ldd	r24, Y+16	; 0x10
    38ba:	84 30       	cpi	r24, 0x04	; 4
    38bc:	d8 f2       	brcs	.-74     	; 0x3874 <KEYPAD_getPressedKey+0x8c>
							return KEYPAD_4x4_adjustKeyNumber((row*KEYPAD_NUM_COLS)+col+1);
						#endif
					#endif
				}
			}
			GPIO_setupPinDirection(KEYPAD_ROW_PORT_ID,KEYPAD_FIRST_ROW_PIN_ID+row,PIN_INPUT);
    38be:	8f 85       	ldd	r24, Y+15	; 0x0f
    38c0:	98 2f       	mov	r25, r24
    38c2:	9c 5f       	subi	r25, 0xFC	; 252
    38c4:	81 e0       	ldi	r24, 0x01	; 1
    38c6:	69 2f       	mov	r22, r25
    38c8:	40 e0       	ldi	r20, 0x00	; 0
    38ca:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
    38ce:	80 e0       	ldi	r24, 0x00	; 0
    38d0:	90 e0       	ldi	r25, 0x00	; 0
    38d2:	a0 ea       	ldi	r26, 0xA0	; 160
    38d4:	b0 e4       	ldi	r27, 0x40	; 64
    38d6:	8b 87       	std	Y+11, r24	; 0x0b
    38d8:	9c 87       	std	Y+12, r25	; 0x0c
    38da:	ad 87       	std	Y+13, r26	; 0x0d
    38dc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    38de:	6b 85       	ldd	r22, Y+11	; 0x0b
    38e0:	7c 85       	ldd	r23, Y+12	; 0x0c
    38e2:	8d 85       	ldd	r24, Y+13	; 0x0d
    38e4:	9e 85       	ldd	r25, Y+14	; 0x0e
    38e6:	20 e0       	ldi	r18, 0x00	; 0
    38e8:	30 e0       	ldi	r19, 0x00	; 0
    38ea:	4a ef       	ldi	r20, 0xFA	; 250
    38ec:	54 e4       	ldi	r21, 0x44	; 68
    38ee:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    38f2:	dc 01       	movw	r26, r24
    38f4:	cb 01       	movw	r24, r22
    38f6:	8f 83       	std	Y+7, r24	; 0x07
    38f8:	98 87       	std	Y+8, r25	; 0x08
    38fa:	a9 87       	std	Y+9, r26	; 0x09
    38fc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    38fe:	6f 81       	ldd	r22, Y+7	; 0x07
    3900:	78 85       	ldd	r23, Y+8	; 0x08
    3902:	89 85       	ldd	r24, Y+9	; 0x09
    3904:	9a 85       	ldd	r25, Y+10	; 0x0a
    3906:	20 e0       	ldi	r18, 0x00	; 0
    3908:	30 e0       	ldi	r19, 0x00	; 0
    390a:	40 e8       	ldi	r20, 0x80	; 128
    390c:	5f e3       	ldi	r21, 0x3F	; 63
    390e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3912:	88 23       	and	r24, r24
    3914:	2c f4       	brge	.+10     	; 0x3920 <KEYPAD_getPressedKey+0x138>
		__ticks = 1;
    3916:	81 e0       	ldi	r24, 0x01	; 1
    3918:	90 e0       	ldi	r25, 0x00	; 0
    391a:	9e 83       	std	Y+6, r25	; 0x06
    391c:	8d 83       	std	Y+5, r24	; 0x05
    391e:	3f c0       	rjmp	.+126    	; 0x399e <KEYPAD_getPressedKey+0x1b6>
	else if (__tmp > 65535)
    3920:	6f 81       	ldd	r22, Y+7	; 0x07
    3922:	78 85       	ldd	r23, Y+8	; 0x08
    3924:	89 85       	ldd	r24, Y+9	; 0x09
    3926:	9a 85       	ldd	r25, Y+10	; 0x0a
    3928:	20 e0       	ldi	r18, 0x00	; 0
    392a:	3f ef       	ldi	r19, 0xFF	; 255
    392c:	4f e7       	ldi	r20, 0x7F	; 127
    392e:	57 e4       	ldi	r21, 0x47	; 71
    3930:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3934:	18 16       	cp	r1, r24
    3936:	4c f5       	brge	.+82     	; 0x398a <KEYPAD_getPressedKey+0x1a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3938:	6b 85       	ldd	r22, Y+11	; 0x0b
    393a:	7c 85       	ldd	r23, Y+12	; 0x0c
    393c:	8d 85       	ldd	r24, Y+13	; 0x0d
    393e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3940:	20 e0       	ldi	r18, 0x00	; 0
    3942:	30 e0       	ldi	r19, 0x00	; 0
    3944:	40 e2       	ldi	r20, 0x20	; 32
    3946:	51 e4       	ldi	r21, 0x41	; 65
    3948:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    394c:	dc 01       	movw	r26, r24
    394e:	cb 01       	movw	r24, r22
    3950:	bc 01       	movw	r22, r24
    3952:	cd 01       	movw	r24, r26
    3954:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3958:	dc 01       	movw	r26, r24
    395a:	cb 01       	movw	r24, r22
    395c:	9e 83       	std	Y+6, r25	; 0x06
    395e:	8d 83       	std	Y+5, r24	; 0x05
    3960:	0f c0       	rjmp	.+30     	; 0x3980 <KEYPAD_getPressedKey+0x198>
    3962:	88 ec       	ldi	r24, 0xC8	; 200
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	9c 83       	std	Y+4, r25	; 0x04
    3968:	8b 83       	std	Y+3, r24	; 0x03
    396a:	8b 81       	ldd	r24, Y+3	; 0x03
    396c:	9c 81       	ldd	r25, Y+4	; 0x04
    396e:	01 97       	sbiw	r24, 0x01	; 1
    3970:	f1 f7       	brne	.-4      	; 0x396e <KEYPAD_getPressedKey+0x186>
    3972:	9c 83       	std	Y+4, r25	; 0x04
    3974:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3976:	8d 81       	ldd	r24, Y+5	; 0x05
    3978:	9e 81       	ldd	r25, Y+6	; 0x06
    397a:	01 97       	sbiw	r24, 0x01	; 1
    397c:	9e 83       	std	Y+6, r25	; 0x06
    397e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3980:	8d 81       	ldd	r24, Y+5	; 0x05
    3982:	9e 81       	ldd	r25, Y+6	; 0x06
    3984:	00 97       	sbiw	r24, 0x00	; 0
    3986:	69 f7       	brne	.-38     	; 0x3962 <KEYPAD_getPressedKey+0x17a>
    3988:	14 c0       	rjmp	.+40     	; 0x39b2 <KEYPAD_getPressedKey+0x1ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    398a:	6f 81       	ldd	r22, Y+7	; 0x07
    398c:	78 85       	ldd	r23, Y+8	; 0x08
    398e:	89 85       	ldd	r24, Y+9	; 0x09
    3990:	9a 85       	ldd	r25, Y+10	; 0x0a
    3992:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3996:	dc 01       	movw	r26, r24
    3998:	cb 01       	movw	r24, r22
    399a:	9e 83       	std	Y+6, r25	; 0x06
    399c:	8d 83       	std	Y+5, r24	; 0x05
    399e:	8d 81       	ldd	r24, Y+5	; 0x05
    39a0:	9e 81       	ldd	r25, Y+6	; 0x06
    39a2:	9a 83       	std	Y+2, r25	; 0x02
    39a4:	89 83       	std	Y+1, r24	; 0x01
    39a6:	89 81       	ldd	r24, Y+1	; 0x01
    39a8:	9a 81       	ldd	r25, Y+2	; 0x02
    39aa:	01 97       	sbiw	r24, 0x01	; 1
    39ac:	f1 f7       	brne	.-4      	; 0x39aa <KEYPAD_getPressedKey+0x1c2>
    39ae:	9a 83       	std	Y+2, r25	; 0x02
    39b0:	89 83       	std	Y+1, r24	; 0x01
#if(KEYPAD_NUM_COLS == 4)
	GPIO_setupPinDirection(KEYPAD_COL_PORT_ID, KEYPAD_FIRST_COL_PIN_ID+3, PIN_INPUT);
#endif
	while(1)
	{
		for(row=0 ; row<KEYPAD_NUM_ROWS ; row++) /* loop for rows */
    39b2:	8f 85       	ldd	r24, Y+15	; 0x0f
    39b4:	8f 5f       	subi	r24, 0xFF	; 255
    39b6:	8f 87       	std	Y+15, r24	; 0x0f
    39b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    39ba:	84 30       	cpi	r24, 0x04	; 4
    39bc:	08 f4       	brcc	.+2      	; 0x39c0 <KEYPAD_getPressedKey+0x1d8>
    39be:	48 cf       	rjmp	.-368    	; 0x3850 <KEYPAD_getPressedKey+0x68>
    39c0:	45 cf       	rjmp	.-374    	; 0x384c <KEYPAD_getPressedKey+0x64>

000039c2 <KEYPAD_4x4_adjustKeyNumber>:
/*
 * Description :
 * Update the keypad pressed button value with the correct one in keypad 4x4 shape
 */
static uint8 KEYPAD_4x4_adjustKeyNumber(uint8 button_number)
{
    39c2:	df 93       	push	r29
    39c4:	cf 93       	push	r28
    39c6:	00 d0       	rcall	.+0      	; 0x39c8 <KEYPAD_4x4_adjustKeyNumber+0x6>
    39c8:	00 d0       	rcall	.+0      	; 0x39ca <KEYPAD_4x4_adjustKeyNumber+0x8>
    39ca:	cd b7       	in	r28, 0x3d	; 61
    39cc:	de b7       	in	r29, 0x3e	; 62
    39ce:	8a 83       	std	Y+2, r24	; 0x02
	uint8 keypad_button = 0;
    39d0:	19 82       	std	Y+1, r1	; 0x01
	switch(button_number)
    39d2:	8a 81       	ldd	r24, Y+2	; 0x02
    39d4:	28 2f       	mov	r18, r24
    39d6:	30 e0       	ldi	r19, 0x00	; 0
    39d8:	3c 83       	std	Y+4, r19	; 0x04
    39da:	2b 83       	std	Y+3, r18	; 0x03
    39dc:	8b 81       	ldd	r24, Y+3	; 0x03
    39de:	9c 81       	ldd	r25, Y+4	; 0x04
    39e0:	88 30       	cpi	r24, 0x08	; 8
    39e2:	91 05       	cpc	r25, r1
    39e4:	09 f4       	brne	.+2      	; 0x39e8 <KEYPAD_4x4_adjustKeyNumber+0x26>
    39e6:	70 c0       	rjmp	.+224    	; 0x3ac8 <KEYPAD_4x4_adjustKeyNumber+0x106>
    39e8:	2b 81       	ldd	r18, Y+3	; 0x03
    39ea:	3c 81       	ldd	r19, Y+4	; 0x04
    39ec:	29 30       	cpi	r18, 0x09	; 9
    39ee:	31 05       	cpc	r19, r1
    39f0:	5c f5       	brge	.+86     	; 0x3a48 <KEYPAD_4x4_adjustKeyNumber+0x86>
    39f2:	8b 81       	ldd	r24, Y+3	; 0x03
    39f4:	9c 81       	ldd	r25, Y+4	; 0x04
    39f6:	84 30       	cpi	r24, 0x04	; 4
    39f8:	91 05       	cpc	r25, r1
    39fa:	09 f4       	brne	.+2      	; 0x39fe <KEYPAD_4x4_adjustKeyNumber+0x3c>
    39fc:	59 c0       	rjmp	.+178    	; 0x3ab0 <KEYPAD_4x4_adjustKeyNumber+0xee>
    39fe:	2b 81       	ldd	r18, Y+3	; 0x03
    3a00:	3c 81       	ldd	r19, Y+4	; 0x04
    3a02:	25 30       	cpi	r18, 0x05	; 5
    3a04:	31 05       	cpc	r19, r1
    3a06:	9c f4       	brge	.+38     	; 0x3a2e <KEYPAD_4x4_adjustKeyNumber+0x6c>
    3a08:	8b 81       	ldd	r24, Y+3	; 0x03
    3a0a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0c:	82 30       	cpi	r24, 0x02	; 2
    3a0e:	91 05       	cpc	r25, r1
    3a10:	09 f4       	brne	.+2      	; 0x3a14 <KEYPAD_4x4_adjustKeyNumber+0x52>
    3a12:	48 c0       	rjmp	.+144    	; 0x3aa4 <KEYPAD_4x4_adjustKeyNumber+0xe2>
    3a14:	2b 81       	ldd	r18, Y+3	; 0x03
    3a16:	3c 81       	ldd	r19, Y+4	; 0x04
    3a18:	23 30       	cpi	r18, 0x03	; 3
    3a1a:	31 05       	cpc	r19, r1
    3a1c:	0c f0       	brlt	.+2      	; 0x3a20 <KEYPAD_4x4_adjustKeyNumber+0x5e>
    3a1e:	45 c0       	rjmp	.+138    	; 0x3aaa <KEYPAD_4x4_adjustKeyNumber+0xe8>
    3a20:	8b 81       	ldd	r24, Y+3	; 0x03
    3a22:	9c 81       	ldd	r25, Y+4	; 0x04
    3a24:	81 30       	cpi	r24, 0x01	; 1
    3a26:	91 05       	cpc	r25, r1
    3a28:	09 f4       	brne	.+2      	; 0x3a2c <KEYPAD_4x4_adjustKeyNumber+0x6a>
    3a2a:	39 c0       	rjmp	.+114    	; 0x3a9e <KEYPAD_4x4_adjustKeyNumber+0xdc>
    3a2c:	67 c0       	rjmp	.+206    	; 0x3afc <KEYPAD_4x4_adjustKeyNumber+0x13a>
    3a2e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a30:	3c 81       	ldd	r19, Y+4	; 0x04
    3a32:	26 30       	cpi	r18, 0x06	; 6
    3a34:	31 05       	cpc	r19, r1
    3a36:	09 f4       	brne	.+2      	; 0x3a3a <KEYPAD_4x4_adjustKeyNumber+0x78>
    3a38:	41 c0       	rjmp	.+130    	; 0x3abc <KEYPAD_4x4_adjustKeyNumber+0xfa>
    3a3a:	8b 81       	ldd	r24, Y+3	; 0x03
    3a3c:	9c 81       	ldd	r25, Y+4	; 0x04
    3a3e:	87 30       	cpi	r24, 0x07	; 7
    3a40:	91 05       	cpc	r25, r1
    3a42:	0c f0       	brlt	.+2      	; 0x3a46 <KEYPAD_4x4_adjustKeyNumber+0x84>
    3a44:	3e c0       	rjmp	.+124    	; 0x3ac2 <KEYPAD_4x4_adjustKeyNumber+0x100>
    3a46:	37 c0       	rjmp	.+110    	; 0x3ab6 <KEYPAD_4x4_adjustKeyNumber+0xf4>
    3a48:	2b 81       	ldd	r18, Y+3	; 0x03
    3a4a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a4c:	2c 30       	cpi	r18, 0x0C	; 12
    3a4e:	31 05       	cpc	r19, r1
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <KEYPAD_4x4_adjustKeyNumber+0x92>
    3a52:	46 c0       	rjmp	.+140    	; 0x3ae0 <KEYPAD_4x4_adjustKeyNumber+0x11e>
    3a54:	8b 81       	ldd	r24, Y+3	; 0x03
    3a56:	9c 81       	ldd	r25, Y+4	; 0x04
    3a58:	8d 30       	cpi	r24, 0x0D	; 13
    3a5a:	91 05       	cpc	r25, r1
    3a5c:	5c f4       	brge	.+22     	; 0x3a74 <KEYPAD_4x4_adjustKeyNumber+0xb2>
    3a5e:	2b 81       	ldd	r18, Y+3	; 0x03
    3a60:	3c 81       	ldd	r19, Y+4	; 0x04
    3a62:	2a 30       	cpi	r18, 0x0A	; 10
    3a64:	31 05       	cpc	r19, r1
    3a66:	b1 f1       	breq	.+108    	; 0x3ad4 <KEYPAD_4x4_adjustKeyNumber+0x112>
    3a68:	8b 81       	ldd	r24, Y+3	; 0x03
    3a6a:	9c 81       	ldd	r25, Y+4	; 0x04
    3a6c:	8b 30       	cpi	r24, 0x0B	; 11
    3a6e:	91 05       	cpc	r25, r1
    3a70:	a4 f5       	brge	.+104    	; 0x3ada <KEYPAD_4x4_adjustKeyNumber+0x118>
    3a72:	2d c0       	rjmp	.+90     	; 0x3ace <KEYPAD_4x4_adjustKeyNumber+0x10c>
    3a74:	2b 81       	ldd	r18, Y+3	; 0x03
    3a76:	3c 81       	ldd	r19, Y+4	; 0x04
    3a78:	2e 30       	cpi	r18, 0x0E	; 14
    3a7a:	31 05       	cpc	r19, r1
    3a7c:	b9 f1       	breq	.+110    	; 0x3aec <KEYPAD_4x4_adjustKeyNumber+0x12a>
    3a7e:	8b 81       	ldd	r24, Y+3	; 0x03
    3a80:	9c 81       	ldd	r25, Y+4	; 0x04
    3a82:	8e 30       	cpi	r24, 0x0E	; 14
    3a84:	91 05       	cpc	r25, r1
    3a86:	7c f1       	brlt	.+94     	; 0x3ae6 <KEYPAD_4x4_adjustKeyNumber+0x124>
    3a88:	2b 81       	ldd	r18, Y+3	; 0x03
    3a8a:	3c 81       	ldd	r19, Y+4	; 0x04
    3a8c:	2f 30       	cpi	r18, 0x0F	; 15
    3a8e:	31 05       	cpc	r19, r1
    3a90:	79 f1       	breq	.+94     	; 0x3af0 <KEYPAD_4x4_adjustKeyNumber+0x12e>
    3a92:	8b 81       	ldd	r24, Y+3	; 0x03
    3a94:	9c 81       	ldd	r25, Y+4	; 0x04
    3a96:	80 31       	cpi	r24, 0x10	; 16
    3a98:	91 05       	cpc	r25, r1
    3a9a:	69 f1       	breq	.+90     	; 0x3af6 <KEYPAD_4x4_adjustKeyNumber+0x134>
    3a9c:	2f c0       	rjmp	.+94     	; 0x3afc <KEYPAD_4x4_adjustKeyNumber+0x13a>
	{
		case 1: keypad_button = 7;
    3a9e:	87 e0       	ldi	r24, 0x07	; 7
    3aa0:	89 83       	std	Y+1, r24	; 0x01
    3aa2:	2e c0       	rjmp	.+92     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 2: keypad_button = 8;
    3aa4:	88 e0       	ldi	r24, 0x08	; 8
    3aa6:	89 83       	std	Y+1, r24	; 0x01
    3aa8:	2b c0       	rjmp	.+86     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 3: keypad_button = 9;
    3aaa:	89 e0       	ldi	r24, 0x09	; 9
    3aac:	89 83       	std	Y+1, r24	; 0x01
    3aae:	28 c0       	rjmp	.+80     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 4: keypad_button = '%'; // ASCII Code of %
    3ab0:	85 e2       	ldi	r24, 0x25	; 37
    3ab2:	89 83       	std	Y+1, r24	; 0x01
    3ab4:	25 c0       	rjmp	.+74     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 5: keypad_button = 4;
    3ab6:	84 e0       	ldi	r24, 0x04	; 4
    3ab8:	89 83       	std	Y+1, r24	; 0x01
    3aba:	22 c0       	rjmp	.+68     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 6: keypad_button = 5;
    3abc:	85 e0       	ldi	r24, 0x05	; 5
    3abe:	89 83       	std	Y+1, r24	; 0x01
    3ac0:	1f c0       	rjmp	.+62     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 7: keypad_button = 6;
    3ac2:	86 e0       	ldi	r24, 0x06	; 6
    3ac4:	89 83       	std	Y+1, r24	; 0x01
    3ac6:	1c c0       	rjmp	.+56     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 8: keypad_button = '*'; /* ASCII Code of '*' */
    3ac8:	8a e2       	ldi	r24, 0x2A	; 42
    3aca:	89 83       	std	Y+1, r24	; 0x01
    3acc:	19 c0       	rjmp	.+50     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 9: keypad_button = 1;
    3ace:	81 e0       	ldi	r24, 0x01	; 1
    3ad0:	89 83       	std	Y+1, r24	; 0x01
    3ad2:	16 c0       	rjmp	.+44     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 10: keypad_button = 2;
    3ad4:	82 e0       	ldi	r24, 0x02	; 2
    3ad6:	89 83       	std	Y+1, r24	; 0x01
    3ad8:	13 c0       	rjmp	.+38     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 11: keypad_button = 3;
    3ada:	83 e0       	ldi	r24, 0x03	; 3
    3adc:	89 83       	std	Y+1, r24	; 0x01
    3ade:	10 c0       	rjmp	.+32     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 12: keypad_button = '-'; /* ASCII Code of '-' */
    3ae0:	8d e2       	ldi	r24, 0x2D	; 45
    3ae2:	89 83       	std	Y+1, r24	; 0x01
    3ae4:	0d c0       	rjmp	.+26     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 13: keypad_button = 13;  /* ASCII of Enter */
    3ae6:	8d e0       	ldi	r24, 0x0D	; 13
    3ae8:	89 83       	std	Y+1, r24	; 0x01
    3aea:	0a c0       	rjmp	.+20     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 14: keypad_button = 0;
    3aec:	19 82       	std	Y+1, r1	; 0x01
    3aee:	08 c0       	rjmp	.+16     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 15: keypad_button = '='; /* ASCII Code of '=' */
    3af0:	8d e3       	ldi	r24, 0x3D	; 61
    3af2:	89 83       	std	Y+1, r24	; 0x01
    3af4:	05 c0       	rjmp	.+10     	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		case 16: keypad_button = '+'; /* ASCII Code of '+' */
    3af6:	8b e2       	ldi	r24, 0x2B	; 43
    3af8:	89 83       	std	Y+1, r24	; 0x01
    3afa:	02 c0       	rjmp	.+4      	; 0x3b00 <KEYPAD_4x4_adjustKeyNumber+0x13e>
				break;
		default: keypad_button = button_number;
    3afc:	8a 81       	ldd	r24, Y+2	; 0x02
    3afe:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	return keypad_button;
    3b00:	89 81       	ldd	r24, Y+1	; 0x01
}
    3b02:	0f 90       	pop	r0
    3b04:	0f 90       	pop	r0
    3b06:	0f 90       	pop	r0
    3b08:	0f 90       	pop	r0
    3b0a:	cf 91       	pop	r28
    3b0c:	df 91       	pop	r29
    3b0e:	08 95       	ret

00003b10 <LCD_init>:
 * Initialize the LCD:
 * 1. Setup the LCD pins directions by use the GPIO driver.
 * 2. Setup the LCD Data Mode 4-bits or 8-bits.
 */
void LCD_init(void)
{
    3b10:	df 93       	push	r29
    3b12:	cf 93       	push	r28
    3b14:	cd b7       	in	r28, 0x3d	; 61
    3b16:	de b7       	in	r29, 0x3e	; 62
    3b18:	2e 97       	sbiw	r28, 0x0e	; 14
    3b1a:	0f b6       	in	r0, 0x3f	; 63
    3b1c:	f8 94       	cli
    3b1e:	de bf       	out	0x3e, r29	; 62
    3b20:	0f be       	out	0x3f, r0	; 63
    3b22:	cd bf       	out	0x3d, r28	; 61
	/* Configure the direction for RS and E pins as output pins */
	GPIO_setupPinDirection(LCD_RS_PORT_ID,LCD_RS_PIN_ID,PIN_OUTPUT);
    3b24:	81 e0       	ldi	r24, 0x01	; 1
    3b26:	60 e0       	ldi	r22, 0x00	; 0
    3b28:	41 e0       	ldi	r20, 0x01	; 1
    3b2a:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
	GPIO_setupPinDirection(LCD_E_PORT_ID,LCD_E_PIN_ID,PIN_OUTPUT);
    3b2e:	81 e0       	ldi	r24, 0x01	; 1
    3b30:	61 e0       	ldi	r22, 0x01	; 1
    3b32:	41 e0       	ldi	r20, 0x01	; 1
    3b34:	0e 94 b6 18 	call	0x316c	; 0x316c <GPIO_setupPinDirection>
    3b38:	80 e0       	ldi	r24, 0x00	; 0
    3b3a:	90 e0       	ldi	r25, 0x00	; 0
    3b3c:	a0 ea       	ldi	r26, 0xA0	; 160
    3b3e:	b1 e4       	ldi	r27, 0x41	; 65
    3b40:	8b 87       	std	Y+11, r24	; 0x0b
    3b42:	9c 87       	std	Y+12, r25	; 0x0c
    3b44:	ad 87       	std	Y+13, r26	; 0x0d
    3b46:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3b48:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b4a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b4c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b4e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b50:	20 e0       	ldi	r18, 0x00	; 0
    3b52:	30 e0       	ldi	r19, 0x00	; 0
    3b54:	4a ef       	ldi	r20, 0xFA	; 250
    3b56:	54 e4       	ldi	r21, 0x44	; 68
    3b58:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3b5c:	dc 01       	movw	r26, r24
    3b5e:	cb 01       	movw	r24, r22
    3b60:	8f 83       	std	Y+7, r24	; 0x07
    3b62:	98 87       	std	Y+8, r25	; 0x08
    3b64:	a9 87       	std	Y+9, r26	; 0x09
    3b66:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3b68:	6f 81       	ldd	r22, Y+7	; 0x07
    3b6a:	78 85       	ldd	r23, Y+8	; 0x08
    3b6c:	89 85       	ldd	r24, Y+9	; 0x09
    3b6e:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b70:	20 e0       	ldi	r18, 0x00	; 0
    3b72:	30 e0       	ldi	r19, 0x00	; 0
    3b74:	40 e8       	ldi	r20, 0x80	; 128
    3b76:	5f e3       	ldi	r21, 0x3F	; 63
    3b78:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3b7c:	88 23       	and	r24, r24
    3b7e:	2c f4       	brge	.+10     	; 0x3b8a <LCD_init+0x7a>
		__ticks = 1;
    3b80:	81 e0       	ldi	r24, 0x01	; 1
    3b82:	90 e0       	ldi	r25, 0x00	; 0
    3b84:	9e 83       	std	Y+6, r25	; 0x06
    3b86:	8d 83       	std	Y+5, r24	; 0x05
    3b88:	3f c0       	rjmp	.+126    	; 0x3c08 <LCD_init+0xf8>
	else if (__tmp > 65535)
    3b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8c:	78 85       	ldd	r23, Y+8	; 0x08
    3b8e:	89 85       	ldd	r24, Y+9	; 0x09
    3b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b92:	20 e0       	ldi	r18, 0x00	; 0
    3b94:	3f ef       	ldi	r19, 0xFF	; 255
    3b96:	4f e7       	ldi	r20, 0x7F	; 127
    3b98:	57 e4       	ldi	r21, 0x47	; 71
    3b9a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3b9e:	18 16       	cp	r1, r24
    3ba0:	4c f5       	brge	.+82     	; 0x3bf4 <LCD_init+0xe4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ba2:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ba4:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ba6:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ba8:	9e 85       	ldd	r25, Y+14	; 0x0e
    3baa:	20 e0       	ldi	r18, 0x00	; 0
    3bac:	30 e0       	ldi	r19, 0x00	; 0
    3bae:	40 e2       	ldi	r20, 0x20	; 32
    3bb0:	51 e4       	ldi	r21, 0x41	; 65
    3bb2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3bb6:	dc 01       	movw	r26, r24
    3bb8:	cb 01       	movw	r24, r22
    3bba:	bc 01       	movw	r22, r24
    3bbc:	cd 01       	movw	r24, r26
    3bbe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3bc2:	dc 01       	movw	r26, r24
    3bc4:	cb 01       	movw	r24, r22
    3bc6:	9e 83       	std	Y+6, r25	; 0x06
    3bc8:	8d 83       	std	Y+5, r24	; 0x05
    3bca:	0f c0       	rjmp	.+30     	; 0x3bea <LCD_init+0xda>
    3bcc:	88 ec       	ldi	r24, 0xC8	; 200
    3bce:	90 e0       	ldi	r25, 0x00	; 0
    3bd0:	9c 83       	std	Y+4, r25	; 0x04
    3bd2:	8b 83       	std	Y+3, r24	; 0x03
    3bd4:	8b 81       	ldd	r24, Y+3	; 0x03
    3bd6:	9c 81       	ldd	r25, Y+4	; 0x04
    3bd8:	01 97       	sbiw	r24, 0x01	; 1
    3bda:	f1 f7       	brne	.-4      	; 0x3bd8 <LCD_init+0xc8>
    3bdc:	9c 83       	std	Y+4, r25	; 0x04
    3bde:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3be0:	8d 81       	ldd	r24, Y+5	; 0x05
    3be2:	9e 81       	ldd	r25, Y+6	; 0x06
    3be4:	01 97       	sbiw	r24, 0x01	; 1
    3be6:	9e 83       	std	Y+6, r25	; 0x06
    3be8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3bea:	8d 81       	ldd	r24, Y+5	; 0x05
    3bec:	9e 81       	ldd	r25, Y+6	; 0x06
    3bee:	00 97       	sbiw	r24, 0x00	; 0
    3bf0:	69 f7       	brne	.-38     	; 0x3bcc <LCD_init+0xbc>
    3bf2:	14 c0       	rjmp	.+40     	; 0x3c1c <LCD_init+0x10c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3bf4:	6f 81       	ldd	r22, Y+7	; 0x07
    3bf6:	78 85       	ldd	r23, Y+8	; 0x08
    3bf8:	89 85       	ldd	r24, Y+9	; 0x09
    3bfa:	9a 85       	ldd	r25, Y+10	; 0x0a
    3bfc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3c00:	dc 01       	movw	r26, r24
    3c02:	cb 01       	movw	r24, r22
    3c04:	9e 83       	std	Y+6, r25	; 0x06
    3c06:	8d 83       	std	Y+5, r24	; 0x05
    3c08:	8d 81       	ldd	r24, Y+5	; 0x05
    3c0a:	9e 81       	ldd	r25, Y+6	; 0x06
    3c0c:	9a 83       	std	Y+2, r25	; 0x02
    3c0e:	89 83       	std	Y+1, r24	; 0x01
    3c10:	89 81       	ldd	r24, Y+1	; 0x01
    3c12:	9a 81       	ldd	r25, Y+2	; 0x02
    3c14:	01 97       	sbiw	r24, 0x01	; 1
    3c16:	f1 f7       	brne	.-4      	; 0x3c14 <LCD_init+0x104>
    3c18:	9a 83       	std	Y+2, r25	; 0x02
    3c1a:	89 83       	std	Y+1, r24	; 0x01
	/* use 2-lines LCD + 4-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_FOUR_BITS_MODE);

#elif(LCD_DATA_BITS_MODE == 8)
	/* Configure the data port as output port */
	GPIO_setupPortDirection(LCD_DATA_PORT_ID,PORT_OUTPUT);
    3c1c:	80 e0       	ldi	r24, 0x00	; 0
    3c1e:	6f ef       	ldi	r22, 0xFF	; 255
    3c20:	0e 94 27 1b 	call	0x364e	; 0x364e <GPIO_setupPortDirection>

	/* use 2-lines LCD + 8-bits Data Mode + 5*7 dot display Mode */
	LCD_sendCommand(LCD_TWO_LINES_EIGHT_BITS_MODE);
    3c24:	88 e3       	ldi	r24, 0x38	; 56
    3c26:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_sendCommand>

#endif

	LCD_sendCommand(LCD_CURSOR_OFF); /* cursor off */
    3c2a:	8c e0       	ldi	r24, 0x0C	; 12
    3c2c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_sendCommand>
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* clear LCD at the beginning */
    3c30:	81 e0       	ldi	r24, 0x01	; 1
    3c32:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_sendCommand>
}
    3c36:	2e 96       	adiw	r28, 0x0e	; 14
    3c38:	0f b6       	in	r0, 0x3f	; 63
    3c3a:	f8 94       	cli
    3c3c:	de bf       	out	0x3e, r29	; 62
    3c3e:	0f be       	out	0x3f, r0	; 63
    3c40:	cd bf       	out	0x3d, r28	; 61
    3c42:	cf 91       	pop	r28
    3c44:	df 91       	pop	r29
    3c46:	08 95       	ret

00003c48 <LCD_sendCommand>:
/*
 * Description :
 * Send the required command to the screen
 */
void LCD_sendCommand(uint8 command)
{
    3c48:	df 93       	push	r29
    3c4a:	cf 93       	push	r28
    3c4c:	cd b7       	in	r28, 0x3d	; 61
    3c4e:	de b7       	in	r29, 0x3e	; 62
    3c50:	e9 97       	sbiw	r28, 0x39	; 57
    3c52:	0f b6       	in	r0, 0x3f	; 63
    3c54:	f8 94       	cli
    3c56:	de bf       	out	0x3e, r29	; 62
    3c58:	0f be       	out	0x3f, r0	; 63
    3c5a:	cd bf       	out	0x3d, r28	; 61
    3c5c:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_LOW); /* Instruction Mode RS=0 */
    3c5e:	81 e0       	ldi	r24, 0x01	; 1
    3c60:	60 e0       	ldi	r22, 0x00	; 0
    3c62:	40 e0       	ldi	r20, 0x00	; 0
    3c64:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    3c68:	80 e0       	ldi	r24, 0x00	; 0
    3c6a:	90 e0       	ldi	r25, 0x00	; 0
    3c6c:	a0 e8       	ldi	r26, 0x80	; 128
    3c6e:	bf e3       	ldi	r27, 0x3F	; 63
    3c70:	8d ab       	std	Y+53, r24	; 0x35
    3c72:	9e ab       	std	Y+54, r25	; 0x36
    3c74:	af ab       	std	Y+55, r26	; 0x37
    3c76:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c78:	6d a9       	ldd	r22, Y+53	; 0x35
    3c7a:	7e a9       	ldd	r23, Y+54	; 0x36
    3c7c:	8f a9       	ldd	r24, Y+55	; 0x37
    3c7e:	98 ad       	ldd	r25, Y+56	; 0x38
    3c80:	20 e0       	ldi	r18, 0x00	; 0
    3c82:	30 e0       	ldi	r19, 0x00	; 0
    3c84:	4a ef       	ldi	r20, 0xFA	; 250
    3c86:	54 e4       	ldi	r21, 0x44	; 68
    3c88:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3c8c:	dc 01       	movw	r26, r24
    3c8e:	cb 01       	movw	r24, r22
    3c90:	89 ab       	std	Y+49, r24	; 0x31
    3c92:	9a ab       	std	Y+50, r25	; 0x32
    3c94:	ab ab       	std	Y+51, r26	; 0x33
    3c96:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3c98:	69 a9       	ldd	r22, Y+49	; 0x31
    3c9a:	7a a9       	ldd	r23, Y+50	; 0x32
    3c9c:	8b a9       	ldd	r24, Y+51	; 0x33
    3c9e:	9c a9       	ldd	r25, Y+52	; 0x34
    3ca0:	20 e0       	ldi	r18, 0x00	; 0
    3ca2:	30 e0       	ldi	r19, 0x00	; 0
    3ca4:	40 e8       	ldi	r20, 0x80	; 128
    3ca6:	5f e3       	ldi	r21, 0x3F	; 63
    3ca8:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3cac:	88 23       	and	r24, r24
    3cae:	2c f4       	brge	.+10     	; 0x3cba <LCD_sendCommand+0x72>
		__ticks = 1;
    3cb0:	81 e0       	ldi	r24, 0x01	; 1
    3cb2:	90 e0       	ldi	r25, 0x00	; 0
    3cb4:	98 ab       	std	Y+48, r25	; 0x30
    3cb6:	8f a7       	std	Y+47, r24	; 0x2f
    3cb8:	3f c0       	rjmp	.+126    	; 0x3d38 <LCD_sendCommand+0xf0>
	else if (__tmp > 65535)
    3cba:	69 a9       	ldd	r22, Y+49	; 0x31
    3cbc:	7a a9       	ldd	r23, Y+50	; 0x32
    3cbe:	8b a9       	ldd	r24, Y+51	; 0x33
    3cc0:	9c a9       	ldd	r25, Y+52	; 0x34
    3cc2:	20 e0       	ldi	r18, 0x00	; 0
    3cc4:	3f ef       	ldi	r19, 0xFF	; 255
    3cc6:	4f e7       	ldi	r20, 0x7F	; 127
    3cc8:	57 e4       	ldi	r21, 0x47	; 71
    3cca:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3cce:	18 16       	cp	r1, r24
    3cd0:	4c f5       	brge	.+82     	; 0x3d24 <LCD_sendCommand+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cd2:	6d a9       	ldd	r22, Y+53	; 0x35
    3cd4:	7e a9       	ldd	r23, Y+54	; 0x36
    3cd6:	8f a9       	ldd	r24, Y+55	; 0x37
    3cd8:	98 ad       	ldd	r25, Y+56	; 0x38
    3cda:	20 e0       	ldi	r18, 0x00	; 0
    3cdc:	30 e0       	ldi	r19, 0x00	; 0
    3cde:	40 e2       	ldi	r20, 0x20	; 32
    3ce0:	51 e4       	ldi	r21, 0x41	; 65
    3ce2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ce6:	dc 01       	movw	r26, r24
    3ce8:	cb 01       	movw	r24, r22
    3cea:	bc 01       	movw	r22, r24
    3cec:	cd 01       	movw	r24, r26
    3cee:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3cf2:	dc 01       	movw	r26, r24
    3cf4:	cb 01       	movw	r24, r22
    3cf6:	98 ab       	std	Y+48, r25	; 0x30
    3cf8:	8f a7       	std	Y+47, r24	; 0x2f
    3cfa:	0f c0       	rjmp	.+30     	; 0x3d1a <LCD_sendCommand+0xd2>
    3cfc:	88 ec       	ldi	r24, 0xC8	; 200
    3cfe:	90 e0       	ldi	r25, 0x00	; 0
    3d00:	9e a7       	std	Y+46, r25	; 0x2e
    3d02:	8d a7       	std	Y+45, r24	; 0x2d
    3d04:	8d a5       	ldd	r24, Y+45	; 0x2d
    3d06:	9e a5       	ldd	r25, Y+46	; 0x2e
    3d08:	01 97       	sbiw	r24, 0x01	; 1
    3d0a:	f1 f7       	brne	.-4      	; 0x3d08 <LCD_sendCommand+0xc0>
    3d0c:	9e a7       	std	Y+46, r25	; 0x2e
    3d0e:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d10:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d12:	98 a9       	ldd	r25, Y+48	; 0x30
    3d14:	01 97       	sbiw	r24, 0x01	; 1
    3d16:	98 ab       	std	Y+48, r25	; 0x30
    3d18:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d1a:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d1c:	98 a9       	ldd	r25, Y+48	; 0x30
    3d1e:	00 97       	sbiw	r24, 0x00	; 0
    3d20:	69 f7       	brne	.-38     	; 0x3cfc <LCD_sendCommand+0xb4>
    3d22:	14 c0       	rjmp	.+40     	; 0x3d4c <LCD_sendCommand+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d24:	69 a9       	ldd	r22, Y+49	; 0x31
    3d26:	7a a9       	ldd	r23, Y+50	; 0x32
    3d28:	8b a9       	ldd	r24, Y+51	; 0x33
    3d2a:	9c a9       	ldd	r25, Y+52	; 0x34
    3d2c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3d30:	dc 01       	movw	r26, r24
    3d32:	cb 01       	movw	r24, r22
    3d34:	98 ab       	std	Y+48, r25	; 0x30
    3d36:	8f a7       	std	Y+47, r24	; 0x2f
    3d38:	8f a5       	ldd	r24, Y+47	; 0x2f
    3d3a:	98 a9       	ldd	r25, Y+48	; 0x30
    3d3c:	9c a7       	std	Y+44, r25	; 0x2c
    3d3e:	8b a7       	std	Y+43, r24	; 0x2b
    3d40:	8b a5       	ldd	r24, Y+43	; 0x2b
    3d42:	9c a5       	ldd	r25, Y+44	; 0x2c
    3d44:	01 97       	sbiw	r24, 0x01	; 1
    3d46:	f1 f7       	brne	.-4      	; 0x3d44 <LCD_sendCommand+0xfc>
    3d48:	9c a7       	std	Y+44, r25	; 0x2c
    3d4a:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    3d4c:	81 e0       	ldi	r24, 0x01	; 1
    3d4e:	61 e0       	ldi	r22, 0x01	; 1
    3d50:	41 e0       	ldi	r20, 0x01	; 1
    3d52:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	90 e0       	ldi	r25, 0x00	; 0
    3d5a:	a0 e8       	ldi	r26, 0x80	; 128
    3d5c:	bf e3       	ldi	r27, 0x3F	; 63
    3d5e:	8f a3       	std	Y+39, r24	; 0x27
    3d60:	98 a7       	std	Y+40, r25	; 0x28
    3d62:	a9 a7       	std	Y+41, r26	; 0x29
    3d64:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3d66:	6f a1       	ldd	r22, Y+39	; 0x27
    3d68:	78 a5       	ldd	r23, Y+40	; 0x28
    3d6a:	89 a5       	ldd	r24, Y+41	; 0x29
    3d6c:	9a a5       	ldd	r25, Y+42	; 0x2a
    3d6e:	20 e0       	ldi	r18, 0x00	; 0
    3d70:	30 e0       	ldi	r19, 0x00	; 0
    3d72:	4a ef       	ldi	r20, 0xFA	; 250
    3d74:	54 e4       	ldi	r21, 0x44	; 68
    3d76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3d7a:	dc 01       	movw	r26, r24
    3d7c:	cb 01       	movw	r24, r22
    3d7e:	8b a3       	std	Y+35, r24	; 0x23
    3d80:	9c a3       	std	Y+36, r25	; 0x24
    3d82:	ad a3       	std	Y+37, r26	; 0x25
    3d84:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3d86:	6b a1       	ldd	r22, Y+35	; 0x23
    3d88:	7c a1       	ldd	r23, Y+36	; 0x24
    3d8a:	8d a1       	ldd	r24, Y+37	; 0x25
    3d8c:	9e a1       	ldd	r25, Y+38	; 0x26
    3d8e:	20 e0       	ldi	r18, 0x00	; 0
    3d90:	30 e0       	ldi	r19, 0x00	; 0
    3d92:	40 e8       	ldi	r20, 0x80	; 128
    3d94:	5f e3       	ldi	r21, 0x3F	; 63
    3d96:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3d9a:	88 23       	and	r24, r24
    3d9c:	2c f4       	brge	.+10     	; 0x3da8 <LCD_sendCommand+0x160>
		__ticks = 1;
    3d9e:	81 e0       	ldi	r24, 0x01	; 1
    3da0:	90 e0       	ldi	r25, 0x00	; 0
    3da2:	9a a3       	std	Y+34, r25	; 0x22
    3da4:	89 a3       	std	Y+33, r24	; 0x21
    3da6:	3f c0       	rjmp	.+126    	; 0x3e26 <LCD_sendCommand+0x1de>
	else if (__tmp > 65535)
    3da8:	6b a1       	ldd	r22, Y+35	; 0x23
    3daa:	7c a1       	ldd	r23, Y+36	; 0x24
    3dac:	8d a1       	ldd	r24, Y+37	; 0x25
    3dae:	9e a1       	ldd	r25, Y+38	; 0x26
    3db0:	20 e0       	ldi	r18, 0x00	; 0
    3db2:	3f ef       	ldi	r19, 0xFF	; 255
    3db4:	4f e7       	ldi	r20, 0x7F	; 127
    3db6:	57 e4       	ldi	r21, 0x47	; 71
    3db8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3dbc:	18 16       	cp	r1, r24
    3dbe:	4c f5       	brge	.+82     	; 0x3e12 <LCD_sendCommand+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3dc0:	6f a1       	ldd	r22, Y+39	; 0x27
    3dc2:	78 a5       	ldd	r23, Y+40	; 0x28
    3dc4:	89 a5       	ldd	r24, Y+41	; 0x29
    3dc6:	9a a5       	ldd	r25, Y+42	; 0x2a
    3dc8:	20 e0       	ldi	r18, 0x00	; 0
    3dca:	30 e0       	ldi	r19, 0x00	; 0
    3dcc:	40 e2       	ldi	r20, 0x20	; 32
    3dce:	51 e4       	ldi	r21, 0x41	; 65
    3dd0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3dd4:	dc 01       	movw	r26, r24
    3dd6:	cb 01       	movw	r24, r22
    3dd8:	bc 01       	movw	r22, r24
    3dda:	cd 01       	movw	r24, r26
    3ddc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3de0:	dc 01       	movw	r26, r24
    3de2:	cb 01       	movw	r24, r22
    3de4:	9a a3       	std	Y+34, r25	; 0x22
    3de6:	89 a3       	std	Y+33, r24	; 0x21
    3de8:	0f c0       	rjmp	.+30     	; 0x3e08 <LCD_sendCommand+0x1c0>
    3dea:	88 ec       	ldi	r24, 0xC8	; 200
    3dec:	90 e0       	ldi	r25, 0x00	; 0
    3dee:	98 a3       	std	Y+32, r25	; 0x20
    3df0:	8f 8f       	std	Y+31, r24	; 0x1f
    3df2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3df4:	98 a1       	ldd	r25, Y+32	; 0x20
    3df6:	01 97       	sbiw	r24, 0x01	; 1
    3df8:	f1 f7       	brne	.-4      	; 0x3df6 <LCD_sendCommand+0x1ae>
    3dfa:	98 a3       	std	Y+32, r25	; 0x20
    3dfc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3dfe:	89 a1       	ldd	r24, Y+33	; 0x21
    3e00:	9a a1       	ldd	r25, Y+34	; 0x22
    3e02:	01 97       	sbiw	r24, 0x01	; 1
    3e04:	9a a3       	std	Y+34, r25	; 0x22
    3e06:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3e08:	89 a1       	ldd	r24, Y+33	; 0x21
    3e0a:	9a a1       	ldd	r25, Y+34	; 0x22
    3e0c:	00 97       	sbiw	r24, 0x00	; 0
    3e0e:	69 f7       	brne	.-38     	; 0x3dea <LCD_sendCommand+0x1a2>
    3e10:	14 c0       	rjmp	.+40     	; 0x3e3a <LCD_sendCommand+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3e12:	6b a1       	ldd	r22, Y+35	; 0x23
    3e14:	7c a1       	ldd	r23, Y+36	; 0x24
    3e16:	8d a1       	ldd	r24, Y+37	; 0x25
    3e18:	9e a1       	ldd	r25, Y+38	; 0x26
    3e1a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3e1e:	dc 01       	movw	r26, r24
    3e20:	cb 01       	movw	r24, r22
    3e22:	9a a3       	std	Y+34, r25	; 0x22
    3e24:	89 a3       	std	Y+33, r24	; 0x21
    3e26:	89 a1       	ldd	r24, Y+33	; 0x21
    3e28:	9a a1       	ldd	r25, Y+34	; 0x22
    3e2a:	9e 8f       	std	Y+30, r25	; 0x1e
    3e2c:	8d 8f       	std	Y+29, r24	; 0x1d
    3e2e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3e30:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3e32:	01 97       	sbiw	r24, 0x01	; 1
    3e34:	f1 f7       	brne	.-4      	; 0x3e32 <LCD_sendCommand+0x1ea>
    3e36:	9e 8f       	std	Y+30, r25	; 0x1e
    3e38:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,command); /* out the required command to the data bus D0 --> D7 */
    3e3a:	80 e0       	ldi	r24, 0x00	; 0
    3e3c:	69 ad       	ldd	r22, Y+57	; 0x39
    3e3e:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <GPIO_writePort>
    3e42:	80 e0       	ldi	r24, 0x00	; 0
    3e44:	90 e0       	ldi	r25, 0x00	; 0
    3e46:	a0 e8       	ldi	r26, 0x80	; 128
    3e48:	bf e3       	ldi	r27, 0x3F	; 63
    3e4a:	89 8f       	std	Y+25, r24	; 0x19
    3e4c:	9a 8f       	std	Y+26, r25	; 0x1a
    3e4e:	ab 8f       	std	Y+27, r26	; 0x1b
    3e50:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e52:	69 8d       	ldd	r22, Y+25	; 0x19
    3e54:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3e56:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3e58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3e5a:	20 e0       	ldi	r18, 0x00	; 0
    3e5c:	30 e0       	ldi	r19, 0x00	; 0
    3e5e:	4a ef       	ldi	r20, 0xFA	; 250
    3e60:	54 e4       	ldi	r21, 0x44	; 68
    3e62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3e66:	dc 01       	movw	r26, r24
    3e68:	cb 01       	movw	r24, r22
    3e6a:	8d 8b       	std	Y+21, r24	; 0x15
    3e6c:	9e 8b       	std	Y+22, r25	; 0x16
    3e6e:	af 8b       	std	Y+23, r26	; 0x17
    3e70:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3e72:	6d 89       	ldd	r22, Y+21	; 0x15
    3e74:	7e 89       	ldd	r23, Y+22	; 0x16
    3e76:	8f 89       	ldd	r24, Y+23	; 0x17
    3e78:	98 8d       	ldd	r25, Y+24	; 0x18
    3e7a:	20 e0       	ldi	r18, 0x00	; 0
    3e7c:	30 e0       	ldi	r19, 0x00	; 0
    3e7e:	40 e8       	ldi	r20, 0x80	; 128
    3e80:	5f e3       	ldi	r21, 0x3F	; 63
    3e82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3e86:	88 23       	and	r24, r24
    3e88:	2c f4       	brge	.+10     	; 0x3e94 <LCD_sendCommand+0x24c>
		__ticks = 1;
    3e8a:	81 e0       	ldi	r24, 0x01	; 1
    3e8c:	90 e0       	ldi	r25, 0x00	; 0
    3e8e:	9c 8b       	std	Y+20, r25	; 0x14
    3e90:	8b 8b       	std	Y+19, r24	; 0x13
    3e92:	3f c0       	rjmp	.+126    	; 0x3f12 <LCD_sendCommand+0x2ca>
	else if (__tmp > 65535)
    3e94:	6d 89       	ldd	r22, Y+21	; 0x15
    3e96:	7e 89       	ldd	r23, Y+22	; 0x16
    3e98:	8f 89       	ldd	r24, Y+23	; 0x17
    3e9a:	98 8d       	ldd	r25, Y+24	; 0x18
    3e9c:	20 e0       	ldi	r18, 0x00	; 0
    3e9e:	3f ef       	ldi	r19, 0xFF	; 255
    3ea0:	4f e7       	ldi	r20, 0x7F	; 127
    3ea2:	57 e4       	ldi	r21, 0x47	; 71
    3ea4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3ea8:	18 16       	cp	r1, r24
    3eaa:	4c f5       	brge	.+82     	; 0x3efe <LCD_sendCommand+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3eac:	69 8d       	ldd	r22, Y+25	; 0x19
    3eae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3eb0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3eb2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3eb4:	20 e0       	ldi	r18, 0x00	; 0
    3eb6:	30 e0       	ldi	r19, 0x00	; 0
    3eb8:	40 e2       	ldi	r20, 0x20	; 32
    3eba:	51 e4       	ldi	r21, 0x41	; 65
    3ebc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3ec0:	dc 01       	movw	r26, r24
    3ec2:	cb 01       	movw	r24, r22
    3ec4:	bc 01       	movw	r22, r24
    3ec6:	cd 01       	movw	r24, r26
    3ec8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ecc:	dc 01       	movw	r26, r24
    3ece:	cb 01       	movw	r24, r22
    3ed0:	9c 8b       	std	Y+20, r25	; 0x14
    3ed2:	8b 8b       	std	Y+19, r24	; 0x13
    3ed4:	0f c0       	rjmp	.+30     	; 0x3ef4 <LCD_sendCommand+0x2ac>
    3ed6:	88 ec       	ldi	r24, 0xC8	; 200
    3ed8:	90 e0       	ldi	r25, 0x00	; 0
    3eda:	9a 8b       	std	Y+18, r25	; 0x12
    3edc:	89 8b       	std	Y+17, r24	; 0x11
    3ede:	89 89       	ldd	r24, Y+17	; 0x11
    3ee0:	9a 89       	ldd	r25, Y+18	; 0x12
    3ee2:	01 97       	sbiw	r24, 0x01	; 1
    3ee4:	f1 f7       	brne	.-4      	; 0x3ee2 <LCD_sendCommand+0x29a>
    3ee6:	9a 8b       	std	Y+18, r25	; 0x12
    3ee8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3eea:	8b 89       	ldd	r24, Y+19	; 0x13
    3eec:	9c 89       	ldd	r25, Y+20	; 0x14
    3eee:	01 97       	sbiw	r24, 0x01	; 1
    3ef0:	9c 8b       	std	Y+20, r25	; 0x14
    3ef2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3ef4:	8b 89       	ldd	r24, Y+19	; 0x13
    3ef6:	9c 89       	ldd	r25, Y+20	; 0x14
    3ef8:	00 97       	sbiw	r24, 0x00	; 0
    3efa:	69 f7       	brne	.-38     	; 0x3ed6 <LCD_sendCommand+0x28e>
    3efc:	14 c0       	rjmp	.+40     	; 0x3f26 <LCD_sendCommand+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3efe:	6d 89       	ldd	r22, Y+21	; 0x15
    3f00:	7e 89       	ldd	r23, Y+22	; 0x16
    3f02:	8f 89       	ldd	r24, Y+23	; 0x17
    3f04:	98 8d       	ldd	r25, Y+24	; 0x18
    3f06:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3f0a:	dc 01       	movw	r26, r24
    3f0c:	cb 01       	movw	r24, r22
    3f0e:	9c 8b       	std	Y+20, r25	; 0x14
    3f10:	8b 8b       	std	Y+19, r24	; 0x13
    3f12:	8b 89       	ldd	r24, Y+19	; 0x13
    3f14:	9c 89       	ldd	r25, Y+20	; 0x14
    3f16:	98 8b       	std	Y+16, r25	; 0x10
    3f18:	8f 87       	std	Y+15, r24	; 0x0f
    3f1a:	8f 85       	ldd	r24, Y+15	; 0x0f
    3f1c:	98 89       	ldd	r25, Y+16	; 0x10
    3f1e:	01 97       	sbiw	r24, 0x01	; 1
    3f20:	f1 f7       	brne	.-4      	; 0x3f1e <LCD_sendCommand+0x2d6>
    3f22:	98 8b       	std	Y+16, r25	; 0x10
    3f24:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    3f26:	81 e0       	ldi	r24, 0x01	; 1
    3f28:	61 e0       	ldi	r22, 0x01	; 1
    3f2a:	40 e0       	ldi	r20, 0x00	; 0
    3f2c:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    3f30:	80 e0       	ldi	r24, 0x00	; 0
    3f32:	90 e0       	ldi	r25, 0x00	; 0
    3f34:	a0 e8       	ldi	r26, 0x80	; 128
    3f36:	bf e3       	ldi	r27, 0x3F	; 63
    3f38:	8b 87       	std	Y+11, r24	; 0x0b
    3f3a:	9c 87       	std	Y+12, r25	; 0x0c
    3f3c:	ad 87       	std	Y+13, r26	; 0x0d
    3f3e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3f40:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f42:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f44:	8d 85       	ldd	r24, Y+13	; 0x0d
    3f46:	9e 85       	ldd	r25, Y+14	; 0x0e
    3f48:	20 e0       	ldi	r18, 0x00	; 0
    3f4a:	30 e0       	ldi	r19, 0x00	; 0
    3f4c:	4a ef       	ldi	r20, 0xFA	; 250
    3f4e:	54 e4       	ldi	r21, 0x44	; 68
    3f50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3f54:	dc 01       	movw	r26, r24
    3f56:	cb 01       	movw	r24, r22
    3f58:	8f 83       	std	Y+7, r24	; 0x07
    3f5a:	98 87       	std	Y+8, r25	; 0x08
    3f5c:	a9 87       	std	Y+9, r26	; 0x09
    3f5e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3f60:	6f 81       	ldd	r22, Y+7	; 0x07
    3f62:	78 85       	ldd	r23, Y+8	; 0x08
    3f64:	89 85       	ldd	r24, Y+9	; 0x09
    3f66:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f68:	20 e0       	ldi	r18, 0x00	; 0
    3f6a:	30 e0       	ldi	r19, 0x00	; 0
    3f6c:	40 e8       	ldi	r20, 0x80	; 128
    3f6e:	5f e3       	ldi	r21, 0x3F	; 63
    3f70:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3f74:	88 23       	and	r24, r24
    3f76:	2c f4       	brge	.+10     	; 0x3f82 <LCD_sendCommand+0x33a>
		__ticks = 1;
    3f78:	81 e0       	ldi	r24, 0x01	; 1
    3f7a:	90 e0       	ldi	r25, 0x00	; 0
    3f7c:	9e 83       	std	Y+6, r25	; 0x06
    3f7e:	8d 83       	std	Y+5, r24	; 0x05
    3f80:	3f c0       	rjmp	.+126    	; 0x4000 <LCD_sendCommand+0x3b8>
	else if (__tmp > 65535)
    3f82:	6f 81       	ldd	r22, Y+7	; 0x07
    3f84:	78 85       	ldd	r23, Y+8	; 0x08
    3f86:	89 85       	ldd	r24, Y+9	; 0x09
    3f88:	9a 85       	ldd	r25, Y+10	; 0x0a
    3f8a:	20 e0       	ldi	r18, 0x00	; 0
    3f8c:	3f ef       	ldi	r19, 0xFF	; 255
    3f8e:	4f e7       	ldi	r20, 0x7F	; 127
    3f90:	57 e4       	ldi	r21, 0x47	; 71
    3f92:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3f96:	18 16       	cp	r1, r24
    3f98:	4c f5       	brge	.+82     	; 0x3fec <LCD_sendCommand+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3f9a:	6b 85       	ldd	r22, Y+11	; 0x0b
    3f9c:	7c 85       	ldd	r23, Y+12	; 0x0c
    3f9e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3fa0:	9e 85       	ldd	r25, Y+14	; 0x0e
    3fa2:	20 e0       	ldi	r18, 0x00	; 0
    3fa4:	30 e0       	ldi	r19, 0x00	; 0
    3fa6:	40 e2       	ldi	r20, 0x20	; 32
    3fa8:	51 e4       	ldi	r21, 0x41	; 65
    3faa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3fae:	dc 01       	movw	r26, r24
    3fb0:	cb 01       	movw	r24, r22
    3fb2:	bc 01       	movw	r22, r24
    3fb4:	cd 01       	movw	r24, r26
    3fb6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3fba:	dc 01       	movw	r26, r24
    3fbc:	cb 01       	movw	r24, r22
    3fbe:	9e 83       	std	Y+6, r25	; 0x06
    3fc0:	8d 83       	std	Y+5, r24	; 0x05
    3fc2:	0f c0       	rjmp	.+30     	; 0x3fe2 <LCD_sendCommand+0x39a>
    3fc4:	88 ec       	ldi	r24, 0xC8	; 200
    3fc6:	90 e0       	ldi	r25, 0x00	; 0
    3fc8:	9c 83       	std	Y+4, r25	; 0x04
    3fca:	8b 83       	std	Y+3, r24	; 0x03
    3fcc:	8b 81       	ldd	r24, Y+3	; 0x03
    3fce:	9c 81       	ldd	r25, Y+4	; 0x04
    3fd0:	01 97       	sbiw	r24, 0x01	; 1
    3fd2:	f1 f7       	brne	.-4      	; 0x3fd0 <LCD_sendCommand+0x388>
    3fd4:	9c 83       	std	Y+4, r25	; 0x04
    3fd6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3fd8:	8d 81       	ldd	r24, Y+5	; 0x05
    3fda:	9e 81       	ldd	r25, Y+6	; 0x06
    3fdc:	01 97       	sbiw	r24, 0x01	; 1
    3fde:	9e 83       	std	Y+6, r25	; 0x06
    3fe0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3fe2:	8d 81       	ldd	r24, Y+5	; 0x05
    3fe4:	9e 81       	ldd	r25, Y+6	; 0x06
    3fe6:	00 97       	sbiw	r24, 0x00	; 0
    3fe8:	69 f7       	brne	.-38     	; 0x3fc4 <LCD_sendCommand+0x37c>
    3fea:	14 c0       	rjmp	.+40     	; 0x4014 <LCD_sendCommand+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3fec:	6f 81       	ldd	r22, Y+7	; 0x07
    3fee:	78 85       	ldd	r23, Y+8	; 0x08
    3ff0:	89 85       	ldd	r24, Y+9	; 0x09
    3ff2:	9a 85       	ldd	r25, Y+10	; 0x0a
    3ff4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3ff8:	dc 01       	movw	r26, r24
    3ffa:	cb 01       	movw	r24, r22
    3ffc:	9e 83       	std	Y+6, r25	; 0x06
    3ffe:	8d 83       	std	Y+5, r24	; 0x05
    4000:	8d 81       	ldd	r24, Y+5	; 0x05
    4002:	9e 81       	ldd	r25, Y+6	; 0x06
    4004:	9a 83       	std	Y+2, r25	; 0x02
    4006:	89 83       	std	Y+1, r24	; 0x01
    4008:	89 81       	ldd	r24, Y+1	; 0x01
    400a:	9a 81       	ldd	r25, Y+2	; 0x02
    400c:	01 97       	sbiw	r24, 0x01	; 1
    400e:	f1 f7       	brne	.-4      	; 0x400c <LCD_sendCommand+0x3c4>
    4010:	9a 83       	std	Y+2, r25	; 0x02
    4012:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    4014:	e9 96       	adiw	r28, 0x39	; 57
    4016:	0f b6       	in	r0, 0x3f	; 63
    4018:	f8 94       	cli
    401a:	de bf       	out	0x3e, r29	; 62
    401c:	0f be       	out	0x3f, r0	; 63
    401e:	cd bf       	out	0x3d, r28	; 61
    4020:	cf 91       	pop	r28
    4022:	df 91       	pop	r29
    4024:	08 95       	ret

00004026 <LCD_displayCharacter>:
/*
 * Description :
 * Display the required character on the screen
 */
void LCD_displayCharacter(uint8 data)
{
    4026:	df 93       	push	r29
    4028:	cf 93       	push	r28
    402a:	cd b7       	in	r28, 0x3d	; 61
    402c:	de b7       	in	r29, 0x3e	; 62
    402e:	e9 97       	sbiw	r28, 0x39	; 57
    4030:	0f b6       	in	r0, 0x3f	; 63
    4032:	f8 94       	cli
    4034:	de bf       	out	0x3e, r29	; 62
    4036:	0f be       	out	0x3f, r0	; 63
    4038:	cd bf       	out	0x3d, r28	; 61
    403a:	89 af       	std	Y+57, r24	; 0x39
	GPIO_writePin(LCD_RS_PORT_ID,LCD_RS_PIN_ID,LOGIC_HIGH); /* Data Mode RS=1 */
    403c:	81 e0       	ldi	r24, 0x01	; 1
    403e:	60 e0       	ldi	r22, 0x00	; 0
    4040:	41 e0       	ldi	r20, 0x01	; 1
    4042:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    4046:	80 e0       	ldi	r24, 0x00	; 0
    4048:	90 e0       	ldi	r25, 0x00	; 0
    404a:	a0 e8       	ldi	r26, 0x80	; 128
    404c:	bf e3       	ldi	r27, 0x3F	; 63
    404e:	8d ab       	std	Y+53, r24	; 0x35
    4050:	9e ab       	std	Y+54, r25	; 0x36
    4052:	af ab       	std	Y+55, r26	; 0x37
    4054:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4056:	6d a9       	ldd	r22, Y+53	; 0x35
    4058:	7e a9       	ldd	r23, Y+54	; 0x36
    405a:	8f a9       	ldd	r24, Y+55	; 0x37
    405c:	98 ad       	ldd	r25, Y+56	; 0x38
    405e:	20 e0       	ldi	r18, 0x00	; 0
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	4a ef       	ldi	r20, 0xFA	; 250
    4064:	54 e4       	ldi	r21, 0x44	; 68
    4066:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	89 ab       	std	Y+49, r24	; 0x31
    4070:	9a ab       	std	Y+50, r25	; 0x32
    4072:	ab ab       	std	Y+51, r26	; 0x33
    4074:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    4076:	69 a9       	ldd	r22, Y+49	; 0x31
    4078:	7a a9       	ldd	r23, Y+50	; 0x32
    407a:	8b a9       	ldd	r24, Y+51	; 0x33
    407c:	9c a9       	ldd	r25, Y+52	; 0x34
    407e:	20 e0       	ldi	r18, 0x00	; 0
    4080:	30 e0       	ldi	r19, 0x00	; 0
    4082:	40 e8       	ldi	r20, 0x80	; 128
    4084:	5f e3       	ldi	r21, 0x3F	; 63
    4086:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    408a:	88 23       	and	r24, r24
    408c:	2c f4       	brge	.+10     	; 0x4098 <LCD_displayCharacter+0x72>
		__ticks = 1;
    408e:	81 e0       	ldi	r24, 0x01	; 1
    4090:	90 e0       	ldi	r25, 0x00	; 0
    4092:	98 ab       	std	Y+48, r25	; 0x30
    4094:	8f a7       	std	Y+47, r24	; 0x2f
    4096:	3f c0       	rjmp	.+126    	; 0x4116 <LCD_displayCharacter+0xf0>
	else if (__tmp > 65535)
    4098:	69 a9       	ldd	r22, Y+49	; 0x31
    409a:	7a a9       	ldd	r23, Y+50	; 0x32
    409c:	8b a9       	ldd	r24, Y+51	; 0x33
    409e:	9c a9       	ldd	r25, Y+52	; 0x34
    40a0:	20 e0       	ldi	r18, 0x00	; 0
    40a2:	3f ef       	ldi	r19, 0xFF	; 255
    40a4:	4f e7       	ldi	r20, 0x7F	; 127
    40a6:	57 e4       	ldi	r21, 0x47	; 71
    40a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    40ac:	18 16       	cp	r1, r24
    40ae:	4c f5       	brge	.+82     	; 0x4102 <LCD_displayCharacter+0xdc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    40b0:	6d a9       	ldd	r22, Y+53	; 0x35
    40b2:	7e a9       	ldd	r23, Y+54	; 0x36
    40b4:	8f a9       	ldd	r24, Y+55	; 0x37
    40b6:	98 ad       	ldd	r25, Y+56	; 0x38
    40b8:	20 e0       	ldi	r18, 0x00	; 0
    40ba:	30 e0       	ldi	r19, 0x00	; 0
    40bc:	40 e2       	ldi	r20, 0x20	; 32
    40be:	51 e4       	ldi	r21, 0x41	; 65
    40c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    40c4:	dc 01       	movw	r26, r24
    40c6:	cb 01       	movw	r24, r22
    40c8:	bc 01       	movw	r22, r24
    40ca:	cd 01       	movw	r24, r26
    40cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    40d0:	dc 01       	movw	r26, r24
    40d2:	cb 01       	movw	r24, r22
    40d4:	98 ab       	std	Y+48, r25	; 0x30
    40d6:	8f a7       	std	Y+47, r24	; 0x2f
    40d8:	0f c0       	rjmp	.+30     	; 0x40f8 <LCD_displayCharacter+0xd2>
    40da:	88 ec       	ldi	r24, 0xC8	; 200
    40dc:	90 e0       	ldi	r25, 0x00	; 0
    40de:	9e a7       	std	Y+46, r25	; 0x2e
    40e0:	8d a7       	std	Y+45, r24	; 0x2d
    40e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    40e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    40e6:	01 97       	sbiw	r24, 0x01	; 1
    40e8:	f1 f7       	brne	.-4      	; 0x40e6 <LCD_displayCharacter+0xc0>
    40ea:	9e a7       	std	Y+46, r25	; 0x2e
    40ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    40ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    40f0:	98 a9       	ldd	r25, Y+48	; 0x30
    40f2:	01 97       	sbiw	r24, 0x01	; 1
    40f4:	98 ab       	std	Y+48, r25	; 0x30
    40f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    40fa:	98 a9       	ldd	r25, Y+48	; 0x30
    40fc:	00 97       	sbiw	r24, 0x00	; 0
    40fe:	69 f7       	brne	.-38     	; 0x40da <LCD_displayCharacter+0xb4>
    4100:	14 c0       	rjmp	.+40     	; 0x412a <LCD_displayCharacter+0x104>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    4102:	69 a9       	ldd	r22, Y+49	; 0x31
    4104:	7a a9       	ldd	r23, Y+50	; 0x32
    4106:	8b a9       	ldd	r24, Y+51	; 0x33
    4108:	9c a9       	ldd	r25, Y+52	; 0x34
    410a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    410e:	dc 01       	movw	r26, r24
    4110:	cb 01       	movw	r24, r22
    4112:	98 ab       	std	Y+48, r25	; 0x30
    4114:	8f a7       	std	Y+47, r24	; 0x2f
    4116:	8f a5       	ldd	r24, Y+47	; 0x2f
    4118:	98 a9       	ldd	r25, Y+48	; 0x30
    411a:	9c a7       	std	Y+44, r25	; 0x2c
    411c:	8b a7       	std	Y+43, r24	; 0x2b
    411e:	8b a5       	ldd	r24, Y+43	; 0x2b
    4120:	9c a5       	ldd	r25, Y+44	; 0x2c
    4122:	01 97       	sbiw	r24, 0x01	; 1
    4124:	f1 f7       	brne	.-4      	; 0x4122 <LCD_displayCharacter+0xfc>
    4126:	9c a7       	std	Y+44, r25	; 0x2c
    4128:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(1); /* delay for processing Tas = 50ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_HIGH); /* Enable LCD E=1 */
    412a:	81 e0       	ldi	r24, 0x01	; 1
    412c:	61 e0       	ldi	r22, 0x01	; 1
    412e:	41 e0       	ldi	r20, 0x01	; 1
    4130:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    4134:	80 e0       	ldi	r24, 0x00	; 0
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	a0 e8       	ldi	r26, 0x80	; 128
    413a:	bf e3       	ldi	r27, 0x3F	; 63
    413c:	8f a3       	std	Y+39, r24	; 0x27
    413e:	98 a7       	std	Y+40, r25	; 0x28
    4140:	a9 a7       	std	Y+41, r26	; 0x29
    4142:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4144:	6f a1       	ldd	r22, Y+39	; 0x27
    4146:	78 a5       	ldd	r23, Y+40	; 0x28
    4148:	89 a5       	ldd	r24, Y+41	; 0x29
    414a:	9a a5       	ldd	r25, Y+42	; 0x2a
    414c:	20 e0       	ldi	r18, 0x00	; 0
    414e:	30 e0       	ldi	r19, 0x00	; 0
    4150:	4a ef       	ldi	r20, 0xFA	; 250
    4152:	54 e4       	ldi	r21, 0x44	; 68
    4154:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4158:	dc 01       	movw	r26, r24
    415a:	cb 01       	movw	r24, r22
    415c:	8b a3       	std	Y+35, r24	; 0x23
    415e:	9c a3       	std	Y+36, r25	; 0x24
    4160:	ad a3       	std	Y+37, r26	; 0x25
    4162:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4164:	6b a1       	ldd	r22, Y+35	; 0x23
    4166:	7c a1       	ldd	r23, Y+36	; 0x24
    4168:	8d a1       	ldd	r24, Y+37	; 0x25
    416a:	9e a1       	ldd	r25, Y+38	; 0x26
    416c:	20 e0       	ldi	r18, 0x00	; 0
    416e:	30 e0       	ldi	r19, 0x00	; 0
    4170:	40 e8       	ldi	r20, 0x80	; 128
    4172:	5f e3       	ldi	r21, 0x3F	; 63
    4174:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4178:	88 23       	and	r24, r24
    417a:	2c f4       	brge	.+10     	; 0x4186 <LCD_displayCharacter+0x160>
		__ticks = 1;
    417c:	81 e0       	ldi	r24, 0x01	; 1
    417e:	90 e0       	ldi	r25, 0x00	; 0
    4180:	9a a3       	std	Y+34, r25	; 0x22
    4182:	89 a3       	std	Y+33, r24	; 0x21
    4184:	3f c0       	rjmp	.+126    	; 0x4204 <LCD_displayCharacter+0x1de>
	else if (__tmp > 65535)
    4186:	6b a1       	ldd	r22, Y+35	; 0x23
    4188:	7c a1       	ldd	r23, Y+36	; 0x24
    418a:	8d a1       	ldd	r24, Y+37	; 0x25
    418c:	9e a1       	ldd	r25, Y+38	; 0x26
    418e:	20 e0       	ldi	r18, 0x00	; 0
    4190:	3f ef       	ldi	r19, 0xFF	; 255
    4192:	4f e7       	ldi	r20, 0x7F	; 127
    4194:	57 e4       	ldi	r21, 0x47	; 71
    4196:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    419a:	18 16       	cp	r1, r24
    419c:	4c f5       	brge	.+82     	; 0x41f0 <LCD_displayCharacter+0x1ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    419e:	6f a1       	ldd	r22, Y+39	; 0x27
    41a0:	78 a5       	ldd	r23, Y+40	; 0x28
    41a2:	89 a5       	ldd	r24, Y+41	; 0x29
    41a4:	9a a5       	ldd	r25, Y+42	; 0x2a
    41a6:	20 e0       	ldi	r18, 0x00	; 0
    41a8:	30 e0       	ldi	r19, 0x00	; 0
    41aa:	40 e2       	ldi	r20, 0x20	; 32
    41ac:	51 e4       	ldi	r21, 0x41	; 65
    41ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    41b2:	dc 01       	movw	r26, r24
    41b4:	cb 01       	movw	r24, r22
    41b6:	bc 01       	movw	r22, r24
    41b8:	cd 01       	movw	r24, r26
    41ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	9a a3       	std	Y+34, r25	; 0x22
    41c4:	89 a3       	std	Y+33, r24	; 0x21
    41c6:	0f c0       	rjmp	.+30     	; 0x41e6 <LCD_displayCharacter+0x1c0>
    41c8:	88 ec       	ldi	r24, 0xC8	; 200
    41ca:	90 e0       	ldi	r25, 0x00	; 0
    41cc:	98 a3       	std	Y+32, r25	; 0x20
    41ce:	8f 8f       	std	Y+31, r24	; 0x1f
    41d0:	8f 8d       	ldd	r24, Y+31	; 0x1f
    41d2:	98 a1       	ldd	r25, Y+32	; 0x20
    41d4:	01 97       	sbiw	r24, 0x01	; 1
    41d6:	f1 f7       	brne	.-4      	; 0x41d4 <LCD_displayCharacter+0x1ae>
    41d8:	98 a3       	std	Y+32, r25	; 0x20
    41da:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41dc:	89 a1       	ldd	r24, Y+33	; 0x21
    41de:	9a a1       	ldd	r25, Y+34	; 0x22
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	9a a3       	std	Y+34, r25	; 0x22
    41e4:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41e6:	89 a1       	ldd	r24, Y+33	; 0x21
    41e8:	9a a1       	ldd	r25, Y+34	; 0x22
    41ea:	00 97       	sbiw	r24, 0x00	; 0
    41ec:	69 f7       	brne	.-38     	; 0x41c8 <LCD_displayCharacter+0x1a2>
    41ee:	14 c0       	rjmp	.+40     	; 0x4218 <LCD_displayCharacter+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41f0:	6b a1       	ldd	r22, Y+35	; 0x23
    41f2:	7c a1       	ldd	r23, Y+36	; 0x24
    41f4:	8d a1       	ldd	r24, Y+37	; 0x25
    41f6:	9e a1       	ldd	r25, Y+38	; 0x26
    41f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    41fc:	dc 01       	movw	r26, r24
    41fe:	cb 01       	movw	r24, r22
    4200:	9a a3       	std	Y+34, r25	; 0x22
    4202:	89 a3       	std	Y+33, r24	; 0x21
    4204:	89 a1       	ldd	r24, Y+33	; 0x21
    4206:	9a a1       	ldd	r25, Y+34	; 0x22
    4208:	9e 8f       	std	Y+30, r25	; 0x1e
    420a:	8d 8f       	std	Y+29, r24	; 0x1d
    420c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    420e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4210:	01 97       	sbiw	r24, 0x01	; 1
    4212:	f1 f7       	brne	.-4      	; 0x4210 <LCD_displayCharacter+0x1ea>
    4214:	9e 8f       	std	Y+30, r25	; 0x1e
    4216:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
	_delay_ms(1); /* delay for processing Th = 13ns */

#elif(LCD_DATA_BITS_MODE == 8)
	GPIO_writePort(LCD_DATA_PORT_ID,data); /* out the required command to the data bus D0 --> D7 */
    4218:	80 e0       	ldi	r24, 0x00	; 0
    421a:	69 ad       	ldd	r22, Y+57	; 0x39
    421c:	0e 94 6b 1b 	call	0x36d6	; 0x36d6 <GPIO_writePort>
    4220:	80 e0       	ldi	r24, 0x00	; 0
    4222:	90 e0       	ldi	r25, 0x00	; 0
    4224:	a0 e8       	ldi	r26, 0x80	; 128
    4226:	bf e3       	ldi	r27, 0x3F	; 63
    4228:	89 8f       	std	Y+25, r24	; 0x19
    422a:	9a 8f       	std	Y+26, r25	; 0x1a
    422c:	ab 8f       	std	Y+27, r26	; 0x1b
    422e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4230:	69 8d       	ldd	r22, Y+25	; 0x19
    4232:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4234:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4236:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4238:	20 e0       	ldi	r18, 0x00	; 0
    423a:	30 e0       	ldi	r19, 0x00	; 0
    423c:	4a ef       	ldi	r20, 0xFA	; 250
    423e:	54 e4       	ldi	r21, 0x44	; 68
    4240:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4244:	dc 01       	movw	r26, r24
    4246:	cb 01       	movw	r24, r22
    4248:	8d 8b       	std	Y+21, r24	; 0x15
    424a:	9e 8b       	std	Y+22, r25	; 0x16
    424c:	af 8b       	std	Y+23, r26	; 0x17
    424e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4250:	6d 89       	ldd	r22, Y+21	; 0x15
    4252:	7e 89       	ldd	r23, Y+22	; 0x16
    4254:	8f 89       	ldd	r24, Y+23	; 0x17
    4256:	98 8d       	ldd	r25, Y+24	; 0x18
    4258:	20 e0       	ldi	r18, 0x00	; 0
    425a:	30 e0       	ldi	r19, 0x00	; 0
    425c:	40 e8       	ldi	r20, 0x80	; 128
    425e:	5f e3       	ldi	r21, 0x3F	; 63
    4260:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4264:	88 23       	and	r24, r24
    4266:	2c f4       	brge	.+10     	; 0x4272 <LCD_displayCharacter+0x24c>
		__ticks = 1;
    4268:	81 e0       	ldi	r24, 0x01	; 1
    426a:	90 e0       	ldi	r25, 0x00	; 0
    426c:	9c 8b       	std	Y+20, r25	; 0x14
    426e:	8b 8b       	std	Y+19, r24	; 0x13
    4270:	3f c0       	rjmp	.+126    	; 0x42f0 <LCD_displayCharacter+0x2ca>
	else if (__tmp > 65535)
    4272:	6d 89       	ldd	r22, Y+21	; 0x15
    4274:	7e 89       	ldd	r23, Y+22	; 0x16
    4276:	8f 89       	ldd	r24, Y+23	; 0x17
    4278:	98 8d       	ldd	r25, Y+24	; 0x18
    427a:	20 e0       	ldi	r18, 0x00	; 0
    427c:	3f ef       	ldi	r19, 0xFF	; 255
    427e:	4f e7       	ldi	r20, 0x7F	; 127
    4280:	57 e4       	ldi	r21, 0x47	; 71
    4282:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4286:	18 16       	cp	r1, r24
    4288:	4c f5       	brge	.+82     	; 0x42dc <LCD_displayCharacter+0x2b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    428a:	69 8d       	ldd	r22, Y+25	; 0x19
    428c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    428e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4290:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4292:	20 e0       	ldi	r18, 0x00	; 0
    4294:	30 e0       	ldi	r19, 0x00	; 0
    4296:	40 e2       	ldi	r20, 0x20	; 32
    4298:	51 e4       	ldi	r21, 0x41	; 65
    429a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    429e:	dc 01       	movw	r26, r24
    42a0:	cb 01       	movw	r24, r22
    42a2:	bc 01       	movw	r22, r24
    42a4:	cd 01       	movw	r24, r26
    42a6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42aa:	dc 01       	movw	r26, r24
    42ac:	cb 01       	movw	r24, r22
    42ae:	9c 8b       	std	Y+20, r25	; 0x14
    42b0:	8b 8b       	std	Y+19, r24	; 0x13
    42b2:	0f c0       	rjmp	.+30     	; 0x42d2 <LCD_displayCharacter+0x2ac>
    42b4:	88 ec       	ldi	r24, 0xC8	; 200
    42b6:	90 e0       	ldi	r25, 0x00	; 0
    42b8:	9a 8b       	std	Y+18, r25	; 0x12
    42ba:	89 8b       	std	Y+17, r24	; 0x11
    42bc:	89 89       	ldd	r24, Y+17	; 0x11
    42be:	9a 89       	ldd	r25, Y+18	; 0x12
    42c0:	01 97       	sbiw	r24, 0x01	; 1
    42c2:	f1 f7       	brne	.-4      	; 0x42c0 <LCD_displayCharacter+0x29a>
    42c4:	9a 8b       	std	Y+18, r25	; 0x12
    42c6:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42c8:	8b 89       	ldd	r24, Y+19	; 0x13
    42ca:	9c 89       	ldd	r25, Y+20	; 0x14
    42cc:	01 97       	sbiw	r24, 0x01	; 1
    42ce:	9c 8b       	std	Y+20, r25	; 0x14
    42d0:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42d2:	8b 89       	ldd	r24, Y+19	; 0x13
    42d4:	9c 89       	ldd	r25, Y+20	; 0x14
    42d6:	00 97       	sbiw	r24, 0x00	; 0
    42d8:	69 f7       	brne	.-38     	; 0x42b4 <LCD_displayCharacter+0x28e>
    42da:	14 c0       	rjmp	.+40     	; 0x4304 <LCD_displayCharacter+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42dc:	6d 89       	ldd	r22, Y+21	; 0x15
    42de:	7e 89       	ldd	r23, Y+22	; 0x16
    42e0:	8f 89       	ldd	r24, Y+23	; 0x17
    42e2:	98 8d       	ldd	r25, Y+24	; 0x18
    42e4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    42e8:	dc 01       	movw	r26, r24
    42ea:	cb 01       	movw	r24, r22
    42ec:	9c 8b       	std	Y+20, r25	; 0x14
    42ee:	8b 8b       	std	Y+19, r24	; 0x13
    42f0:	8b 89       	ldd	r24, Y+19	; 0x13
    42f2:	9c 89       	ldd	r25, Y+20	; 0x14
    42f4:	98 8b       	std	Y+16, r25	; 0x10
    42f6:	8f 87       	std	Y+15, r24	; 0x0f
    42f8:	8f 85       	ldd	r24, Y+15	; 0x0f
    42fa:	98 89       	ldd	r25, Y+16	; 0x10
    42fc:	01 97       	sbiw	r24, 0x01	; 1
    42fe:	f1 f7       	brne	.-4      	; 0x42fc <LCD_displayCharacter+0x2d6>
    4300:	98 8b       	std	Y+16, r25	; 0x10
    4302:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1); /* delay for processing Tdsw = 100ns */
	GPIO_writePin(LCD_E_PORT_ID,LCD_E_PIN_ID,LOGIC_LOW); /* Disable LCD E=0 */
    4304:	81 e0       	ldi	r24, 0x01	; 1
    4306:	61 e0       	ldi	r22, 0x01	; 1
    4308:	40 e0       	ldi	r20, 0x00	; 0
    430a:	0e 94 a1 19 	call	0x3342	; 0x3342 <GPIO_writePin>
    430e:	80 e0       	ldi	r24, 0x00	; 0
    4310:	90 e0       	ldi	r25, 0x00	; 0
    4312:	a0 e8       	ldi	r26, 0x80	; 128
    4314:	bf e3       	ldi	r27, 0x3F	; 63
    4316:	8b 87       	std	Y+11, r24	; 0x0b
    4318:	9c 87       	std	Y+12, r25	; 0x0c
    431a:	ad 87       	std	Y+13, r26	; 0x0d
    431c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    431e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4320:	7c 85       	ldd	r23, Y+12	; 0x0c
    4322:	8d 85       	ldd	r24, Y+13	; 0x0d
    4324:	9e 85       	ldd	r25, Y+14	; 0x0e
    4326:	20 e0       	ldi	r18, 0x00	; 0
    4328:	30 e0       	ldi	r19, 0x00	; 0
    432a:	4a ef       	ldi	r20, 0xFA	; 250
    432c:	54 e4       	ldi	r21, 0x44	; 68
    432e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    4332:	dc 01       	movw	r26, r24
    4334:	cb 01       	movw	r24, r22
    4336:	8f 83       	std	Y+7, r24	; 0x07
    4338:	98 87       	std	Y+8, r25	; 0x08
    433a:	a9 87       	std	Y+9, r26	; 0x09
    433c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    433e:	6f 81       	ldd	r22, Y+7	; 0x07
    4340:	78 85       	ldd	r23, Y+8	; 0x08
    4342:	89 85       	ldd	r24, Y+9	; 0x09
    4344:	9a 85       	ldd	r25, Y+10	; 0x0a
    4346:	20 e0       	ldi	r18, 0x00	; 0
    4348:	30 e0       	ldi	r19, 0x00	; 0
    434a:	40 e8       	ldi	r20, 0x80	; 128
    434c:	5f e3       	ldi	r21, 0x3F	; 63
    434e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    4352:	88 23       	and	r24, r24
    4354:	2c f4       	brge	.+10     	; 0x4360 <LCD_displayCharacter+0x33a>
		__ticks = 1;
    4356:	81 e0       	ldi	r24, 0x01	; 1
    4358:	90 e0       	ldi	r25, 0x00	; 0
    435a:	9e 83       	std	Y+6, r25	; 0x06
    435c:	8d 83       	std	Y+5, r24	; 0x05
    435e:	3f c0       	rjmp	.+126    	; 0x43de <LCD_displayCharacter+0x3b8>
	else if (__tmp > 65535)
    4360:	6f 81       	ldd	r22, Y+7	; 0x07
    4362:	78 85       	ldd	r23, Y+8	; 0x08
    4364:	89 85       	ldd	r24, Y+9	; 0x09
    4366:	9a 85       	ldd	r25, Y+10	; 0x0a
    4368:	20 e0       	ldi	r18, 0x00	; 0
    436a:	3f ef       	ldi	r19, 0xFF	; 255
    436c:	4f e7       	ldi	r20, 0x7F	; 127
    436e:	57 e4       	ldi	r21, 0x47	; 71
    4370:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    4374:	18 16       	cp	r1, r24
    4376:	4c f5       	brge	.+82     	; 0x43ca <LCD_displayCharacter+0x3a4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4378:	6b 85       	ldd	r22, Y+11	; 0x0b
    437a:	7c 85       	ldd	r23, Y+12	; 0x0c
    437c:	8d 85       	ldd	r24, Y+13	; 0x0d
    437e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	30 e0       	ldi	r19, 0x00	; 0
    4384:	40 e2       	ldi	r20, 0x20	; 32
    4386:	51 e4       	ldi	r21, 0x41	; 65
    4388:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    438c:	dc 01       	movw	r26, r24
    438e:	cb 01       	movw	r24, r22
    4390:	bc 01       	movw	r22, r24
    4392:	cd 01       	movw	r24, r26
    4394:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    4398:	dc 01       	movw	r26, r24
    439a:	cb 01       	movw	r24, r22
    439c:	9e 83       	std	Y+6, r25	; 0x06
    439e:	8d 83       	std	Y+5, r24	; 0x05
    43a0:	0f c0       	rjmp	.+30     	; 0x43c0 <LCD_displayCharacter+0x39a>
    43a2:	88 ec       	ldi	r24, 0xC8	; 200
    43a4:	90 e0       	ldi	r25, 0x00	; 0
    43a6:	9c 83       	std	Y+4, r25	; 0x04
    43a8:	8b 83       	std	Y+3, r24	; 0x03
    43aa:	8b 81       	ldd	r24, Y+3	; 0x03
    43ac:	9c 81       	ldd	r25, Y+4	; 0x04
    43ae:	01 97       	sbiw	r24, 0x01	; 1
    43b0:	f1 f7       	brne	.-4      	; 0x43ae <LCD_displayCharacter+0x388>
    43b2:	9c 83       	std	Y+4, r25	; 0x04
    43b4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43b6:	8d 81       	ldd	r24, Y+5	; 0x05
    43b8:	9e 81       	ldd	r25, Y+6	; 0x06
    43ba:	01 97       	sbiw	r24, 0x01	; 1
    43bc:	9e 83       	std	Y+6, r25	; 0x06
    43be:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43c0:	8d 81       	ldd	r24, Y+5	; 0x05
    43c2:	9e 81       	ldd	r25, Y+6	; 0x06
    43c4:	00 97       	sbiw	r24, 0x00	; 0
    43c6:	69 f7       	brne	.-38     	; 0x43a2 <LCD_displayCharacter+0x37c>
    43c8:	14 c0       	rjmp	.+40     	; 0x43f2 <LCD_displayCharacter+0x3cc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43ca:	6f 81       	ldd	r22, Y+7	; 0x07
    43cc:	78 85       	ldd	r23, Y+8	; 0x08
    43ce:	89 85       	ldd	r24, Y+9	; 0x09
    43d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    43d2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    43d6:	dc 01       	movw	r26, r24
    43d8:	cb 01       	movw	r24, r22
    43da:	9e 83       	std	Y+6, r25	; 0x06
    43dc:	8d 83       	std	Y+5, r24	; 0x05
    43de:	8d 81       	ldd	r24, Y+5	; 0x05
    43e0:	9e 81       	ldd	r25, Y+6	; 0x06
    43e2:	9a 83       	std	Y+2, r25	; 0x02
    43e4:	89 83       	std	Y+1, r24	; 0x01
    43e6:	89 81       	ldd	r24, Y+1	; 0x01
    43e8:	9a 81       	ldd	r25, Y+2	; 0x02
    43ea:	01 97       	sbiw	r24, 0x01	; 1
    43ec:	f1 f7       	brne	.-4      	; 0x43ea <LCD_displayCharacter+0x3c4>
    43ee:	9a 83       	std	Y+2, r25	; 0x02
    43f0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1); /* delay for processing Th = 13ns */
#endif
}
    43f2:	e9 96       	adiw	r28, 0x39	; 57
    43f4:	0f b6       	in	r0, 0x3f	; 63
    43f6:	f8 94       	cli
    43f8:	de bf       	out	0x3e, r29	; 62
    43fa:	0f be       	out	0x3f, r0	; 63
    43fc:	cd bf       	out	0x3d, r28	; 61
    43fe:	cf 91       	pop	r28
    4400:	df 91       	pop	r29
    4402:	08 95       	ret

00004404 <LCD_displayString>:
/*
 * Description :
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
    4404:	df 93       	push	r29
    4406:	cf 93       	push	r28
    4408:	00 d0       	rcall	.+0      	; 0x440a <LCD_displayString+0x6>
    440a:	0f 92       	push	r0
    440c:	cd b7       	in	r28, 0x3d	; 61
    440e:	de b7       	in	r29, 0x3e	; 62
    4410:	9b 83       	std	Y+3, r25	; 0x03
    4412:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4414:	19 82       	std	Y+1, r1	; 0x01
    4416:	0e c0       	rjmp	.+28     	; 0x4434 <LCD_displayString+0x30>
	while(Str[i] != '\0')
	{
		LCD_displayCharacter(Str[i]);
    4418:	89 81       	ldd	r24, Y+1	; 0x01
    441a:	28 2f       	mov	r18, r24
    441c:	30 e0       	ldi	r19, 0x00	; 0
    441e:	8a 81       	ldd	r24, Y+2	; 0x02
    4420:	9b 81       	ldd	r25, Y+3	; 0x03
    4422:	fc 01       	movw	r30, r24
    4424:	e2 0f       	add	r30, r18
    4426:	f3 1f       	adc	r31, r19
    4428:	80 81       	ld	r24, Z
    442a:	0e 94 13 20 	call	0x4026	; 0x4026 <LCD_displayCharacter>
		i++;
    442e:	89 81       	ldd	r24, Y+1	; 0x01
    4430:	8f 5f       	subi	r24, 0xFF	; 255
    4432:	89 83       	std	Y+1, r24	; 0x01
 * Display the required string on the screen
 */
void LCD_displayString(const char *Str)
{
	uint8 i = 0;
	while(Str[i] != '\0')
    4434:	89 81       	ldd	r24, Y+1	; 0x01
    4436:	28 2f       	mov	r18, r24
    4438:	30 e0       	ldi	r19, 0x00	; 0
    443a:	8a 81       	ldd	r24, Y+2	; 0x02
    443c:	9b 81       	ldd	r25, Y+3	; 0x03
    443e:	fc 01       	movw	r30, r24
    4440:	e2 0f       	add	r30, r18
    4442:	f3 1f       	adc	r31, r19
    4444:	80 81       	ld	r24, Z
    4446:	88 23       	and	r24, r24
    4448:	39 f7       	brne	.-50     	; 0x4418 <LCD_displayString+0x14>
	{
		LCD_displayCharacter(*Str);
		Str++;
	}
	*********************************************************/
}
    444a:	0f 90       	pop	r0
    444c:	0f 90       	pop	r0
    444e:	0f 90       	pop	r0
    4450:	cf 91       	pop	r28
    4452:	df 91       	pop	r29
    4454:	08 95       	ret

00004456 <LCD_moveCursor>:
/*
 * Description :
 * Move the cursor to a specified row and column index on the screen
 */
void LCD_moveCursor(uint8 row,uint8 col)
{
    4456:	df 93       	push	r29
    4458:	cf 93       	push	r28
    445a:	00 d0       	rcall	.+0      	; 0x445c <LCD_moveCursor+0x6>
    445c:	00 d0       	rcall	.+0      	; 0x445e <LCD_moveCursor+0x8>
    445e:	0f 92       	push	r0
    4460:	cd b7       	in	r28, 0x3d	; 61
    4462:	de b7       	in	r29, 0x3e	; 62
    4464:	8a 83       	std	Y+2, r24	; 0x02
    4466:	6b 83       	std	Y+3, r22	; 0x03
	uint8 lcd_memory_address;

	/* Calculate the required address in the LCD DDRAM */
	switch(row)
    4468:	8a 81       	ldd	r24, Y+2	; 0x02
    446a:	28 2f       	mov	r18, r24
    446c:	30 e0       	ldi	r19, 0x00	; 0
    446e:	3d 83       	std	Y+5, r19	; 0x05
    4470:	2c 83       	std	Y+4, r18	; 0x04
    4472:	8c 81       	ldd	r24, Y+4	; 0x04
    4474:	9d 81       	ldd	r25, Y+5	; 0x05
    4476:	81 30       	cpi	r24, 0x01	; 1
    4478:	91 05       	cpc	r25, r1
    447a:	c1 f0       	breq	.+48     	; 0x44ac <LCD_moveCursor+0x56>
    447c:	2c 81       	ldd	r18, Y+4	; 0x04
    447e:	3d 81       	ldd	r19, Y+5	; 0x05
    4480:	22 30       	cpi	r18, 0x02	; 2
    4482:	31 05       	cpc	r19, r1
    4484:	2c f4       	brge	.+10     	; 0x4490 <LCD_moveCursor+0x3a>
    4486:	8c 81       	ldd	r24, Y+4	; 0x04
    4488:	9d 81       	ldd	r25, Y+5	; 0x05
    448a:	00 97       	sbiw	r24, 0x00	; 0
    448c:	61 f0       	breq	.+24     	; 0x44a6 <LCD_moveCursor+0x50>
    448e:	19 c0       	rjmp	.+50     	; 0x44c2 <LCD_moveCursor+0x6c>
    4490:	2c 81       	ldd	r18, Y+4	; 0x04
    4492:	3d 81       	ldd	r19, Y+5	; 0x05
    4494:	22 30       	cpi	r18, 0x02	; 2
    4496:	31 05       	cpc	r19, r1
    4498:	69 f0       	breq	.+26     	; 0x44b4 <LCD_moveCursor+0x5e>
    449a:	8c 81       	ldd	r24, Y+4	; 0x04
    449c:	9d 81       	ldd	r25, Y+5	; 0x05
    449e:	83 30       	cpi	r24, 0x03	; 3
    44a0:	91 05       	cpc	r25, r1
    44a2:	61 f0       	breq	.+24     	; 0x44bc <LCD_moveCursor+0x66>
    44a4:	0e c0       	rjmp	.+28     	; 0x44c2 <LCD_moveCursor+0x6c>
	{
		case 0:
			lcd_memory_address=col;
    44a6:	8b 81       	ldd	r24, Y+3	; 0x03
    44a8:	89 83       	std	Y+1, r24	; 0x01
    44aa:	0b c0       	rjmp	.+22     	; 0x44c2 <LCD_moveCursor+0x6c>
				break;
		case 1:
			lcd_memory_address=col+0x40;
    44ac:	8b 81       	ldd	r24, Y+3	; 0x03
    44ae:	80 5c       	subi	r24, 0xC0	; 192
    44b0:	89 83       	std	Y+1, r24	; 0x01
    44b2:	07 c0       	rjmp	.+14     	; 0x44c2 <LCD_moveCursor+0x6c>
				break;
		case 2:
			lcd_memory_address=col+0x10;
    44b4:	8b 81       	ldd	r24, Y+3	; 0x03
    44b6:	80 5f       	subi	r24, 0xF0	; 240
    44b8:	89 83       	std	Y+1, r24	; 0x01
    44ba:	03 c0       	rjmp	.+6      	; 0x44c2 <LCD_moveCursor+0x6c>
				break;
		case 3:
			lcd_memory_address=col+0x50;
    44bc:	8b 81       	ldd	r24, Y+3	; 0x03
    44be:	80 5b       	subi	r24, 0xB0	; 176
    44c0:	89 83       	std	Y+1, r24	; 0x01
				break;
	}
	/* Move the LCD cursor to this specific address */
	LCD_sendCommand(lcd_memory_address | LCD_SET_CURSOR_LOCATION);
    44c2:	89 81       	ldd	r24, Y+1	; 0x01
    44c4:	80 68       	ori	r24, 0x80	; 128
    44c6:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_sendCommand>
}
    44ca:	0f 90       	pop	r0
    44cc:	0f 90       	pop	r0
    44ce:	0f 90       	pop	r0
    44d0:	0f 90       	pop	r0
    44d2:	0f 90       	pop	r0
    44d4:	cf 91       	pop	r28
    44d6:	df 91       	pop	r29
    44d8:	08 95       	ret

000044da <LCD_displayStringRowColumn>:
/*
 * Description :
 * Display the required string in a specified row and column index on the screen
 */
void LCD_displayStringRowColumn(uint8 row,uint8 col,const char *Str)
{
    44da:	df 93       	push	r29
    44dc:	cf 93       	push	r28
    44de:	00 d0       	rcall	.+0      	; 0x44e0 <LCD_displayStringRowColumn+0x6>
    44e0:	00 d0       	rcall	.+0      	; 0x44e2 <LCD_displayStringRowColumn+0x8>
    44e2:	cd b7       	in	r28, 0x3d	; 61
    44e4:	de b7       	in	r29, 0x3e	; 62
    44e6:	89 83       	std	Y+1, r24	; 0x01
    44e8:	6a 83       	std	Y+2, r22	; 0x02
    44ea:	5c 83       	std	Y+4, r21	; 0x04
    44ec:	4b 83       	std	Y+3, r20	; 0x03
	LCD_moveCursor(row,col); /* go to to the required LCD position */
    44ee:	89 81       	ldd	r24, Y+1	; 0x01
    44f0:	6a 81       	ldd	r22, Y+2	; 0x02
    44f2:	0e 94 2b 22 	call	0x4456	; 0x4456 <LCD_moveCursor>
	LCD_displayString(Str); /* display the string */
    44f6:	8b 81       	ldd	r24, Y+3	; 0x03
    44f8:	9c 81       	ldd	r25, Y+4	; 0x04
    44fa:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
}
    44fe:	0f 90       	pop	r0
    4500:	0f 90       	pop	r0
    4502:	0f 90       	pop	r0
    4504:	0f 90       	pop	r0
    4506:	cf 91       	pop	r28
    4508:	df 91       	pop	r29
    450a:	08 95       	ret

0000450c <LCD_intgerToString>:
/*
 * Description :
 * Display the required decimal value on the screen
 */
void LCD_intgerToString(int data)
{
    450c:	df 93       	push	r29
    450e:	cf 93       	push	r28
    4510:	cd b7       	in	r28, 0x3d	; 61
    4512:	de b7       	in	r29, 0x3e	; 62
    4514:	62 97       	sbiw	r28, 0x12	; 18
    4516:	0f b6       	in	r0, 0x3f	; 63
    4518:	f8 94       	cli
    451a:	de bf       	out	0x3e, r29	; 62
    451c:	0f be       	out	0x3f, r0	; 63
    451e:	cd bf       	out	0x3d, r28	; 61
    4520:	9a 8b       	std	Y+18, r25	; 0x12
    4522:	89 8b       	std	Y+17, r24	; 0x11
   char buff[16]; /* String to hold the ascii result */
   itoa(data,buff,10); /* Use itoa C function to convert the data to its corresponding ASCII value, 10 for decimal */
    4524:	89 89       	ldd	r24, Y+17	; 0x11
    4526:	9a 89       	ldd	r25, Y+18	; 0x12
    4528:	9e 01       	movw	r18, r28
    452a:	2f 5f       	subi	r18, 0xFF	; 255
    452c:	3f 4f       	sbci	r19, 0xFF	; 255
    452e:	b9 01       	movw	r22, r18
    4530:	4a e0       	ldi	r20, 0x0A	; 10
    4532:	50 e0       	ldi	r21, 0x00	; 0
    4534:	0e 94 43 25 	call	0x4a86	; 0x4a86 <itoa>
   LCD_displayString(buff); /* Display the string */
    4538:	ce 01       	movw	r24, r28
    453a:	01 96       	adiw	r24, 0x01	; 1
    453c:	0e 94 02 22 	call	0x4404	; 0x4404 <LCD_displayString>
}
    4540:	62 96       	adiw	r28, 0x12	; 18
    4542:	0f b6       	in	r0, 0x3f	; 63
    4544:	f8 94       	cli
    4546:	de bf       	out	0x3e, r29	; 62
    4548:	0f be       	out	0x3f, r0	; 63
    454a:	cd bf       	out	0x3d, r28	; 61
    454c:	cf 91       	pop	r28
    454e:	df 91       	pop	r29
    4550:	08 95       	ret

00004552 <LCD_clearScreen>:
/*
 * Description :
 * Send the clear screen command
 */
void LCD_clearScreen(void)
{
    4552:	df 93       	push	r29
    4554:	cf 93       	push	r28
    4556:	cd b7       	in	r28, 0x3d	; 61
    4558:	de b7       	in	r29, 0x3e	; 62
	LCD_sendCommand(LCD_CLEAR_COMMAND); /* Send clear display command */
    455a:	81 e0       	ldi	r24, 0x01	; 1
    455c:	0e 94 24 1e 	call	0x3c48	; 0x3c48 <LCD_sendCommand>
}
    4560:	cf 91       	pop	r28
    4562:	df 91       	pop	r29
    4564:	08 95       	ret

00004566 <__vector_9>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBack_ptr)(void) = NULL_PTR ; /* Global Pointer to Function */

/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    4566:	1f 92       	push	r1
    4568:	0f 92       	push	r0
    456a:	0f b6       	in	r0, 0x3f	; 63
    456c:	0f 92       	push	r0
    456e:	11 24       	eor	r1, r1
    4570:	2f 93       	push	r18
    4572:	3f 93       	push	r19
    4574:	4f 93       	push	r20
    4576:	5f 93       	push	r21
    4578:	6f 93       	push	r22
    457a:	7f 93       	push	r23
    457c:	8f 93       	push	r24
    457e:	9f 93       	push	r25
    4580:	af 93       	push	r26
    4582:	bf 93       	push	r27
    4584:	ef 93       	push	r30
    4586:	ff 93       	push	r31
    4588:	df 93       	push	r29
    458a:	cf 93       	push	r28
    458c:	cd b7       	in	r28, 0x3d	; 61
    458e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    4590:	80 91 3a 01 	lds	r24, 0x013A
    4594:	90 91 3b 01 	lds	r25, 0x013B
    4598:	00 97       	sbiw	r24, 0x00	; 0
    459a:	29 f0       	breq	.+10     	; 0x45a6 <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    459c:	e0 91 3a 01 	lds	r30, 0x013A
    45a0:	f0 91 3b 01 	lds	r31, 0x013B
    45a4:	09 95       	icall
	}
}
    45a6:	cf 91       	pop	r28
    45a8:	df 91       	pop	r29
    45aa:	ff 91       	pop	r31
    45ac:	ef 91       	pop	r30
    45ae:	bf 91       	pop	r27
    45b0:	af 91       	pop	r26
    45b2:	9f 91       	pop	r25
    45b4:	8f 91       	pop	r24
    45b6:	7f 91       	pop	r23
    45b8:	6f 91       	pop	r22
    45ba:	5f 91       	pop	r21
    45bc:	4f 91       	pop	r20
    45be:	3f 91       	pop	r19
    45c0:	2f 91       	pop	r18
    45c2:	0f 90       	pop	r0
    45c4:	0f be       	out	0x3f, r0	; 63
    45c6:	0f 90       	pop	r0
    45c8:	1f 90       	pop	r1
    45ca:	18 95       	reti

000045cc <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    45cc:	1f 92       	push	r1
    45ce:	0f 92       	push	r0
    45d0:	0f b6       	in	r0, 0x3f	; 63
    45d2:	0f 92       	push	r0
    45d4:	11 24       	eor	r1, r1
    45d6:	2f 93       	push	r18
    45d8:	3f 93       	push	r19
    45da:	4f 93       	push	r20
    45dc:	5f 93       	push	r21
    45de:	6f 93       	push	r22
    45e0:	7f 93       	push	r23
    45e2:	8f 93       	push	r24
    45e4:	9f 93       	push	r25
    45e6:	af 93       	push	r26
    45e8:	bf 93       	push	r27
    45ea:	ef 93       	push	r30
    45ec:	ff 93       	push	r31
    45ee:	df 93       	push	r29
    45f0:	cf 93       	push	r28
    45f2:	cd b7       	in	r28, 0x3d	; 61
    45f4:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    45f6:	80 91 3a 01 	lds	r24, 0x013A
    45fa:	90 91 3b 01 	lds	r25, 0x013B
    45fe:	00 97       	sbiw	r24, 0x00	; 0
    4600:	29 f0       	breq	.+10     	; 0x460c <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    4602:	e0 91 3a 01 	lds	r30, 0x013A
    4606:	f0 91 3b 01 	lds	r31, 0x013B
    460a:	09 95       	icall
	}
}
    460c:	cf 91       	pop	r28
    460e:	df 91       	pop	r29
    4610:	ff 91       	pop	r31
    4612:	ef 91       	pop	r30
    4614:	bf 91       	pop	r27
    4616:	af 91       	pop	r26
    4618:	9f 91       	pop	r25
    461a:	8f 91       	pop	r24
    461c:	7f 91       	pop	r23
    461e:	6f 91       	pop	r22
    4620:	5f 91       	pop	r21
    4622:	4f 91       	pop	r20
    4624:	3f 91       	pop	r19
    4626:	2f 91       	pop	r18
    4628:	0f 90       	pop	r0
    462a:	0f be       	out	0x3f, r0	; 63
    462c:	0f 90       	pop	r0
    462e:	1f 90       	pop	r1
    4630:	18 95       	reti

00004632 <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    4632:	1f 92       	push	r1
    4634:	0f 92       	push	r0
    4636:	0f b6       	in	r0, 0x3f	; 63
    4638:	0f 92       	push	r0
    463a:	11 24       	eor	r1, r1
    463c:	2f 93       	push	r18
    463e:	3f 93       	push	r19
    4640:	4f 93       	push	r20
    4642:	5f 93       	push	r21
    4644:	6f 93       	push	r22
    4646:	7f 93       	push	r23
    4648:	8f 93       	push	r24
    464a:	9f 93       	push	r25
    464c:	af 93       	push	r26
    464e:	bf 93       	push	r27
    4650:	ef 93       	push	r30
    4652:	ff 93       	push	r31
    4654:	df 93       	push	r29
    4656:	cf 93       	push	r28
    4658:	cd b7       	in	r28, 0x3d	; 61
    465a:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    465c:	80 91 3a 01 	lds	r24, 0x013A
    4660:	90 91 3b 01 	lds	r25, 0x013B
    4664:	00 97       	sbiw	r24, 0x00	; 0
    4666:	29 f0       	breq	.+10     	; 0x4672 <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    4668:	e0 91 3a 01 	lds	r30, 0x013A
    466c:	f0 91 3b 01 	lds	r31, 0x013B
    4670:	09 95       	icall
	}
}
    4672:	cf 91       	pop	r28
    4674:	df 91       	pop	r29
    4676:	ff 91       	pop	r31
    4678:	ef 91       	pop	r30
    467a:	bf 91       	pop	r27
    467c:	af 91       	pop	r26
    467e:	9f 91       	pop	r25
    4680:	8f 91       	pop	r24
    4682:	7f 91       	pop	r23
    4684:	6f 91       	pop	r22
    4686:	5f 91       	pop	r21
    4688:	4f 91       	pop	r20
    468a:	3f 91       	pop	r19
    468c:	2f 91       	pop	r18
    468e:	0f 90       	pop	r0
    4690:	0f be       	out	0x3f, r0	; 63
    4692:	0f 90       	pop	r0
    4694:	1f 90       	pop	r1
    4696:	18 95       	reti

00004698 <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    4698:	df 93       	push	r29
    469a:	cf 93       	push	r28
    469c:	00 d0       	rcall	.+0      	; 0x469e <Timer1_init+0x6>
    469e:	cd b7       	in	r28, 0x3d	; 61
    46a0:	de b7       	in	r29, 0x3e	; 62
    46a2:	9a 83       	std	Y+2, r25	; 0x02
    46a4:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    46a6:	ef e4       	ldi	r30, 0x4F	; 79
    46a8:	f0 e0       	ldi	r31, 0x00	; 0
    46aa:	8c e0       	ldi	r24, 0x0C	; 12
    46ac:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    46ae:	af e4       	ldi	r26, 0x4F	; 79
    46b0:	b0 e0       	ldi	r27, 0x00	; 0
    46b2:	ef e4       	ldi	r30, 0x4F	; 79
    46b4:	f0 e0       	ldi	r31, 0x00	; 0
    46b6:	80 81       	ld	r24, Z
    46b8:	98 2f       	mov	r25, r24
    46ba:	9c 7f       	andi	r25, 0xFC	; 252
    46bc:	e9 81       	ldd	r30, Y+1	; 0x01
    46be:	fa 81       	ldd	r31, Y+2	; 0x02
    46c0:	85 81       	ldd	r24, Z+5	; 0x05
    46c2:	83 70       	andi	r24, 0x03	; 3
    46c4:	89 2b       	or	r24, r25
    46c6:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    46c8:	ae e4       	ldi	r26, 0x4E	; 78
    46ca:	b0 e0       	ldi	r27, 0x00	; 0
    46cc:	ee e4       	ldi	r30, 0x4E	; 78
    46ce:	f0 e0       	ldi	r31, 0x00	; 0
    46d0:	80 81       	ld	r24, Z
    46d2:	28 2f       	mov	r18, r24
    46d4:	27 7e       	andi	r18, 0xE7	; 231
    46d6:	e9 81       	ldd	r30, Y+1	; 0x01
    46d8:	fa 81       	ldd	r31, Y+2	; 0x02
    46da:	85 81       	ldd	r24, Z+5	; 0x05
    46dc:	88 2f       	mov	r24, r24
    46de:	90 e0       	ldi	r25, 0x00	; 0
    46e0:	8c 70       	andi	r24, 0x0C	; 12
    46e2:	90 70       	andi	r25, 0x00	; 0
    46e4:	88 0f       	add	r24, r24
    46e6:	99 1f       	adc	r25, r25
    46e8:	82 2b       	or	r24, r18
    46ea:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    46ec:	ac e4       	ldi	r26, 0x4C	; 76
    46ee:	b0 e0       	ldi	r27, 0x00	; 0
    46f0:	e9 81       	ldd	r30, Y+1	; 0x01
    46f2:	fa 81       	ldd	r31, Y+2	; 0x02
    46f4:	80 81       	ld	r24, Z
    46f6:	91 81       	ldd	r25, Z+1	; 0x01
    46f8:	11 96       	adiw	r26, 0x01	; 1
    46fa:	9c 93       	st	X, r25
    46fc:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    46fe:	e9 81       	ldd	r30, Y+1	; 0x01
    4700:	fa 81       	ldd	r31, Y+2	; 0x02
    4702:	85 81       	ldd	r24, Z+5	; 0x05
    4704:	88 23       	and	r24, r24
    4706:	29 f4       	brne	.+10     	; 0x4712 <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    4708:	e9 e5       	ldi	r30, 0x59	; 89
    470a:	f0 e0       	ldi	r31, 0x00	; 0
    470c:	84 e0       	ldi	r24, 0x04	; 4
    470e:	80 83       	st	Z, r24
    4710:	12 c0       	rjmp	.+36     	; 0x4736 <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    4712:	e9 81       	ldd	r30, Y+1	; 0x01
    4714:	fa 81       	ldd	r31, Y+2	; 0x02
    4716:	85 81       	ldd	r24, Z+5	; 0x05
    4718:	84 30       	cpi	r24, 0x04	; 4
    471a:	69 f4       	brne	.+26     	; 0x4736 <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    471c:	aa e4       	ldi	r26, 0x4A	; 74
    471e:	b0 e0       	ldi	r27, 0x00	; 0
    4720:	e9 81       	ldd	r30, Y+1	; 0x01
    4722:	fa 81       	ldd	r31, Y+2	; 0x02
    4724:	82 81       	ldd	r24, Z+2	; 0x02
    4726:	93 81       	ldd	r25, Z+3	; 0x03
    4728:	11 96       	adiw	r26, 0x01	; 1
    472a:	9c 93       	st	X, r25
    472c:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    472e:	e9 e5       	ldi	r30, 0x59	; 89
    4730:	f0 e0       	ldi	r31, 0x00	; 0
    4732:	80 e1       	ldi	r24, 0x10	; 16
    4734:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    4736:	ae e4       	ldi	r26, 0x4E	; 78
    4738:	b0 e0       	ldi	r27, 0x00	; 0
    473a:	ee e4       	ldi	r30, 0x4E	; 78
    473c:	f0 e0       	ldi	r31, 0x00	; 0
    473e:	80 81       	ld	r24, Z
    4740:	98 2f       	mov	r25, r24
    4742:	98 7f       	andi	r25, 0xF8	; 248
    4744:	e9 81       	ldd	r30, Y+1	; 0x01
    4746:	fa 81       	ldd	r31, Y+2	; 0x02
    4748:	84 81       	ldd	r24, Z+4	; 0x04
    474a:	89 2b       	or	r24, r25
    474c:	8c 93       	st	X, r24
}
    474e:	0f 90       	pop	r0
    4750:	0f 90       	pop	r0
    4752:	cf 91       	pop	r28
    4754:	df 91       	pop	r29
    4756:	08 95       	ret

00004758 <Timer1_deInit>:

void Timer1_deInit(void){
    4758:	df 93       	push	r29
    475a:	cf 93       	push	r28
    475c:	cd b7       	in	r28, 0x3d	; 61
    475e:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
    4760:	ef e4       	ldi	r30, 0x4F	; 79
    4762:	f0 e0       	ldi	r31, 0x00	; 0
    4764:	10 82       	st	Z, r1
	TCCR1B =0;
    4766:	ee e4       	ldi	r30, 0x4E	; 78
    4768:	f0 e0       	ldi	r31, 0x00	; 0
    476a:	10 82       	st	Z, r1
	TIMSK =0;
    476c:	e9 e5       	ldi	r30, 0x59	; 89
    476e:	f0 e0       	ldi	r31, 0x00	; 0
    4770:	10 82       	st	Z, r1

}
    4772:	cf 91       	pop	r28
    4774:	df 91       	pop	r29
    4776:	08 95       	ret

00004778 <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void))
{
    4778:	df 93       	push	r29
    477a:	cf 93       	push	r28
    477c:	00 d0       	rcall	.+0      	; 0x477e <Timer1_setCallBack+0x6>
    477e:	cd b7       	in	r28, 0x3d	; 61
    4780:	de b7       	in	r29, 0x3e	; 62
    4782:	9a 83       	std	Y+2, r25	; 0x02
    4784:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    4786:	89 81       	ldd	r24, Y+1	; 0x01
    4788:	9a 81       	ldd	r25, Y+2	; 0x02
    478a:	90 93 3b 01 	sts	0x013B, r25
    478e:	80 93 3a 01 	sts	0x013A, r24
}
    4792:	0f 90       	pop	r0
    4794:	0f 90       	pop	r0
    4796:	cf 91       	pop	r28
    4798:	df 91       	pop	r29
    479a:	08 95       	ret

0000479c <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType *config_ptr)
{
    479c:	df 93       	push	r29
    479e:	cf 93       	push	r28
    47a0:	00 d0       	rcall	.+0      	; 0x47a2 <UART_init+0x6>
    47a2:	00 d0       	rcall	.+0      	; 0x47a4 <UART_init+0x8>
    47a4:	cd b7       	in	r28, 0x3d	; 61
    47a6:	de b7       	in	r29, 0x3e	; 62
    47a8:	9c 83       	std	Y+4, r25	; 0x04
    47aa:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    47ac:	1a 82       	std	Y+2, r1	; 0x02
    47ae:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    47b0:	eb e2       	ldi	r30, 0x2B	; 43
    47b2:	f0 e0       	ldi	r31, 0x00	; 0
    47b4:	82 e0       	ldi	r24, 0x02	; 2
    47b6:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    47b8:	ea e2       	ldi	r30, 0x2A	; 42
    47ba:	f0 e0       	ldi	r31, 0x00	; 0
    47bc:	88 e1       	ldi	r24, 0x18	; 24
    47be:	80 83       	st	Z, r24

	if(config_ptr->bit_data==9){
    47c0:	eb 81       	ldd	r30, Y+3	; 0x03
    47c2:	fc 81       	ldd	r31, Y+4	; 0x04
    47c4:	80 81       	ld	r24, Z
    47c6:	89 30       	cpi	r24, 0x09	; 9
    47c8:	21 f5       	brne	.+72     	; 0x4812 <UART_init+0x76>
			UCSRB|=(1<<UCSZ2);
    47ca:	aa e2       	ldi	r26, 0x2A	; 42
    47cc:	b0 e0       	ldi	r27, 0x00	; 0
    47ce:	ea e2       	ldi	r30, 0x2A	; 42
    47d0:	f0 e0       	ldi	r31, 0x00	; 0
    47d2:	80 81       	ld	r24, Z
    47d4:	84 60       	ori	r24, 0x04	; 4
    47d6:	8c 93       	st	X, r24
			UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)|(config_ptr->stop_bit<<3)|(config_ptr->parity<<4);
    47d8:	a0 e4       	ldi	r26, 0x40	; 64
    47da:	b0 e0       	ldi	r27, 0x00	; 0
    47dc:	eb 81       	ldd	r30, Y+3	; 0x03
    47de:	fc 81       	ldd	r31, Y+4	; 0x04
    47e0:	82 81       	ldd	r24, Z+2	; 0x02
    47e2:	88 2f       	mov	r24, r24
    47e4:	90 e0       	ldi	r25, 0x00	; 0
    47e6:	88 0f       	add	r24, r24
    47e8:	99 1f       	adc	r25, r25
    47ea:	88 0f       	add	r24, r24
    47ec:	99 1f       	adc	r25, r25
    47ee:	88 0f       	add	r24, r24
    47f0:	99 1f       	adc	r25, r25
    47f2:	28 2f       	mov	r18, r24
    47f4:	26 68       	ori	r18, 0x86	; 134
    47f6:	eb 81       	ldd	r30, Y+3	; 0x03
    47f8:	fc 81       	ldd	r31, Y+4	; 0x04
    47fa:	81 81       	ldd	r24, Z+1	; 0x01
    47fc:	88 2f       	mov	r24, r24
    47fe:	90 e0       	ldi	r25, 0x00	; 0
    4800:	82 95       	swap	r24
    4802:	92 95       	swap	r25
    4804:	90 7f       	andi	r25, 0xF0	; 240
    4806:	98 27       	eor	r25, r24
    4808:	80 7f       	andi	r24, 0xF0	; 240
    480a:	98 27       	eor	r25, r24
    480c:	82 2b       	or	r24, r18
    480e:	8c 93       	st	X, r24
    4810:	1c c0       	rjmp	.+56     	; 0x484a <UART_init+0xae>
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|(config_ptr->stop_bit<<3)|(config_ptr->parity<<4);
    4812:	a0 e4       	ldi	r26, 0x40	; 64
    4814:	b0 e0       	ldi	r27, 0x00	; 0
    4816:	eb 81       	ldd	r30, Y+3	; 0x03
    4818:	fc 81       	ldd	r31, Y+4	; 0x04
    481a:	82 81       	ldd	r24, Z+2	; 0x02
    481c:	88 2f       	mov	r24, r24
    481e:	90 e0       	ldi	r25, 0x00	; 0
    4820:	88 0f       	add	r24, r24
    4822:	99 1f       	adc	r25, r25
    4824:	88 0f       	add	r24, r24
    4826:	99 1f       	adc	r25, r25
    4828:	88 0f       	add	r24, r24
    482a:	99 1f       	adc	r25, r25
    482c:	28 2f       	mov	r18, r24
    482e:	26 68       	ori	r18, 0x86	; 134
    4830:	eb 81       	ldd	r30, Y+3	; 0x03
    4832:	fc 81       	ldd	r31, Y+4	; 0x04
    4834:	81 81       	ldd	r24, Z+1	; 0x01
    4836:	88 2f       	mov	r24, r24
    4838:	90 e0       	ldi	r25, 0x00	; 0
    483a:	82 95       	swap	r24
    483c:	92 95       	swap	r25
    483e:	90 7f       	andi	r25, 0xF0	; 240
    4840:	98 27       	eor	r25, r24
    4842:	80 7f       	andi	r24, 0xF0	; 240
    4844:	98 27       	eor	r25, r24
    4846:	82 2b       	or	r24, r18
    4848:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->UART_BaudRate * 8UL))) - 1);
    484a:	eb 81       	ldd	r30, Y+3	; 0x03
    484c:	fc 81       	ldd	r31, Y+4	; 0x04
    484e:	83 81       	ldd	r24, Z+3	; 0x03
    4850:	94 81       	ldd	r25, Z+4	; 0x04
    4852:	a5 81       	ldd	r26, Z+5	; 0x05
    4854:	b6 81       	ldd	r27, Z+6	; 0x06
    4856:	88 0f       	add	r24, r24
    4858:	99 1f       	adc	r25, r25
    485a:	aa 1f       	adc	r26, r26
    485c:	bb 1f       	adc	r27, r27
    485e:	88 0f       	add	r24, r24
    4860:	99 1f       	adc	r25, r25
    4862:	aa 1f       	adc	r26, r26
    4864:	bb 1f       	adc	r27, r27
    4866:	88 0f       	add	r24, r24
    4868:	99 1f       	adc	r25, r25
    486a:	aa 1f       	adc	r26, r26
    486c:	bb 1f       	adc	r27, r27
    486e:	9c 01       	movw	r18, r24
    4870:	ad 01       	movw	r20, r26
    4872:	80 e0       	ldi	r24, 0x00	; 0
    4874:	92 e1       	ldi	r25, 0x12	; 18
    4876:	aa e7       	ldi	r26, 0x7A	; 122
    4878:	b0 e0       	ldi	r27, 0x00	; 0
    487a:	bc 01       	movw	r22, r24
    487c:	cd 01       	movw	r24, r26
    487e:	0e 94 ea 24 	call	0x49d4	; 0x49d4 <__udivmodsi4>
    4882:	da 01       	movw	r26, r20
    4884:	c9 01       	movw	r24, r18
    4886:	01 97       	sbiw	r24, 0x01	; 1
    4888:	9a 83       	std	Y+2, r25	; 0x02
    488a:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    488c:	e0 e4       	ldi	r30, 0x40	; 64
    488e:	f0 e0       	ldi	r31, 0x00	; 0
    4890:	89 81       	ldd	r24, Y+1	; 0x01
    4892:	9a 81       	ldd	r25, Y+2	; 0x02
    4894:	89 2f       	mov	r24, r25
    4896:	99 27       	eor	r25, r25
    4898:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    489a:	e9 e2       	ldi	r30, 0x29	; 41
    489c:	f0 e0       	ldi	r31, 0x00	; 0
    489e:	89 81       	ldd	r24, Y+1	; 0x01
    48a0:	80 83       	st	Z, r24
}
    48a2:	0f 90       	pop	r0
    48a4:	0f 90       	pop	r0
    48a6:	0f 90       	pop	r0
    48a8:	0f 90       	pop	r0
    48aa:	cf 91       	pop	r28
    48ac:	df 91       	pop	r29
    48ae:	08 95       	ret

000048b0 <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    48b0:	df 93       	push	r29
    48b2:	cf 93       	push	r28
    48b4:	0f 92       	push	r0
    48b6:	cd b7       	in	r28, 0x3d	; 61
    48b8:	de b7       	in	r29, 0x3e	; 62
    48ba:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    48bc:	eb e2       	ldi	r30, 0x2B	; 43
    48be:	f0 e0       	ldi	r31, 0x00	; 0
    48c0:	80 81       	ld	r24, Z
    48c2:	88 2f       	mov	r24, r24
    48c4:	90 e0       	ldi	r25, 0x00	; 0
    48c6:	80 72       	andi	r24, 0x20	; 32
    48c8:	90 70       	andi	r25, 0x00	; 0
    48ca:	00 97       	sbiw	r24, 0x00	; 0
    48cc:	b9 f3       	breq	.-18     	; 0x48bc <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    48ce:	ec e2       	ldi	r30, 0x2C	; 44
    48d0:	f0 e0       	ldi	r31, 0x00	; 0
    48d2:	89 81       	ldd	r24, Y+1	; 0x01
    48d4:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    48d6:	0f 90       	pop	r0
    48d8:	cf 91       	pop	r28
    48da:	df 91       	pop	r29
    48dc:	08 95       	ret

000048de <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    48de:	df 93       	push	r29
    48e0:	cf 93       	push	r28
    48e2:	cd b7       	in	r28, 0x3d	; 61
    48e4:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    48e6:	eb e2       	ldi	r30, 0x2B	; 43
    48e8:	f0 e0       	ldi	r31, 0x00	; 0
    48ea:	80 81       	ld	r24, Z
    48ec:	88 23       	and	r24, r24
    48ee:	dc f7       	brge	.-10     	; 0x48e6 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    48f0:	ec e2       	ldi	r30, 0x2C	; 44
    48f2:	f0 e0       	ldi	r31, 0x00	; 0
    48f4:	80 81       	ld	r24, Z
}
    48f6:	cf 91       	pop	r28
    48f8:	df 91       	pop	r29
    48fa:	08 95       	ret

000048fc <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    48fc:	df 93       	push	r29
    48fe:	cf 93       	push	r28
    4900:	00 d0       	rcall	.+0      	; 0x4902 <UART_sendString+0x6>
    4902:	0f 92       	push	r0
    4904:	cd b7       	in	r28, 0x3d	; 61
    4906:	de b7       	in	r29, 0x3e	; 62
    4908:	9b 83       	std	Y+3, r25	; 0x03
    490a:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    490c:	19 82       	std	Y+1, r1	; 0x01
    490e:	0e c0       	rjmp	.+28     	; 0x492c <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    4910:	89 81       	ldd	r24, Y+1	; 0x01
    4912:	28 2f       	mov	r18, r24
    4914:	30 e0       	ldi	r19, 0x00	; 0
    4916:	8a 81       	ldd	r24, Y+2	; 0x02
    4918:	9b 81       	ldd	r25, Y+3	; 0x03
    491a:	fc 01       	movw	r30, r24
    491c:	e2 0f       	add	r30, r18
    491e:	f3 1f       	adc	r31, r19
    4920:	80 81       	ld	r24, Z
    4922:	0e 94 58 24 	call	0x48b0	; 0x48b0 <UART_sendByte>
		i++;
    4926:	89 81       	ldd	r24, Y+1	; 0x01
    4928:	8f 5f       	subi	r24, 0xFF	; 255
    492a:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    492c:	89 81       	ldd	r24, Y+1	; 0x01
    492e:	28 2f       	mov	r18, r24
    4930:	30 e0       	ldi	r19, 0x00	; 0
    4932:	8a 81       	ldd	r24, Y+2	; 0x02
    4934:	9b 81       	ldd	r25, Y+3	; 0x03
    4936:	fc 01       	movw	r30, r24
    4938:	e2 0f       	add	r30, r18
    493a:	f3 1f       	adc	r31, r19
    493c:	80 81       	ld	r24, Z
    493e:	88 23       	and	r24, r24
    4940:	39 f7       	brne	.-50     	; 0x4910 <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    4942:	0f 90       	pop	r0
    4944:	0f 90       	pop	r0
    4946:	0f 90       	pop	r0
    4948:	cf 91       	pop	r28
    494a:	df 91       	pop	r29
    494c:	08 95       	ret

0000494e <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    494e:	0f 93       	push	r16
    4950:	1f 93       	push	r17
    4952:	df 93       	push	r29
    4954:	cf 93       	push	r28
    4956:	00 d0       	rcall	.+0      	; 0x4958 <UART_receiveString+0xa>
    4958:	0f 92       	push	r0
    495a:	cd b7       	in	r28, 0x3d	; 61
    495c:	de b7       	in	r29, 0x3e	; 62
    495e:	9b 83       	std	Y+3, r25	; 0x03
    4960:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    4962:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    4964:	89 81       	ldd	r24, Y+1	; 0x01
    4966:	28 2f       	mov	r18, r24
    4968:	30 e0       	ldi	r19, 0x00	; 0
    496a:	8a 81       	ldd	r24, Y+2	; 0x02
    496c:	9b 81       	ldd	r25, Y+3	; 0x03
    496e:	8c 01       	movw	r16, r24
    4970:	02 0f       	add	r16, r18
    4972:	13 1f       	adc	r17, r19
    4974:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_recieveByte>
    4978:	f8 01       	movw	r30, r16
    497a:	80 83       	st	Z, r24
    497c:	0f c0       	rjmp	.+30     	; 0x499c <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    497e:	89 81       	ldd	r24, Y+1	; 0x01
    4980:	8f 5f       	subi	r24, 0xFF	; 255
    4982:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    4984:	89 81       	ldd	r24, Y+1	; 0x01
    4986:	28 2f       	mov	r18, r24
    4988:	30 e0       	ldi	r19, 0x00	; 0
    498a:	8a 81       	ldd	r24, Y+2	; 0x02
    498c:	9b 81       	ldd	r25, Y+3	; 0x03
    498e:	8c 01       	movw	r16, r24
    4990:	02 0f       	add	r16, r18
    4992:	13 1f       	adc	r17, r19
    4994:	0e 94 6f 24 	call	0x48de	; 0x48de <UART_recieveByte>
    4998:	f8 01       	movw	r30, r16
    499a:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    499c:	89 81       	ldd	r24, Y+1	; 0x01
    499e:	28 2f       	mov	r18, r24
    49a0:	30 e0       	ldi	r19, 0x00	; 0
    49a2:	8a 81       	ldd	r24, Y+2	; 0x02
    49a4:	9b 81       	ldd	r25, Y+3	; 0x03
    49a6:	fc 01       	movw	r30, r24
    49a8:	e2 0f       	add	r30, r18
    49aa:	f3 1f       	adc	r31, r19
    49ac:	80 81       	ld	r24, Z
    49ae:	83 32       	cpi	r24, 0x23	; 35
    49b0:	31 f7       	brne	.-52     	; 0x497e <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    49b2:	89 81       	ldd	r24, Y+1	; 0x01
    49b4:	28 2f       	mov	r18, r24
    49b6:	30 e0       	ldi	r19, 0x00	; 0
    49b8:	8a 81       	ldd	r24, Y+2	; 0x02
    49ba:	9b 81       	ldd	r25, Y+3	; 0x03
    49bc:	fc 01       	movw	r30, r24
    49be:	e2 0f       	add	r30, r18
    49c0:	f3 1f       	adc	r31, r19
    49c2:	10 82       	st	Z, r1
}
    49c4:	0f 90       	pop	r0
    49c6:	0f 90       	pop	r0
    49c8:	0f 90       	pop	r0
    49ca:	cf 91       	pop	r28
    49cc:	df 91       	pop	r29
    49ce:	1f 91       	pop	r17
    49d0:	0f 91       	pop	r16
    49d2:	08 95       	ret

000049d4 <__udivmodsi4>:
    49d4:	a1 e2       	ldi	r26, 0x21	; 33
    49d6:	1a 2e       	mov	r1, r26
    49d8:	aa 1b       	sub	r26, r26
    49da:	bb 1b       	sub	r27, r27
    49dc:	fd 01       	movw	r30, r26
    49de:	0d c0       	rjmp	.+26     	; 0x49fa <__udivmodsi4_ep>

000049e0 <__udivmodsi4_loop>:
    49e0:	aa 1f       	adc	r26, r26
    49e2:	bb 1f       	adc	r27, r27
    49e4:	ee 1f       	adc	r30, r30
    49e6:	ff 1f       	adc	r31, r31
    49e8:	a2 17       	cp	r26, r18
    49ea:	b3 07       	cpc	r27, r19
    49ec:	e4 07       	cpc	r30, r20
    49ee:	f5 07       	cpc	r31, r21
    49f0:	20 f0       	brcs	.+8      	; 0x49fa <__udivmodsi4_ep>
    49f2:	a2 1b       	sub	r26, r18
    49f4:	b3 0b       	sbc	r27, r19
    49f6:	e4 0b       	sbc	r30, r20
    49f8:	f5 0b       	sbc	r31, r21

000049fa <__udivmodsi4_ep>:
    49fa:	66 1f       	adc	r22, r22
    49fc:	77 1f       	adc	r23, r23
    49fe:	88 1f       	adc	r24, r24
    4a00:	99 1f       	adc	r25, r25
    4a02:	1a 94       	dec	r1
    4a04:	69 f7       	brne	.-38     	; 0x49e0 <__udivmodsi4_loop>
    4a06:	60 95       	com	r22
    4a08:	70 95       	com	r23
    4a0a:	80 95       	com	r24
    4a0c:	90 95       	com	r25
    4a0e:	9b 01       	movw	r18, r22
    4a10:	ac 01       	movw	r20, r24
    4a12:	bd 01       	movw	r22, r26
    4a14:	cf 01       	movw	r24, r30
    4a16:	08 95       	ret

00004a18 <__prologue_saves__>:
    4a18:	2f 92       	push	r2
    4a1a:	3f 92       	push	r3
    4a1c:	4f 92       	push	r4
    4a1e:	5f 92       	push	r5
    4a20:	6f 92       	push	r6
    4a22:	7f 92       	push	r7
    4a24:	8f 92       	push	r8
    4a26:	9f 92       	push	r9
    4a28:	af 92       	push	r10
    4a2a:	bf 92       	push	r11
    4a2c:	cf 92       	push	r12
    4a2e:	df 92       	push	r13
    4a30:	ef 92       	push	r14
    4a32:	ff 92       	push	r15
    4a34:	0f 93       	push	r16
    4a36:	1f 93       	push	r17
    4a38:	cf 93       	push	r28
    4a3a:	df 93       	push	r29
    4a3c:	cd b7       	in	r28, 0x3d	; 61
    4a3e:	de b7       	in	r29, 0x3e	; 62
    4a40:	ca 1b       	sub	r28, r26
    4a42:	db 0b       	sbc	r29, r27
    4a44:	0f b6       	in	r0, 0x3f	; 63
    4a46:	f8 94       	cli
    4a48:	de bf       	out	0x3e, r29	; 62
    4a4a:	0f be       	out	0x3f, r0	; 63
    4a4c:	cd bf       	out	0x3d, r28	; 61
    4a4e:	09 94       	ijmp

00004a50 <__epilogue_restores__>:
    4a50:	2a 88       	ldd	r2, Y+18	; 0x12
    4a52:	39 88       	ldd	r3, Y+17	; 0x11
    4a54:	48 88       	ldd	r4, Y+16	; 0x10
    4a56:	5f 84       	ldd	r5, Y+15	; 0x0f
    4a58:	6e 84       	ldd	r6, Y+14	; 0x0e
    4a5a:	7d 84       	ldd	r7, Y+13	; 0x0d
    4a5c:	8c 84       	ldd	r8, Y+12	; 0x0c
    4a5e:	9b 84       	ldd	r9, Y+11	; 0x0b
    4a60:	aa 84       	ldd	r10, Y+10	; 0x0a
    4a62:	b9 84       	ldd	r11, Y+9	; 0x09
    4a64:	c8 84       	ldd	r12, Y+8	; 0x08
    4a66:	df 80       	ldd	r13, Y+7	; 0x07
    4a68:	ee 80       	ldd	r14, Y+6	; 0x06
    4a6a:	fd 80       	ldd	r15, Y+5	; 0x05
    4a6c:	0c 81       	ldd	r16, Y+4	; 0x04
    4a6e:	1b 81       	ldd	r17, Y+3	; 0x03
    4a70:	aa 81       	ldd	r26, Y+2	; 0x02
    4a72:	b9 81       	ldd	r27, Y+1	; 0x01
    4a74:	ce 0f       	add	r28, r30
    4a76:	d1 1d       	adc	r29, r1
    4a78:	0f b6       	in	r0, 0x3f	; 63
    4a7a:	f8 94       	cli
    4a7c:	de bf       	out	0x3e, r29	; 62
    4a7e:	0f be       	out	0x3f, r0	; 63
    4a80:	cd bf       	out	0x3d, r28	; 61
    4a82:	ed 01       	movw	r28, r26
    4a84:	08 95       	ret

00004a86 <itoa>:
    4a86:	fb 01       	movw	r30, r22
    4a88:	9f 01       	movw	r18, r30
    4a8a:	e8 94       	clt
    4a8c:	42 30       	cpi	r20, 0x02	; 2
    4a8e:	c4 f0       	brlt	.+48     	; 0x4ac0 <itoa+0x3a>
    4a90:	45 32       	cpi	r20, 0x25	; 37
    4a92:	b4 f4       	brge	.+44     	; 0x4ac0 <itoa+0x3a>
    4a94:	4a 30       	cpi	r20, 0x0A	; 10
    4a96:	29 f4       	brne	.+10     	; 0x4aa2 <itoa+0x1c>
    4a98:	97 fb       	bst	r25, 7
    4a9a:	1e f4       	brtc	.+6      	; 0x4aa2 <itoa+0x1c>
    4a9c:	90 95       	com	r25
    4a9e:	81 95       	neg	r24
    4aa0:	9f 4f       	sbci	r25, 0xFF	; 255
    4aa2:	64 2f       	mov	r22, r20
    4aa4:	77 27       	eor	r23, r23
    4aa6:	0e 94 74 25 	call	0x4ae8	; 0x4ae8 <__udivmodhi4>
    4aaa:	80 5d       	subi	r24, 0xD0	; 208
    4aac:	8a 33       	cpi	r24, 0x3A	; 58
    4aae:	0c f0       	brlt	.+2      	; 0x4ab2 <itoa+0x2c>
    4ab0:	89 5d       	subi	r24, 0xD9	; 217
    4ab2:	81 93       	st	Z+, r24
    4ab4:	cb 01       	movw	r24, r22
    4ab6:	00 97       	sbiw	r24, 0x00	; 0
    4ab8:	a1 f7       	brne	.-24     	; 0x4aa2 <itoa+0x1c>
    4aba:	16 f4       	brtc	.+4      	; 0x4ac0 <itoa+0x3a>
    4abc:	5d e2       	ldi	r21, 0x2D	; 45
    4abe:	51 93       	st	Z+, r21
    4ac0:	10 82       	st	Z, r1
    4ac2:	c9 01       	movw	r24, r18
    4ac4:	0c 94 64 25 	jmp	0x4ac8	; 0x4ac8 <strrev>

00004ac8 <strrev>:
    4ac8:	dc 01       	movw	r26, r24
    4aca:	fc 01       	movw	r30, r24
    4acc:	67 2f       	mov	r22, r23
    4ace:	71 91       	ld	r23, Z+
    4ad0:	77 23       	and	r23, r23
    4ad2:	e1 f7       	brne	.-8      	; 0x4acc <strrev+0x4>
    4ad4:	32 97       	sbiw	r30, 0x02	; 2
    4ad6:	04 c0       	rjmp	.+8      	; 0x4ae0 <strrev+0x18>
    4ad8:	7c 91       	ld	r23, X
    4ada:	6d 93       	st	X+, r22
    4adc:	70 83       	st	Z, r23
    4ade:	62 91       	ld	r22, -Z
    4ae0:	ae 17       	cp	r26, r30
    4ae2:	bf 07       	cpc	r27, r31
    4ae4:	c8 f3       	brcs	.-14     	; 0x4ad8 <strrev+0x10>
    4ae6:	08 95       	ret

00004ae8 <__udivmodhi4>:
    4ae8:	aa 1b       	sub	r26, r26
    4aea:	bb 1b       	sub	r27, r27
    4aec:	51 e1       	ldi	r21, 0x11	; 17
    4aee:	07 c0       	rjmp	.+14     	; 0x4afe <__udivmodhi4_ep>

00004af0 <__udivmodhi4_loop>:
    4af0:	aa 1f       	adc	r26, r26
    4af2:	bb 1f       	adc	r27, r27
    4af4:	a6 17       	cp	r26, r22
    4af6:	b7 07       	cpc	r27, r23
    4af8:	10 f0       	brcs	.+4      	; 0x4afe <__udivmodhi4_ep>
    4afa:	a6 1b       	sub	r26, r22
    4afc:	b7 0b       	sbc	r27, r23

00004afe <__udivmodhi4_ep>:
    4afe:	88 1f       	adc	r24, r24
    4b00:	99 1f       	adc	r25, r25
    4b02:	5a 95       	dec	r21
    4b04:	a9 f7       	brne	.-22     	; 0x4af0 <__udivmodhi4_loop>
    4b06:	80 95       	com	r24
    4b08:	90 95       	com	r25
    4b0a:	bc 01       	movw	r22, r24
    4b0c:	cd 01       	movw	r24, r26
    4b0e:	08 95       	ret

00004b10 <_exit>:
    4b10:	f8 94       	cli

00004b12 <__stop_program>:
    4b12:	ff cf       	rjmp	.-2      	; 0x4b12 <__stop_program>
