
Control_ECU.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00002f88  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000018  00800060  00002f88  0000301c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000011  00800078  00800078  00003034  2**0
                  ALLOC
  3 .stab         00002e44  00000000  00000000  00003034  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001217  00000000  00000000  00005e78  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  0000708f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  000071cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  0000733f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00008f88  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  00009e73  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000ac20  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000ad80  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000b00d  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000b7db  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__vector_7>
      20:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <__vector_8>
      24:	0c 94 b5 14 	jmp	0x296a	; 0x296a <__vector_9>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e8       	ldi	r30, 0x88	; 136
      68:	ff e2       	ldi	r31, 0x2F	; 47
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	a8 37       	cpi	r26, 0x78	; 120
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	a8 e7       	ldi	r26, 0x78	; 120
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a9 38       	cpi	r26, 0x89	; 137
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 f9 0d 	call	0x1bf2	; 0x1bf2 <main>
      8a:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a0 e6       	ldi	r26, 0x60	; 96
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 17 	jmp	0x2f16	; 0x2f16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	80 e6       	ldi	r24, 0x60	; 96
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 17 	jmp	0x2f4e	; 0x2f4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 17 	jmp	0x2f2e	; 0x2f2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 17 	jmp	0x2f66	; 0x2f66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 17 	jmp	0x2f36	; 0x2f36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 17 	jmp	0x2f6e	; 0x2f6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Timer>:
 ********************************************************************************/



void Timer(void) /* Every 1 Second Timer ISR Call This Function */
{
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
	g_count++ ;
     b4e:	80 91 79 00 	lds	r24, 0x0079
     b52:	8f 5f       	subi	r24, 0xFF	; 255
     b54:	80 93 79 00 	sts	0x0079, r24
}
     b58:	cf 91       	pop	r28
     b5a:	df 91       	pop	r29
     b5c:	08 95       	ret

00000b5e <delay>:

/*Description: Delay Function using Timer 1*/
void delay(uint8 second)
{
     b5e:	df 93       	push	r29
     b60:	cf 93       	push	r28
     b62:	cd b7       	in	r28, 0x3d	; 61
     b64:	de b7       	in	r29, 0x3e	; 62
     b66:	2c 97       	sbiw	r28, 0x0c	; 12
     b68:	0f b6       	in	r0, 0x3f	; 63
     b6a:	f8 94       	cli
     b6c:	de bf       	out	0x3e, r29	; 62
     b6e:	0f be       	out	0x3f, r0	; 63
     b70:	cd bf       	out	0x3d, r28	; 61
     b72:	8f 83       	std	Y+7, r24	; 0x07
	/* Configure Timer With Desired Specifications */
	Timer1_ConfigType t_configure = {0 , 7812 , Fcpu1024 , CTC };
     b74:	ce 01       	movw	r24, r28
     b76:	01 96       	adiw	r24, 0x01	; 1
     b78:	99 87       	std	Y+9, r25	; 0x09
     b7a:	88 87       	std	Y+8, r24	; 0x08
     b7c:	ea e6       	ldi	r30, 0x6A	; 106
     b7e:	f0 e0       	ldi	r31, 0x00	; 0
     b80:	fb 87       	std	Y+11, r31	; 0x0b
     b82:	ea 87       	std	Y+10, r30	; 0x0a
     b84:	f6 e0       	ldi	r31, 0x06	; 6
     b86:	fc 87       	std	Y+12, r31	; 0x0c
     b88:	ea 85       	ldd	r30, Y+10	; 0x0a
     b8a:	fb 85       	ldd	r31, Y+11	; 0x0b
     b8c:	00 80       	ld	r0, Z
     b8e:	8a 85       	ldd	r24, Y+10	; 0x0a
     b90:	9b 85       	ldd	r25, Y+11	; 0x0b
     b92:	01 96       	adiw	r24, 0x01	; 1
     b94:	9b 87       	std	Y+11, r25	; 0x0b
     b96:	8a 87       	std	Y+10, r24	; 0x0a
     b98:	e8 85       	ldd	r30, Y+8	; 0x08
     b9a:	f9 85       	ldd	r31, Y+9	; 0x09
     b9c:	00 82       	st	Z, r0
     b9e:	88 85       	ldd	r24, Y+8	; 0x08
     ba0:	99 85       	ldd	r25, Y+9	; 0x09
     ba2:	01 96       	adiw	r24, 0x01	; 1
     ba4:	99 87       	std	Y+9, r25	; 0x09
     ba6:	88 87       	std	Y+8, r24	; 0x08
     ba8:	9c 85       	ldd	r25, Y+12	; 0x0c
     baa:	91 50       	subi	r25, 0x01	; 1
     bac:	9c 87       	std	Y+12, r25	; 0x0c
     bae:	ec 85       	ldd	r30, Y+12	; 0x0c
     bb0:	ee 23       	and	r30, r30
     bb2:	51 f7       	brne	.-44     	; 0xb88 <delay+0x2a>

	Timer1_init(&t_configure); /* Start Timer */
     bb4:	ce 01       	movw	r24, r28
     bb6:	01 96       	adiw	r24, 0x01	; 1
     bb8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Timer1_init>
	while(g_count != second); /* Waiting */
     bbc:	90 91 79 00 	lds	r25, 0x0079
     bc0:	8f 81       	ldd	r24, Y+7	; 0x07
     bc2:	98 17       	cp	r25, r24
     bc4:	d9 f7       	brne	.-10     	; 0xbbc <delay+0x5e>
	Timer1_deInit(); /* Stop Timer */
     bc6:	0e 94 ae 15 	call	0x2b5c	; 0x2b5c <Timer1_deInit>
	g_count = 0 ;
     bca:	10 92 79 00 	sts	0x0079, r1
}
     bce:	2c 96       	adiw	r28, 0x0c	; 12
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	cf 91       	pop	r28
     bdc:	df 91       	pop	r29
     bde:	08 95       	ret

00000be0 <creat_pass>:


void creat_pass(void){
     be0:	0f 93       	push	r16
     be2:	1f 93       	push	r17
     be4:	df 93       	push	r29
     be6:	cf 93       	push	r28
     be8:	cd b7       	in	r28, 0x3d	; 61
     bea:	de b7       	in	r29, 0x3e	; 62
     bec:	ca 55       	subi	r28, 0x5A	; 90
     bee:	d0 40       	sbci	r29, 0x00	; 0
     bf0:	0f b6       	in	r0, 0x3f	; 63
     bf2:	f8 94       	cli
     bf4:	de bf       	out	0x3e, r29	; 62
     bf6:	0f be       	out	0x3f, r0	; 63
     bf8:	cd bf       	out	0x3d, r28	; 61
	/********************* RECEIVE THE PASSWORD FROM HMI_ECU    */

	for(int i=0;i<5;i++){
     bfa:	fe 01       	movw	r30, r28
     bfc:	e7 5a       	subi	r30, 0xA7	; 167
     bfe:	ff 4f       	sbci	r31, 0xFF	; 255
     c00:	11 82       	std	Z+1, r1	; 0x01
     c02:	10 82       	st	Z, r1
     c04:	ca c0       	rjmp	.+404    	; 0xd9a <creat_pass+0x1ba>
		value1[i]=UART_recieveByte();
     c06:	fe 01       	movw	r30, r28
     c08:	e7 5a       	subi	r30, 0xA7	; 167
     c0a:	ff 4f       	sbci	r31, 0xFF	; 255
     c0c:	00 81       	ld	r16, Z
     c0e:	11 81       	ldd	r17, Z+1	; 0x01
     c10:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
     c14:	f8 01       	movw	r30, r16
     c16:	ec 57       	subi	r30, 0x7C	; 124
     c18:	ff 4f       	sbci	r31, 0xFF	; 255
     c1a:	80 83       	st	Z, r24
     c1c:	fe 01       	movw	r30, r28
     c1e:	ef 5a       	subi	r30, 0xAF	; 175
     c20:	ff 4f       	sbci	r31, 0xFF	; 255
     c22:	80 e0       	ldi	r24, 0x00	; 0
     c24:	90 e0       	ldi	r25, 0x00	; 0
     c26:	a0 e2       	ldi	r26, 0x20	; 32
     c28:	b1 e4       	ldi	r27, 0x41	; 65
     c2a:	80 83       	st	Z, r24
     c2c:	91 83       	std	Z+1, r25	; 0x01
     c2e:	a2 83       	std	Z+2, r26	; 0x02
     c30:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     c32:	8e 01       	movw	r16, r28
     c34:	03 5b       	subi	r16, 0xB3	; 179
     c36:	1f 4f       	sbci	r17, 0xFF	; 255
     c38:	fe 01       	movw	r30, r28
     c3a:	ef 5a       	subi	r30, 0xAF	; 175
     c3c:	ff 4f       	sbci	r31, 0xFF	; 255
     c3e:	60 81       	ld	r22, Z
     c40:	71 81       	ldd	r23, Z+1	; 0x01
     c42:	82 81       	ldd	r24, Z+2	; 0x02
     c44:	93 81       	ldd	r25, Z+3	; 0x03
     c46:	20 e0       	ldi	r18, 0x00	; 0
     c48:	30 e0       	ldi	r19, 0x00	; 0
     c4a:	4a ef       	ldi	r20, 0xFA	; 250
     c4c:	54 e4       	ldi	r21, 0x44	; 68
     c4e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     c52:	dc 01       	movw	r26, r24
     c54:	cb 01       	movw	r24, r22
     c56:	f8 01       	movw	r30, r16
     c58:	80 83       	st	Z, r24
     c5a:	91 83       	std	Z+1, r25	; 0x01
     c5c:	a2 83       	std	Z+2, r26	; 0x02
     c5e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     c60:	fe 01       	movw	r30, r28
     c62:	e3 5b       	subi	r30, 0xB3	; 179
     c64:	ff 4f       	sbci	r31, 0xFF	; 255
     c66:	60 81       	ld	r22, Z
     c68:	71 81       	ldd	r23, Z+1	; 0x01
     c6a:	82 81       	ldd	r24, Z+2	; 0x02
     c6c:	93 81       	ldd	r25, Z+3	; 0x03
     c6e:	20 e0       	ldi	r18, 0x00	; 0
     c70:	30 e0       	ldi	r19, 0x00	; 0
     c72:	40 e8       	ldi	r20, 0x80	; 128
     c74:	5f e3       	ldi	r21, 0x3F	; 63
     c76:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     c7a:	88 23       	and	r24, r24
     c7c:	44 f4       	brge	.+16     	; 0xc8e <creat_pass+0xae>
		__ticks = 1;
     c7e:	fe 01       	movw	r30, r28
     c80:	e5 5b       	subi	r30, 0xB5	; 181
     c82:	ff 4f       	sbci	r31, 0xFF	; 255
     c84:	81 e0       	ldi	r24, 0x01	; 1
     c86:	90 e0       	ldi	r25, 0x00	; 0
     c88:	91 83       	std	Z+1, r25	; 0x01
     c8a:	80 83       	st	Z, r24
     c8c:	64 c0       	rjmp	.+200    	; 0xd56 <creat_pass+0x176>
	else if (__tmp > 65535)
     c8e:	fe 01       	movw	r30, r28
     c90:	e3 5b       	subi	r30, 0xB3	; 179
     c92:	ff 4f       	sbci	r31, 0xFF	; 255
     c94:	60 81       	ld	r22, Z
     c96:	71 81       	ldd	r23, Z+1	; 0x01
     c98:	82 81       	ldd	r24, Z+2	; 0x02
     c9a:	93 81       	ldd	r25, Z+3	; 0x03
     c9c:	20 e0       	ldi	r18, 0x00	; 0
     c9e:	3f ef       	ldi	r19, 0xFF	; 255
     ca0:	4f e7       	ldi	r20, 0x7F	; 127
     ca2:	57 e4       	ldi	r21, 0x47	; 71
     ca4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     ca8:	18 16       	cp	r1, r24
     caa:	0c f0       	brlt	.+2      	; 0xcae <creat_pass+0xce>
     cac:	43 c0       	rjmp	.+134    	; 0xd34 <creat_pass+0x154>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     cae:	fe 01       	movw	r30, r28
     cb0:	ef 5a       	subi	r30, 0xAF	; 175
     cb2:	ff 4f       	sbci	r31, 0xFF	; 255
     cb4:	60 81       	ld	r22, Z
     cb6:	71 81       	ldd	r23, Z+1	; 0x01
     cb8:	82 81       	ldd	r24, Z+2	; 0x02
     cba:	93 81       	ldd	r25, Z+3	; 0x03
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e2       	ldi	r20, 0x20	; 32
     cc2:	51 e4       	ldi	r21, 0x41	; 65
     cc4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     cc8:	dc 01       	movw	r26, r24
     cca:	cb 01       	movw	r24, r22
     ccc:	8e 01       	movw	r16, r28
     cce:	05 5b       	subi	r16, 0xB5	; 181
     cd0:	1f 4f       	sbci	r17, 0xFF	; 255
     cd2:	bc 01       	movw	r22, r24
     cd4:	cd 01       	movw	r24, r26
     cd6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     cda:	dc 01       	movw	r26, r24
     cdc:	cb 01       	movw	r24, r22
     cde:	f8 01       	movw	r30, r16
     ce0:	91 83       	std	Z+1, r25	; 0x01
     ce2:	80 83       	st	Z, r24
     ce4:	1f c0       	rjmp	.+62     	; 0xd24 <creat_pass+0x144>
     ce6:	fe 01       	movw	r30, r28
     ce8:	e7 5b       	subi	r30, 0xB7	; 183
     cea:	ff 4f       	sbci	r31, 0xFF	; 255
     cec:	88 ec       	ldi	r24, 0xC8	; 200
     cee:	90 e0       	ldi	r25, 0x00	; 0
     cf0:	91 83       	std	Z+1, r25	; 0x01
     cf2:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     cf4:	fe 01       	movw	r30, r28
     cf6:	e7 5b       	subi	r30, 0xB7	; 183
     cf8:	ff 4f       	sbci	r31, 0xFF	; 255
     cfa:	80 81       	ld	r24, Z
     cfc:	91 81       	ldd	r25, Z+1	; 0x01
     cfe:	01 97       	sbiw	r24, 0x01	; 1
     d00:	f1 f7       	brne	.-4      	; 0xcfe <creat_pass+0x11e>
     d02:	fe 01       	movw	r30, r28
     d04:	e7 5b       	subi	r30, 0xB7	; 183
     d06:	ff 4f       	sbci	r31, 0xFF	; 255
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     d0c:	de 01       	movw	r26, r28
     d0e:	a5 5b       	subi	r26, 0xB5	; 181
     d10:	bf 4f       	sbci	r27, 0xFF	; 255
     d12:	fe 01       	movw	r30, r28
     d14:	e5 5b       	subi	r30, 0xB5	; 181
     d16:	ff 4f       	sbci	r31, 0xFF	; 255
     d18:	80 81       	ld	r24, Z
     d1a:	91 81       	ldd	r25, Z+1	; 0x01
     d1c:	01 97       	sbiw	r24, 0x01	; 1
     d1e:	11 96       	adiw	r26, 0x01	; 1
     d20:	9c 93       	st	X, r25
     d22:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     d24:	fe 01       	movw	r30, r28
     d26:	e5 5b       	subi	r30, 0xB5	; 181
     d28:	ff 4f       	sbci	r31, 0xFF	; 255
     d2a:	80 81       	ld	r24, Z
     d2c:	91 81       	ldd	r25, Z+1	; 0x01
     d2e:	00 97       	sbiw	r24, 0x00	; 0
     d30:	d1 f6       	brne	.-76     	; 0xce6 <creat_pass+0x106>
     d32:	27 c0       	rjmp	.+78     	; 0xd82 <creat_pass+0x1a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     d34:	8e 01       	movw	r16, r28
     d36:	05 5b       	subi	r16, 0xB5	; 181
     d38:	1f 4f       	sbci	r17, 0xFF	; 255
     d3a:	fe 01       	movw	r30, r28
     d3c:	e3 5b       	subi	r30, 0xB3	; 179
     d3e:	ff 4f       	sbci	r31, 0xFF	; 255
     d40:	60 81       	ld	r22, Z
     d42:	71 81       	ldd	r23, Z+1	; 0x01
     d44:	82 81       	ldd	r24, Z+2	; 0x02
     d46:	93 81       	ldd	r25, Z+3	; 0x03
     d48:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     d4c:	dc 01       	movw	r26, r24
     d4e:	cb 01       	movw	r24, r22
     d50:	f8 01       	movw	r30, r16
     d52:	91 83       	std	Z+1, r25	; 0x01
     d54:	80 83       	st	Z, r24
     d56:	de 01       	movw	r26, r28
     d58:	a9 5b       	subi	r26, 0xB9	; 185
     d5a:	bf 4f       	sbci	r27, 0xFF	; 255
     d5c:	fe 01       	movw	r30, r28
     d5e:	e5 5b       	subi	r30, 0xB5	; 181
     d60:	ff 4f       	sbci	r31, 0xFF	; 255
     d62:	80 81       	ld	r24, Z
     d64:	91 81       	ldd	r25, Z+1	; 0x01
     d66:	8d 93       	st	X+, r24
     d68:	9c 93       	st	X, r25
     d6a:	fe 01       	movw	r30, r28
     d6c:	e9 5b       	subi	r30, 0xB9	; 185
     d6e:	ff 4f       	sbci	r31, 0xFF	; 255
     d70:	80 81       	ld	r24, Z
     d72:	91 81       	ldd	r25, Z+1	; 0x01
     d74:	01 97       	sbiw	r24, 0x01	; 1
     d76:	f1 f7       	brne	.-4      	; 0xd74 <creat_pass+0x194>
     d78:	fe 01       	movw	r30, r28
     d7a:	e9 5b       	subi	r30, 0xB9	; 185
     d7c:	ff 4f       	sbci	r31, 0xFF	; 255
     d7e:	91 83       	std	Z+1, r25	; 0x01
     d80:	80 83       	st	Z, r24


void creat_pass(void){
	/********************* RECEIVE THE PASSWORD FROM HMI_ECU    */

	for(int i=0;i<5;i++){
     d82:	de 01       	movw	r26, r28
     d84:	a7 5a       	subi	r26, 0xA7	; 167
     d86:	bf 4f       	sbci	r27, 0xFF	; 255
     d88:	fe 01       	movw	r30, r28
     d8a:	e7 5a       	subi	r30, 0xA7	; 167
     d8c:	ff 4f       	sbci	r31, 0xFF	; 255
     d8e:	80 81       	ld	r24, Z
     d90:	91 81       	ldd	r25, Z+1	; 0x01
     d92:	01 96       	adiw	r24, 0x01	; 1
     d94:	11 96       	adiw	r26, 0x01	; 1
     d96:	9c 93       	st	X, r25
     d98:	8e 93       	st	-X, r24
     d9a:	fe 01       	movw	r30, r28
     d9c:	e7 5a       	subi	r30, 0xA7	; 167
     d9e:	ff 4f       	sbci	r31, 0xFF	; 255
     da0:	80 81       	ld	r24, Z
     da2:	91 81       	ldd	r25, Z+1	; 0x01
     da4:	85 30       	cpi	r24, 0x05	; 5
     da6:	91 05       	cpc	r25, r1
     da8:	0c f4       	brge	.+2      	; 0xdac <creat_pass+0x1cc>
     daa:	2d cf       	rjmp	.-422    	; 0xc06 <creat_pass+0x26>
		value1[i]=UART_recieveByte();
		_delay_ms(10);
	}
	for(int i=0;i<5;i++){
     dac:	fe 01       	movw	r30, r28
     dae:	e9 5a       	subi	r30, 0xA9	; 169
     db0:	ff 4f       	sbci	r31, 0xFF	; 255
     db2:	11 82       	std	Z+1, r1	; 0x01
     db4:	10 82       	st	Z, r1
     db6:	9c c0       	rjmp	.+312    	; 0xef0 <creat_pass+0x310>
		value2[i]=UART_recieveByte();
     db8:	fe 01       	movw	r30, r28
     dba:	e9 5a       	subi	r30, 0xA9	; 169
     dbc:	ff 4f       	sbci	r31, 0xFF	; 255
     dbe:	00 81       	ld	r16, Z
     dc0:	11 81       	ldd	r17, Z+1	; 0x01
     dc2:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
     dc6:	f8 01       	movw	r30, r16
     dc8:	e1 58       	subi	r30, 0x81	; 129
     dca:	ff 4f       	sbci	r31, 0xFF	; 255
     dcc:	80 83       	st	Z, r24
     dce:	fe 01       	movw	r30, r28
     dd0:	ed 5b       	subi	r30, 0xBD	; 189
     dd2:	ff 4f       	sbci	r31, 0xFF	; 255
     dd4:	80 e0       	ldi	r24, 0x00	; 0
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	a0 e2       	ldi	r26, 0x20	; 32
     dda:	b1 e4       	ldi	r27, 0x41	; 65
     ddc:	80 83       	st	Z, r24
     dde:	91 83       	std	Z+1, r25	; 0x01
     de0:	a2 83       	std	Z+2, r26	; 0x02
     de2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     de4:	8e 01       	movw	r16, r28
     de6:	01 5c       	subi	r16, 0xC1	; 193
     de8:	1f 4f       	sbci	r17, 0xFF	; 255
     dea:	fe 01       	movw	r30, r28
     dec:	ed 5b       	subi	r30, 0xBD	; 189
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	4a ef       	ldi	r20, 0xFA	; 250
     dfe:	54 e4       	ldi	r21, 0x44	; 68
     e00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e04:	dc 01       	movw	r26, r24
     e06:	cb 01       	movw	r24, r22
     e08:	f8 01       	movw	r30, r16
     e0a:	80 83       	st	Z, r24
     e0c:	91 83       	std	Z+1, r25	; 0x01
     e0e:	a2 83       	std	Z+2, r26	; 0x02
     e10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e12:	fe 01       	movw	r30, r28
     e14:	ff 96       	adiw	r30, 0x3f	; 63
     e16:	60 81       	ld	r22, Z
     e18:	71 81       	ldd	r23, Z+1	; 0x01
     e1a:	82 81       	ldd	r24, Z+2	; 0x02
     e1c:	93 81       	ldd	r25, Z+3	; 0x03
     e1e:	20 e0       	ldi	r18, 0x00	; 0
     e20:	30 e0       	ldi	r19, 0x00	; 0
     e22:	40 e8       	ldi	r20, 0x80	; 128
     e24:	5f e3       	ldi	r21, 0x3F	; 63
     e26:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     e2a:	88 23       	and	r24, r24
     e2c:	2c f4       	brge	.+10     	; 0xe38 <creat_pass+0x258>
		__ticks = 1;
     e2e:	81 e0       	ldi	r24, 0x01	; 1
     e30:	90 e0       	ldi	r25, 0x00	; 0
     e32:	9e af       	std	Y+62, r25	; 0x3e
     e34:	8d af       	std	Y+61, r24	; 0x3d
     e36:	46 c0       	rjmp	.+140    	; 0xec4 <creat_pass+0x2e4>
	else if (__tmp > 65535)
     e38:	fe 01       	movw	r30, r28
     e3a:	ff 96       	adiw	r30, 0x3f	; 63
     e3c:	60 81       	ld	r22, Z
     e3e:	71 81       	ldd	r23, Z+1	; 0x01
     e40:	82 81       	ldd	r24, Z+2	; 0x02
     e42:	93 81       	ldd	r25, Z+3	; 0x03
     e44:	20 e0       	ldi	r18, 0x00	; 0
     e46:	3f ef       	ldi	r19, 0xFF	; 255
     e48:	4f e7       	ldi	r20, 0x7F	; 127
     e4a:	57 e4       	ldi	r21, 0x47	; 71
     e4c:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     e50:	18 16       	cp	r1, r24
     e52:	64 f5       	brge	.+88     	; 0xeac <creat_pass+0x2cc>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e54:	fe 01       	movw	r30, r28
     e56:	ed 5b       	subi	r30, 0xBD	; 189
     e58:	ff 4f       	sbci	r31, 0xFF	; 255
     e5a:	60 81       	ld	r22, Z
     e5c:	71 81       	ldd	r23, Z+1	; 0x01
     e5e:	82 81       	ldd	r24, Z+2	; 0x02
     e60:	93 81       	ldd	r25, Z+3	; 0x03
     e62:	20 e0       	ldi	r18, 0x00	; 0
     e64:	30 e0       	ldi	r19, 0x00	; 0
     e66:	40 e2       	ldi	r20, 0x20	; 32
     e68:	51 e4       	ldi	r21, 0x41	; 65
     e6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     e6e:	dc 01       	movw	r26, r24
     e70:	cb 01       	movw	r24, r22
     e72:	bc 01       	movw	r22, r24
     e74:	cd 01       	movw	r24, r26
     e76:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     e7a:	dc 01       	movw	r26, r24
     e7c:	cb 01       	movw	r24, r22
     e7e:	9e af       	std	Y+62, r25	; 0x3e
     e80:	8d af       	std	Y+61, r24	; 0x3d
     e82:	0f c0       	rjmp	.+30     	; 0xea2 <creat_pass+0x2c2>
     e84:	88 ec       	ldi	r24, 0xC8	; 200
     e86:	90 e0       	ldi	r25, 0x00	; 0
     e88:	9c af       	std	Y+60, r25	; 0x3c
     e8a:	8b af       	std	Y+59, r24	; 0x3b
     e8c:	8b ad       	ldd	r24, Y+59	; 0x3b
     e8e:	9c ad       	ldd	r25, Y+60	; 0x3c
     e90:	01 97       	sbiw	r24, 0x01	; 1
     e92:	f1 f7       	brne	.-4      	; 0xe90 <creat_pass+0x2b0>
     e94:	9c af       	std	Y+60, r25	; 0x3c
     e96:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e98:	8d ad       	ldd	r24, Y+61	; 0x3d
     e9a:	9e ad       	ldd	r25, Y+62	; 0x3e
     e9c:	01 97       	sbiw	r24, 0x01	; 1
     e9e:	9e af       	std	Y+62, r25	; 0x3e
     ea0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ea2:	8d ad       	ldd	r24, Y+61	; 0x3d
     ea4:	9e ad       	ldd	r25, Y+62	; 0x3e
     ea6:	00 97       	sbiw	r24, 0x00	; 0
     ea8:	69 f7       	brne	.-38     	; 0xe84 <creat_pass+0x2a4>
     eaa:	16 c0       	rjmp	.+44     	; 0xed8 <creat_pass+0x2f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     eac:	fe 01       	movw	r30, r28
     eae:	ff 96       	adiw	r30, 0x3f	; 63
     eb0:	60 81       	ld	r22, Z
     eb2:	71 81       	ldd	r23, Z+1	; 0x01
     eb4:	82 81       	ldd	r24, Z+2	; 0x02
     eb6:	93 81       	ldd	r25, Z+3	; 0x03
     eb8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     ebc:	dc 01       	movw	r26, r24
     ebe:	cb 01       	movw	r24, r22
     ec0:	9e af       	std	Y+62, r25	; 0x3e
     ec2:	8d af       	std	Y+61, r24	; 0x3d
     ec4:	8d ad       	ldd	r24, Y+61	; 0x3d
     ec6:	9e ad       	ldd	r25, Y+62	; 0x3e
     ec8:	9a af       	std	Y+58, r25	; 0x3a
     eca:	89 af       	std	Y+57, r24	; 0x39
     ecc:	89 ad       	ldd	r24, Y+57	; 0x39
     ece:	9a ad       	ldd	r25, Y+58	; 0x3a
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	f1 f7       	brne	.-4      	; 0xed0 <creat_pass+0x2f0>
     ed4:	9a af       	std	Y+58, r25	; 0x3a
     ed6:	89 af       	std	Y+57, r24	; 0x39

	for(int i=0;i<5;i++){
		value1[i]=UART_recieveByte();
		_delay_ms(10);
	}
	for(int i=0;i<5;i++){
     ed8:	de 01       	movw	r26, r28
     eda:	a9 5a       	subi	r26, 0xA9	; 169
     edc:	bf 4f       	sbci	r27, 0xFF	; 255
     ede:	fe 01       	movw	r30, r28
     ee0:	e9 5a       	subi	r30, 0xA9	; 169
     ee2:	ff 4f       	sbci	r31, 0xFF	; 255
     ee4:	80 81       	ld	r24, Z
     ee6:	91 81       	ldd	r25, Z+1	; 0x01
     ee8:	01 96       	adiw	r24, 0x01	; 1
     eea:	11 96       	adiw	r26, 0x01	; 1
     eec:	9c 93       	st	X, r25
     eee:	8e 93       	st	-X, r24
     ef0:	fe 01       	movw	r30, r28
     ef2:	e9 5a       	subi	r30, 0xA9	; 169
     ef4:	ff 4f       	sbci	r31, 0xFF	; 255
     ef6:	80 81       	ld	r24, Z
     ef8:	91 81       	ldd	r25, Z+1	; 0x01
     efa:	85 30       	cpi	r24, 0x05	; 5
     efc:	91 05       	cpc	r25, r1
     efe:	0c f4       	brge	.+2      	; 0xf02 <creat_pass+0x322>
     f00:	5b cf       	rjmp	.-330    	; 0xdb8 <creat_pass+0x1d8>
		value2[i]=UART_recieveByte();
		_delay_ms(10);
	}

	/****************check if the entered passwords are same or not *************/
	check=1;
     f02:	81 e0       	ldi	r24, 0x01	; 1
     f04:	80 93 68 00 	sts	0x0068, r24
	for(int i=0;i<5;i++){
     f08:	fe 01       	movw	r30, r28
     f0a:	eb 5a       	subi	r30, 0xAB	; 171
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	11 82       	std	Z+1, r1	; 0x01
     f10:	10 82       	st	Z, r1
     f12:	95 c0       	rjmp	.+298    	; 0x103e <creat_pass+0x45e>
		if(value1[i]!=value2[i]){
     f14:	fe 01       	movw	r30, r28
     f16:	eb 5a       	subi	r30, 0xAB	; 171
     f18:	ff 4f       	sbci	r31, 0xFF	; 255
     f1a:	80 81       	ld	r24, Z
     f1c:	91 81       	ldd	r25, Z+1	; 0x01
     f1e:	fc 01       	movw	r30, r24
     f20:	ec 57       	subi	r30, 0x7C	; 124
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	20 81       	ld	r18, Z
     f26:	fe 01       	movw	r30, r28
     f28:	eb 5a       	subi	r30, 0xAB	; 171
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	91 81       	ldd	r25, Z+1	; 0x01
     f30:	fc 01       	movw	r30, r24
     f32:	e1 58       	subi	r30, 0x81	; 129
     f34:	ff 4f       	sbci	r31, 0xFF	; 255
     f36:	80 81       	ld	r24, Z
     f38:	28 17       	cp	r18, r24
     f3a:	09 f4       	brne	.+2      	; 0xf3e <creat_pass+0x35e>
     f3c:	74 c0       	rjmp	.+232    	; 0x1026 <creat_pass+0x446>
			check=0;
     f3e:	10 92 68 00 	sts	0x0068, r1
     f42:	80 e0       	ldi	r24, 0x00	; 0
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	a0 e2       	ldi	r26, 0x20	; 32
     f48:	b1 e4       	ldi	r27, 0x41	; 65
     f4a:	8d ab       	std	Y+53, r24	; 0x35
     f4c:	9e ab       	std	Y+54, r25	; 0x36
     f4e:	af ab       	std	Y+55, r26	; 0x37
     f50:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     f52:	6d a9       	ldd	r22, Y+53	; 0x35
     f54:	7e a9       	ldd	r23, Y+54	; 0x36
     f56:	8f a9       	ldd	r24, Y+55	; 0x37
     f58:	98 ad       	ldd	r25, Y+56	; 0x38
     f5a:	20 e0       	ldi	r18, 0x00	; 0
     f5c:	30 e0       	ldi	r19, 0x00	; 0
     f5e:	4a ef       	ldi	r20, 0xFA	; 250
     f60:	54 e4       	ldi	r21, 0x44	; 68
     f62:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     f66:	dc 01       	movw	r26, r24
     f68:	cb 01       	movw	r24, r22
     f6a:	89 ab       	std	Y+49, r24	; 0x31
     f6c:	9a ab       	std	Y+50, r25	; 0x32
     f6e:	ab ab       	std	Y+51, r26	; 0x33
     f70:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
     f72:	69 a9       	ldd	r22, Y+49	; 0x31
     f74:	7a a9       	ldd	r23, Y+50	; 0x32
     f76:	8b a9       	ldd	r24, Y+51	; 0x33
     f78:	9c a9       	ldd	r25, Y+52	; 0x34
     f7a:	20 e0       	ldi	r18, 0x00	; 0
     f7c:	30 e0       	ldi	r19, 0x00	; 0
     f7e:	40 e8       	ldi	r20, 0x80	; 128
     f80:	5f e3       	ldi	r21, 0x3F	; 63
     f82:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
     f86:	88 23       	and	r24, r24
     f88:	2c f4       	brge	.+10     	; 0xf94 <creat_pass+0x3b4>
		__ticks = 1;
     f8a:	81 e0       	ldi	r24, 0x01	; 1
     f8c:	90 e0       	ldi	r25, 0x00	; 0
     f8e:	98 ab       	std	Y+48, r25	; 0x30
     f90:	8f a7       	std	Y+47, r24	; 0x2f
     f92:	3f c0       	rjmp	.+126    	; 0x1012 <creat_pass+0x432>
	else if (__tmp > 65535)
     f94:	69 a9       	ldd	r22, Y+49	; 0x31
     f96:	7a a9       	ldd	r23, Y+50	; 0x32
     f98:	8b a9       	ldd	r24, Y+51	; 0x33
     f9a:	9c a9       	ldd	r25, Y+52	; 0x34
     f9c:	20 e0       	ldi	r18, 0x00	; 0
     f9e:	3f ef       	ldi	r19, 0xFF	; 255
     fa0:	4f e7       	ldi	r20, 0x7F	; 127
     fa2:	57 e4       	ldi	r21, 0x47	; 71
     fa4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
     fa8:	18 16       	cp	r1, r24
     faa:	4c f5       	brge	.+82     	; 0xffe <creat_pass+0x41e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     fac:	6d a9       	ldd	r22, Y+53	; 0x35
     fae:	7e a9       	ldd	r23, Y+54	; 0x36
     fb0:	8f a9       	ldd	r24, Y+55	; 0x37
     fb2:	98 ad       	ldd	r25, Y+56	; 0x38
     fb4:	20 e0       	ldi	r18, 0x00	; 0
     fb6:	30 e0       	ldi	r19, 0x00	; 0
     fb8:	40 e2       	ldi	r20, 0x20	; 32
     fba:	51 e4       	ldi	r21, 0x41	; 65
     fbc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
     fc0:	dc 01       	movw	r26, r24
     fc2:	cb 01       	movw	r24, r22
     fc4:	bc 01       	movw	r22, r24
     fc6:	cd 01       	movw	r24, r26
     fc8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
     fcc:	dc 01       	movw	r26, r24
     fce:	cb 01       	movw	r24, r22
     fd0:	98 ab       	std	Y+48, r25	; 0x30
     fd2:	8f a7       	std	Y+47, r24	; 0x2f
     fd4:	0f c0       	rjmp	.+30     	; 0xff4 <creat_pass+0x414>
     fd6:	88 ec       	ldi	r24, 0xC8	; 200
     fd8:	90 e0       	ldi	r25, 0x00	; 0
     fda:	9e a7       	std	Y+46, r25	; 0x2e
     fdc:	8d a7       	std	Y+45, r24	; 0x2d
     fde:	8d a5       	ldd	r24, Y+45	; 0x2d
     fe0:	9e a5       	ldd	r25, Y+46	; 0x2e
     fe2:	01 97       	sbiw	r24, 0x01	; 1
     fe4:	f1 f7       	brne	.-4      	; 0xfe2 <creat_pass+0x402>
     fe6:	9e a7       	std	Y+46, r25	; 0x2e
     fe8:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     fea:	8f a5       	ldd	r24, Y+47	; 0x2f
     fec:	98 a9       	ldd	r25, Y+48	; 0x30
     fee:	01 97       	sbiw	r24, 0x01	; 1
     ff0:	98 ab       	std	Y+48, r25	; 0x30
     ff2:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     ff4:	8f a5       	ldd	r24, Y+47	; 0x2f
     ff6:	98 a9       	ldd	r25, Y+48	; 0x30
     ff8:	00 97       	sbiw	r24, 0x00	; 0
     ffa:	69 f7       	brne	.-38     	; 0xfd6 <creat_pass+0x3f6>
     ffc:	14 c0       	rjmp	.+40     	; 0x1026 <creat_pass+0x446>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ffe:	69 a9       	ldd	r22, Y+49	; 0x31
    1000:	7a a9       	ldd	r23, Y+50	; 0x32
    1002:	8b a9       	ldd	r24, Y+51	; 0x33
    1004:	9c a9       	ldd	r25, Y+52	; 0x34
    1006:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    100a:	dc 01       	movw	r26, r24
    100c:	cb 01       	movw	r24, r22
    100e:	98 ab       	std	Y+48, r25	; 0x30
    1010:	8f a7       	std	Y+47, r24	; 0x2f
    1012:	8f a5       	ldd	r24, Y+47	; 0x2f
    1014:	98 a9       	ldd	r25, Y+48	; 0x30
    1016:	9c a7       	std	Y+44, r25	; 0x2c
    1018:	8b a7       	std	Y+43, r24	; 0x2b
    101a:	8b a5       	ldd	r24, Y+43	; 0x2b
    101c:	9c a5       	ldd	r25, Y+44	; 0x2c
    101e:	01 97       	sbiw	r24, 0x01	; 1
    1020:	f1 f7       	brne	.-4      	; 0x101e <creat_pass+0x43e>
    1022:	9c a7       	std	Y+44, r25	; 0x2c
    1024:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(10);
	}

	/****************check if the entered passwords are same or not *************/
	check=1;
	for(int i=0;i<5;i++){
    1026:	de 01       	movw	r26, r28
    1028:	ab 5a       	subi	r26, 0xAB	; 171
    102a:	bf 4f       	sbci	r27, 0xFF	; 255
    102c:	fe 01       	movw	r30, r28
    102e:	eb 5a       	subi	r30, 0xAB	; 171
    1030:	ff 4f       	sbci	r31, 0xFF	; 255
    1032:	80 81       	ld	r24, Z
    1034:	91 81       	ldd	r25, Z+1	; 0x01
    1036:	01 96       	adiw	r24, 0x01	; 1
    1038:	11 96       	adiw	r26, 0x01	; 1
    103a:	9c 93       	st	X, r25
    103c:	8e 93       	st	-X, r24
    103e:	fe 01       	movw	r30, r28
    1040:	eb 5a       	subi	r30, 0xAB	; 171
    1042:	ff 4f       	sbci	r31, 0xFF	; 255
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	85 30       	cpi	r24, 0x05	; 5
    104a:	91 05       	cpc	r25, r1
    104c:	0c f4       	brge	.+2      	; 0x1050 <creat_pass+0x470>
    104e:	62 cf       	rjmp	.-316    	; 0xf14 <creat_pass+0x334>
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	90 e0       	ldi	r25, 0x00	; 0
    1054:	a8 e4       	ldi	r26, 0x48	; 72
    1056:	b2 e4       	ldi	r27, 0x42	; 66
    1058:	8f a3       	std	Y+39, r24	; 0x27
    105a:	98 a7       	std	Y+40, r25	; 0x28
    105c:	a9 a7       	std	Y+41, r26	; 0x29
    105e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1060:	6f a1       	ldd	r22, Y+39	; 0x27
    1062:	78 a5       	ldd	r23, Y+40	; 0x28
    1064:	89 a5       	ldd	r24, Y+41	; 0x29
    1066:	9a a5       	ldd	r25, Y+42	; 0x2a
    1068:	20 e0       	ldi	r18, 0x00	; 0
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	4a ef       	ldi	r20, 0xFA	; 250
    106e:	54 e4       	ldi	r21, 0x44	; 68
    1070:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1074:	dc 01       	movw	r26, r24
    1076:	cb 01       	movw	r24, r22
    1078:	8b a3       	std	Y+35, r24	; 0x23
    107a:	9c a3       	std	Y+36, r25	; 0x24
    107c:	ad a3       	std	Y+37, r26	; 0x25
    107e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    1080:	6b a1       	ldd	r22, Y+35	; 0x23
    1082:	7c a1       	ldd	r23, Y+36	; 0x24
    1084:	8d a1       	ldd	r24, Y+37	; 0x25
    1086:	9e a1       	ldd	r25, Y+38	; 0x26
    1088:	20 e0       	ldi	r18, 0x00	; 0
    108a:	30 e0       	ldi	r19, 0x00	; 0
    108c:	40 e8       	ldi	r20, 0x80	; 128
    108e:	5f e3       	ldi	r21, 0x3F	; 63
    1090:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1094:	88 23       	and	r24, r24
    1096:	2c f4       	brge	.+10     	; 0x10a2 <creat_pass+0x4c2>
		__ticks = 1;
    1098:	81 e0       	ldi	r24, 0x01	; 1
    109a:	90 e0       	ldi	r25, 0x00	; 0
    109c:	9a a3       	std	Y+34, r25	; 0x22
    109e:	89 a3       	std	Y+33, r24	; 0x21
    10a0:	3f c0       	rjmp	.+126    	; 0x1120 <creat_pass+0x540>
	else if (__tmp > 65535)
    10a2:	6b a1       	ldd	r22, Y+35	; 0x23
    10a4:	7c a1       	ldd	r23, Y+36	; 0x24
    10a6:	8d a1       	ldd	r24, Y+37	; 0x25
    10a8:	9e a1       	ldd	r25, Y+38	; 0x26
    10aa:	20 e0       	ldi	r18, 0x00	; 0
    10ac:	3f ef       	ldi	r19, 0xFF	; 255
    10ae:	4f e7       	ldi	r20, 0x7F	; 127
    10b0:	57 e4       	ldi	r21, 0x47	; 71
    10b2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    10b6:	18 16       	cp	r1, r24
    10b8:	4c f5       	brge	.+82     	; 0x110c <creat_pass+0x52c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    10ba:	6f a1       	ldd	r22, Y+39	; 0x27
    10bc:	78 a5       	ldd	r23, Y+40	; 0x28
    10be:	89 a5       	ldd	r24, Y+41	; 0x29
    10c0:	9a a5       	ldd	r25, Y+42	; 0x2a
    10c2:	20 e0       	ldi	r18, 0x00	; 0
    10c4:	30 e0       	ldi	r19, 0x00	; 0
    10c6:	40 e2       	ldi	r20, 0x20	; 32
    10c8:	51 e4       	ldi	r21, 0x41	; 65
    10ca:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	bc 01       	movw	r22, r24
    10d4:	cd 01       	movw	r24, r26
    10d6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    10da:	dc 01       	movw	r26, r24
    10dc:	cb 01       	movw	r24, r22
    10de:	9a a3       	std	Y+34, r25	; 0x22
    10e0:	89 a3       	std	Y+33, r24	; 0x21
    10e2:	0f c0       	rjmp	.+30     	; 0x1102 <creat_pass+0x522>
    10e4:	88 ec       	ldi	r24, 0xC8	; 200
    10e6:	90 e0       	ldi	r25, 0x00	; 0
    10e8:	98 a3       	std	Y+32, r25	; 0x20
    10ea:	8f 8f       	std	Y+31, r24	; 0x1f
    10ec:	8f 8d       	ldd	r24, Y+31	; 0x1f
    10ee:	98 a1       	ldd	r25, Y+32	; 0x20
    10f0:	01 97       	sbiw	r24, 0x01	; 1
    10f2:	f1 f7       	brne	.-4      	; 0x10f0 <creat_pass+0x510>
    10f4:	98 a3       	std	Y+32, r25	; 0x20
    10f6:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10f8:	89 a1       	ldd	r24, Y+33	; 0x21
    10fa:	9a a1       	ldd	r25, Y+34	; 0x22
    10fc:	01 97       	sbiw	r24, 0x01	; 1
    10fe:	9a a3       	std	Y+34, r25	; 0x22
    1100:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1102:	89 a1       	ldd	r24, Y+33	; 0x21
    1104:	9a a1       	ldd	r25, Y+34	; 0x22
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	69 f7       	brne	.-38     	; 0x10e4 <creat_pass+0x504>
    110a:	14 c0       	rjmp	.+40     	; 0x1134 <creat_pass+0x554>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    110c:	6b a1       	ldd	r22, Y+35	; 0x23
    110e:	7c a1       	ldd	r23, Y+36	; 0x24
    1110:	8d a1       	ldd	r24, Y+37	; 0x25
    1112:	9e a1       	ldd	r25, Y+38	; 0x26
    1114:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1118:	dc 01       	movw	r26, r24
    111a:	cb 01       	movw	r24, r22
    111c:	9a a3       	std	Y+34, r25	; 0x22
    111e:	89 a3       	std	Y+33, r24	; 0x21
    1120:	89 a1       	ldd	r24, Y+33	; 0x21
    1122:	9a a1       	ldd	r25, Y+34	; 0x22
    1124:	9e 8f       	std	Y+30, r25	; 0x1e
    1126:	8d 8f       	std	Y+29, r24	; 0x1d
    1128:	8d 8d       	ldd	r24, Y+29	; 0x1d
    112a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    112c:	01 97       	sbiw	r24, 0x01	; 1
    112e:	f1 f7       	brne	.-4      	; 0x112c <creat_pass+0x54c>
    1130:	9e 8f       	std	Y+30, r25	; 0x1e
    1132:	8d 8f       	std	Y+29, r24	; 0x1d
		}

	}
	_delay_ms(50);
	/************** Send the result of check process  *************/
	UART_sendByte(check);
    1134:	80 91 68 00 	lds	r24, 0x0068
    1138:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_sendByte>
    113c:	80 e0       	ldi	r24, 0x00	; 0
    113e:	90 e0       	ldi	r25, 0x00	; 0
    1140:	a8 ec       	ldi	r26, 0xC8	; 200
    1142:	b2 e4       	ldi	r27, 0x42	; 66
    1144:	89 8f       	std	Y+25, r24	; 0x19
    1146:	9a 8f       	std	Y+26, r25	; 0x1a
    1148:	ab 8f       	std	Y+27, r26	; 0x1b
    114a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    114c:	69 8d       	ldd	r22, Y+25	; 0x19
    114e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1150:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1152:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1154:	20 e0       	ldi	r18, 0x00	; 0
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	4a ef       	ldi	r20, 0xFA	; 250
    115a:	54 e4       	ldi	r21, 0x44	; 68
    115c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1160:	dc 01       	movw	r26, r24
    1162:	cb 01       	movw	r24, r22
    1164:	8d 8b       	std	Y+21, r24	; 0x15
    1166:	9e 8b       	std	Y+22, r25	; 0x16
    1168:	af 8b       	std	Y+23, r26	; 0x17
    116a:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    116c:	6d 89       	ldd	r22, Y+21	; 0x15
    116e:	7e 89       	ldd	r23, Y+22	; 0x16
    1170:	8f 89       	ldd	r24, Y+23	; 0x17
    1172:	98 8d       	ldd	r25, Y+24	; 0x18
    1174:	20 e0       	ldi	r18, 0x00	; 0
    1176:	30 e0       	ldi	r19, 0x00	; 0
    1178:	40 e8       	ldi	r20, 0x80	; 128
    117a:	5f e3       	ldi	r21, 0x3F	; 63
    117c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1180:	88 23       	and	r24, r24
    1182:	2c f4       	brge	.+10     	; 0x118e <creat_pass+0x5ae>
		__ticks = 1;
    1184:	81 e0       	ldi	r24, 0x01	; 1
    1186:	90 e0       	ldi	r25, 0x00	; 0
    1188:	9c 8b       	std	Y+20, r25	; 0x14
    118a:	8b 8b       	std	Y+19, r24	; 0x13
    118c:	3f c0       	rjmp	.+126    	; 0x120c <creat_pass+0x62c>
	else if (__tmp > 65535)
    118e:	6d 89       	ldd	r22, Y+21	; 0x15
    1190:	7e 89       	ldd	r23, Y+22	; 0x16
    1192:	8f 89       	ldd	r24, Y+23	; 0x17
    1194:	98 8d       	ldd	r25, Y+24	; 0x18
    1196:	20 e0       	ldi	r18, 0x00	; 0
    1198:	3f ef       	ldi	r19, 0xFF	; 255
    119a:	4f e7       	ldi	r20, 0x7F	; 127
    119c:	57 e4       	ldi	r21, 0x47	; 71
    119e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    11a2:	18 16       	cp	r1, r24
    11a4:	4c f5       	brge	.+82     	; 0x11f8 <creat_pass+0x618>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    11a6:	69 8d       	ldd	r22, Y+25	; 0x19
    11a8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    11aa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    11ac:	9c 8d       	ldd	r25, Y+28	; 0x1c
    11ae:	20 e0       	ldi	r18, 0x00	; 0
    11b0:	30 e0       	ldi	r19, 0x00	; 0
    11b2:	40 e2       	ldi	r20, 0x20	; 32
    11b4:	51 e4       	ldi	r21, 0x41	; 65
    11b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    11ba:	dc 01       	movw	r26, r24
    11bc:	cb 01       	movw	r24, r22
    11be:	bc 01       	movw	r22, r24
    11c0:	cd 01       	movw	r24, r26
    11c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    11c6:	dc 01       	movw	r26, r24
    11c8:	cb 01       	movw	r24, r22
    11ca:	9c 8b       	std	Y+20, r25	; 0x14
    11cc:	8b 8b       	std	Y+19, r24	; 0x13
    11ce:	0f c0       	rjmp	.+30     	; 0x11ee <creat_pass+0x60e>
    11d0:	88 ec       	ldi	r24, 0xC8	; 200
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	9a 8b       	std	Y+18, r25	; 0x12
    11d6:	89 8b       	std	Y+17, r24	; 0x11
    11d8:	89 89       	ldd	r24, Y+17	; 0x11
    11da:	9a 89       	ldd	r25, Y+18	; 0x12
    11dc:	01 97       	sbiw	r24, 0x01	; 1
    11de:	f1 f7       	brne	.-4      	; 0x11dc <creat_pass+0x5fc>
    11e0:	9a 8b       	std	Y+18, r25	; 0x12
    11e2:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    11e4:	8b 89       	ldd	r24, Y+19	; 0x13
    11e6:	9c 89       	ldd	r25, Y+20	; 0x14
    11e8:	01 97       	sbiw	r24, 0x01	; 1
    11ea:	9c 8b       	std	Y+20, r25	; 0x14
    11ec:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    11ee:	8b 89       	ldd	r24, Y+19	; 0x13
    11f0:	9c 89       	ldd	r25, Y+20	; 0x14
    11f2:	00 97       	sbiw	r24, 0x00	; 0
    11f4:	69 f7       	brne	.-38     	; 0x11d0 <creat_pass+0x5f0>
    11f6:	14 c0       	rjmp	.+40     	; 0x1220 <creat_pass+0x640>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    11f8:	6d 89       	ldd	r22, Y+21	; 0x15
    11fa:	7e 89       	ldd	r23, Y+22	; 0x16
    11fc:	8f 89       	ldd	r24, Y+23	; 0x17
    11fe:	98 8d       	ldd	r25, Y+24	; 0x18
    1200:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1204:	dc 01       	movw	r26, r24
    1206:	cb 01       	movw	r24, r22
    1208:	9c 8b       	std	Y+20, r25	; 0x14
    120a:	8b 8b       	std	Y+19, r24	; 0x13
    120c:	8b 89       	ldd	r24, Y+19	; 0x13
    120e:	9c 89       	ldd	r25, Y+20	; 0x14
    1210:	98 8b       	std	Y+16, r25	; 0x10
    1212:	8f 87       	std	Y+15, r24	; 0x0f
    1214:	8f 85       	ldd	r24, Y+15	; 0x0f
    1216:	98 89       	ldd	r25, Y+16	; 0x10
    1218:	01 97       	sbiw	r24, 0x01	; 1
    121a:	f1 f7       	brne	.-4      	; 0x1218 <creat_pass+0x638>
    121c:	98 8b       	std	Y+16, r25	; 0x10
    121e:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(100);
	/************** SAVE the password at the external EEPROM if check==1   */
	if (check==1){
    1220:	80 91 68 00 	lds	r24, 0x0068
    1224:	81 30       	cpi	r24, 0x01	; 1
    1226:	09 f0       	breq	.+2      	; 0x122a <creat_pass+0x64a>
    1228:	7f c0       	rjmp	.+254    	; 0x1328 <creat_pass+0x748>
		flagg=0;
    122a:	10 92 7a 00 	sts	0x007A, r1
		/* Initialize the TWI/I2C Driver */
		TWI_init();
    122e:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <TWI_init>
		EEPROM_writeArray((0x0311),value1,5); /* Write 0x0F in the external EEPROM */
    1232:	24 e8       	ldi	r18, 0x84	; 132
    1234:	30 e0       	ldi	r19, 0x00	; 0
    1236:	81 e1       	ldi	r24, 0x11	; 17
    1238:	93 e0       	ldi	r25, 0x03	; 3
    123a:	b9 01       	movw	r22, r18
    123c:	45 e0       	ldi	r20, 0x05	; 5
    123e:	50 e0       	ldi	r21, 0x00	; 0
    1240:	0e 94 5d 0f 	call	0x1eba	; 0x1eba <EEPROM_writeArray>
    1244:	80 e0       	ldi	r24, 0x00	; 0
    1246:	90 e0       	ldi	r25, 0x00	; 0
    1248:	a8 ec       	ldi	r26, 0xC8	; 200
    124a:	b2 e4       	ldi	r27, 0x42	; 66
    124c:	8b 87       	std	Y+11, r24	; 0x0b
    124e:	9c 87       	std	Y+12, r25	; 0x0c
    1250:	ad 87       	std	Y+13, r26	; 0x0d
    1252:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1254:	6b 85       	ldd	r22, Y+11	; 0x0b
    1256:	7c 85       	ldd	r23, Y+12	; 0x0c
    1258:	8d 85       	ldd	r24, Y+13	; 0x0d
    125a:	9e 85       	ldd	r25, Y+14	; 0x0e
    125c:	20 e0       	ldi	r18, 0x00	; 0
    125e:	30 e0       	ldi	r19, 0x00	; 0
    1260:	4a ef       	ldi	r20, 0xFA	; 250
    1262:	54 e4       	ldi	r21, 0x44	; 68
    1264:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1268:	dc 01       	movw	r26, r24
    126a:	cb 01       	movw	r24, r22
    126c:	8f 83       	std	Y+7, r24	; 0x07
    126e:	98 87       	std	Y+8, r25	; 0x08
    1270:	a9 87       	std	Y+9, r26	; 0x09
    1272:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1274:	6f 81       	ldd	r22, Y+7	; 0x07
    1276:	78 85       	ldd	r23, Y+8	; 0x08
    1278:	89 85       	ldd	r24, Y+9	; 0x09
    127a:	9a 85       	ldd	r25, Y+10	; 0x0a
    127c:	20 e0       	ldi	r18, 0x00	; 0
    127e:	30 e0       	ldi	r19, 0x00	; 0
    1280:	40 e8       	ldi	r20, 0x80	; 128
    1282:	5f e3       	ldi	r21, 0x3F	; 63
    1284:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1288:	88 23       	and	r24, r24
    128a:	2c f4       	brge	.+10     	; 0x1296 <creat_pass+0x6b6>
		__ticks = 1;
    128c:	81 e0       	ldi	r24, 0x01	; 1
    128e:	90 e0       	ldi	r25, 0x00	; 0
    1290:	9e 83       	std	Y+6, r25	; 0x06
    1292:	8d 83       	std	Y+5, r24	; 0x05
    1294:	3f c0       	rjmp	.+126    	; 0x1314 <creat_pass+0x734>
	else if (__tmp > 65535)
    1296:	6f 81       	ldd	r22, Y+7	; 0x07
    1298:	78 85       	ldd	r23, Y+8	; 0x08
    129a:	89 85       	ldd	r24, Y+9	; 0x09
    129c:	9a 85       	ldd	r25, Y+10	; 0x0a
    129e:	20 e0       	ldi	r18, 0x00	; 0
    12a0:	3f ef       	ldi	r19, 0xFF	; 255
    12a2:	4f e7       	ldi	r20, 0x7F	; 127
    12a4:	57 e4       	ldi	r21, 0x47	; 71
    12a6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12aa:	18 16       	cp	r1, r24
    12ac:	4c f5       	brge	.+82     	; 0x1300 <creat_pass+0x720>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12ae:	6b 85       	ldd	r22, Y+11	; 0x0b
    12b0:	7c 85       	ldd	r23, Y+12	; 0x0c
    12b2:	8d 85       	ldd	r24, Y+13	; 0x0d
    12b4:	9e 85       	ldd	r25, Y+14	; 0x0e
    12b6:	20 e0       	ldi	r18, 0x00	; 0
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	40 e2       	ldi	r20, 0x20	; 32
    12bc:	51 e4       	ldi	r21, 0x41	; 65
    12be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12c2:	dc 01       	movw	r26, r24
    12c4:	cb 01       	movw	r24, r22
    12c6:	bc 01       	movw	r22, r24
    12c8:	cd 01       	movw	r24, r26
    12ca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12ce:	dc 01       	movw	r26, r24
    12d0:	cb 01       	movw	r24, r22
    12d2:	9e 83       	std	Y+6, r25	; 0x06
    12d4:	8d 83       	std	Y+5, r24	; 0x05
    12d6:	0f c0       	rjmp	.+30     	; 0x12f6 <creat_pass+0x716>
    12d8:	88 ec       	ldi	r24, 0xC8	; 200
    12da:	90 e0       	ldi	r25, 0x00	; 0
    12dc:	9c 83       	std	Y+4, r25	; 0x04
    12de:	8b 83       	std	Y+3, r24	; 0x03
    12e0:	8b 81       	ldd	r24, Y+3	; 0x03
    12e2:	9c 81       	ldd	r25, Y+4	; 0x04
    12e4:	01 97       	sbiw	r24, 0x01	; 1
    12e6:	f1 f7       	brne	.-4      	; 0x12e4 <creat_pass+0x704>
    12e8:	9c 83       	std	Y+4, r25	; 0x04
    12ea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    12ec:	8d 81       	ldd	r24, Y+5	; 0x05
    12ee:	9e 81       	ldd	r25, Y+6	; 0x06
    12f0:	01 97       	sbiw	r24, 0x01	; 1
    12f2:	9e 83       	std	Y+6, r25	; 0x06
    12f4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    12f6:	8d 81       	ldd	r24, Y+5	; 0x05
    12f8:	9e 81       	ldd	r25, Y+6	; 0x06
    12fa:	00 97       	sbiw	r24, 0x00	; 0
    12fc:	69 f7       	brne	.-38     	; 0x12d8 <creat_pass+0x6f8>
    12fe:	14 c0       	rjmp	.+40     	; 0x1328 <creat_pass+0x748>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1300:	6f 81       	ldd	r22, Y+7	; 0x07
    1302:	78 85       	ldd	r23, Y+8	; 0x08
    1304:	89 85       	ldd	r24, Y+9	; 0x09
    1306:	9a 85       	ldd	r25, Y+10	; 0x0a
    1308:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    130c:	dc 01       	movw	r26, r24
    130e:	cb 01       	movw	r24, r22
    1310:	9e 83       	std	Y+6, r25	; 0x06
    1312:	8d 83       	std	Y+5, r24	; 0x05
    1314:	8d 81       	ldd	r24, Y+5	; 0x05
    1316:	9e 81       	ldd	r25, Y+6	; 0x06
    1318:	9a 83       	std	Y+2, r25	; 0x02
    131a:	89 83       	std	Y+1, r24	; 0x01
    131c:	89 81       	ldd	r24, Y+1	; 0x01
    131e:	9a 81       	ldd	r25, Y+2	; 0x02
    1320:	01 97       	sbiw	r24, 0x01	; 1
    1322:	f1 f7       	brne	.-4      	; 0x1320 <creat_pass+0x740>
    1324:	9a 83       	std	Y+2, r25	; 0x02
    1326:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(100);

	}
}
    1328:	c6 5a       	subi	r28, 0xA6	; 166
    132a:	df 4f       	sbci	r29, 0xFF	; 255
    132c:	0f b6       	in	r0, 0x3f	; 63
    132e:	f8 94       	cli
    1330:	de bf       	out	0x3e, r29	; 62
    1332:	0f be       	out	0x3f, r0	; 63
    1334:	cd bf       	out	0x3d, r28	; 61
    1336:	cf 91       	pop	r28
    1338:	df 91       	pop	r29
    133a:	1f 91       	pop	r17
    133c:	0f 91       	pop	r16
    133e:	08 95       	ret

00001340 <main_option>:

void main_option(void){
    1340:	df 93       	push	r29
    1342:	cf 93       	push	r28
    1344:	cd b7       	in	r28, 0x3d	; 61
    1346:	de b7       	in	r29, 0x3e	; 62
    1348:	2e 97       	sbiw	r28, 0x0e	; 14
    134a:	0f b6       	in	r0, 0x3f	; 63
    134c:	f8 94       	cli
    134e:	de bf       	out	0x3e, r29	; 62
    1350:	0f be       	out	0x3f, r0	; 63
    1352:	cd bf       	out	0x3d, r28	; 61
	/****** RECEIVE the required operation from the HMI_ECU */
	operation=UART_recieveByte();
    1354:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
    1358:	80 93 78 00 	sts	0x0078, r24
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a8 e4       	ldi	r26, 0x48	; 72
    1362:	b2 e4       	ldi	r27, 0x42	; 66
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
    1368:	ad 87       	std	Y+13, r26	; 0x0d
    136a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a ef       	ldi	r20, 0xFA	; 250
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	a9 87       	std	Y+9, r26	; 0x09
    138a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <main_option+0x6e>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <main_option+0xec>
	else if (__tmp > 65535)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <main_option+0xd8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <main_option+0xce>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <main_option+0xbc>
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <main_option+0xb0>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <main_option+0x100>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <main_option+0xf8>
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
}
    1440:	2e 96       	adiw	r28, 0x0e	; 14
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <check_reenter_pass>:

void check_reenter_pass(void){
    1452:	0f 93       	push	r16
    1454:	1f 93       	push	r17
    1456:	df 93       	push	r29
    1458:	cf 93       	push	r28
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	cd 55       	subi	r28, 0x5D	; 93
    1460:	d0 40       	sbci	r29, 0x00	; 0
    1462:	0f b6       	in	r0, 0x3f	; 63
    1464:	f8 94       	cli
    1466:	de bf       	out	0x3e, r29	; 62
    1468:	0f be       	out	0x3f, r0	; 63
    146a:	cd bf       	out	0x3d, r28	; 61

	uint8 value3[5];
	/************* RECEIVE the re-entered password from HMI_ECU ****************/
	for(int i=0;i<5;i++){
    146c:	fe 01       	movw	r30, r28
    146e:	e9 5a       	subi	r30, 0xA9	; 169
    1470:	ff 4f       	sbci	r31, 0xFF	; 255
    1472:	11 82       	std	Z+1, r1	; 0x01
    1474:	10 82       	st	Z, r1
    1476:	ce c0       	rjmp	.+412    	; 0x1614 <check_reenter_pass+0x1c2>
		value3[i]=UART_recieveByte();
    1478:	fe 01       	movw	r30, r28
    147a:	e9 5a       	subi	r30, 0xA9	; 169
    147c:	ff 4f       	sbci	r31, 0xFF	; 255
    147e:	00 81       	ld	r16, Z
    1480:	11 81       	ldd	r17, Z+1	; 0x01
    1482:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
    1486:	28 2f       	mov	r18, r24
    1488:	ce 01       	movw	r24, r28
    148a:	87 5a       	subi	r24, 0xA7	; 167
    148c:	9f 4f       	sbci	r25, 0xFF	; 255
    148e:	fc 01       	movw	r30, r24
    1490:	e0 0f       	add	r30, r16
    1492:	f1 1f       	adc	r31, r17
    1494:	20 83       	st	Z, r18
    1496:	fe 01       	movw	r30, r28
    1498:	ef 5a       	subi	r30, 0xAF	; 175
    149a:	ff 4f       	sbci	r31, 0xFF	; 255
    149c:	80 e0       	ldi	r24, 0x00	; 0
    149e:	90 e0       	ldi	r25, 0x00	; 0
    14a0:	a0 ea       	ldi	r26, 0xA0	; 160
    14a2:	b1 e4       	ldi	r27, 0x41	; 65
    14a4:	80 83       	st	Z, r24
    14a6:	91 83       	std	Z+1, r25	; 0x01
    14a8:	a2 83       	std	Z+2, r26	; 0x02
    14aa:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14ac:	8e 01       	movw	r16, r28
    14ae:	03 5b       	subi	r16, 0xB3	; 179
    14b0:	1f 4f       	sbci	r17, 0xFF	; 255
    14b2:	fe 01       	movw	r30, r28
    14b4:	ef 5a       	subi	r30, 0xAF	; 175
    14b6:	ff 4f       	sbci	r31, 0xFF	; 255
    14b8:	60 81       	ld	r22, Z
    14ba:	71 81       	ldd	r23, Z+1	; 0x01
    14bc:	82 81       	ldd	r24, Z+2	; 0x02
    14be:	93 81       	ldd	r25, Z+3	; 0x03
    14c0:	20 e0       	ldi	r18, 0x00	; 0
    14c2:	30 e0       	ldi	r19, 0x00	; 0
    14c4:	4a ef       	ldi	r20, 0xFA	; 250
    14c6:	54 e4       	ldi	r21, 0x44	; 68
    14c8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14cc:	dc 01       	movw	r26, r24
    14ce:	cb 01       	movw	r24, r22
    14d0:	f8 01       	movw	r30, r16
    14d2:	80 83       	st	Z, r24
    14d4:	91 83       	std	Z+1, r25	; 0x01
    14d6:	a2 83       	std	Z+2, r26	; 0x02
    14d8:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    14da:	fe 01       	movw	r30, r28
    14dc:	e3 5b       	subi	r30, 0xB3	; 179
    14de:	ff 4f       	sbci	r31, 0xFF	; 255
    14e0:	60 81       	ld	r22, Z
    14e2:	71 81       	ldd	r23, Z+1	; 0x01
    14e4:	82 81       	ldd	r24, Z+2	; 0x02
    14e6:	93 81       	ldd	r25, Z+3	; 0x03
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	30 e0       	ldi	r19, 0x00	; 0
    14ec:	40 e8       	ldi	r20, 0x80	; 128
    14ee:	5f e3       	ldi	r21, 0x3F	; 63
    14f0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14f4:	88 23       	and	r24, r24
    14f6:	44 f4       	brge	.+16     	; 0x1508 <check_reenter_pass+0xb6>
		__ticks = 1;
    14f8:	fe 01       	movw	r30, r28
    14fa:	e5 5b       	subi	r30, 0xB5	; 181
    14fc:	ff 4f       	sbci	r31, 0xFF	; 255
    14fe:	81 e0       	ldi	r24, 0x01	; 1
    1500:	90 e0       	ldi	r25, 0x00	; 0
    1502:	91 83       	std	Z+1, r25	; 0x01
    1504:	80 83       	st	Z, r24
    1506:	64 c0       	rjmp	.+200    	; 0x15d0 <check_reenter_pass+0x17e>
	else if (__tmp > 65535)
    1508:	fe 01       	movw	r30, r28
    150a:	e3 5b       	subi	r30, 0xB3	; 179
    150c:	ff 4f       	sbci	r31, 0xFF	; 255
    150e:	60 81       	ld	r22, Z
    1510:	71 81       	ldd	r23, Z+1	; 0x01
    1512:	82 81       	ldd	r24, Z+2	; 0x02
    1514:	93 81       	ldd	r25, Z+3	; 0x03
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	0c f0       	brlt	.+2      	; 0x1528 <check_reenter_pass+0xd6>
    1526:	43 c0       	rjmp	.+134    	; 0x15ae <check_reenter_pass+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1528:	fe 01       	movw	r30, r28
    152a:	ef 5a       	subi	r30, 0xAF	; 175
    152c:	ff 4f       	sbci	r31, 0xFF	; 255
    152e:	60 81       	ld	r22, Z
    1530:	71 81       	ldd	r23, Z+1	; 0x01
    1532:	82 81       	ldd	r24, Z+2	; 0x02
    1534:	93 81       	ldd	r25, Z+3	; 0x03
    1536:	20 e0       	ldi	r18, 0x00	; 0
    1538:	30 e0       	ldi	r19, 0x00	; 0
    153a:	40 e2       	ldi	r20, 0x20	; 32
    153c:	51 e4       	ldi	r21, 0x41	; 65
    153e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1542:	dc 01       	movw	r26, r24
    1544:	cb 01       	movw	r24, r22
    1546:	8e 01       	movw	r16, r28
    1548:	05 5b       	subi	r16, 0xB5	; 181
    154a:	1f 4f       	sbci	r17, 0xFF	; 255
    154c:	bc 01       	movw	r22, r24
    154e:	cd 01       	movw	r24, r26
    1550:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1554:	dc 01       	movw	r26, r24
    1556:	cb 01       	movw	r24, r22
    1558:	f8 01       	movw	r30, r16
    155a:	91 83       	std	Z+1, r25	; 0x01
    155c:	80 83       	st	Z, r24
    155e:	1f c0       	rjmp	.+62     	; 0x159e <check_reenter_pass+0x14c>
    1560:	fe 01       	movw	r30, r28
    1562:	e7 5b       	subi	r30, 0xB7	; 183
    1564:	ff 4f       	sbci	r31, 0xFF	; 255
    1566:	88 ec       	ldi	r24, 0xC8	; 200
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	91 83       	std	Z+1, r25	; 0x01
    156c:	80 83       	st	Z, r24
    156e:	fe 01       	movw	r30, r28
    1570:	e7 5b       	subi	r30, 0xB7	; 183
    1572:	ff 4f       	sbci	r31, 0xFF	; 255
    1574:	80 81       	ld	r24, Z
    1576:	91 81       	ldd	r25, Z+1	; 0x01
    1578:	01 97       	sbiw	r24, 0x01	; 1
    157a:	f1 f7       	brne	.-4      	; 0x1578 <check_reenter_pass+0x126>
    157c:	fe 01       	movw	r30, r28
    157e:	e7 5b       	subi	r30, 0xB7	; 183
    1580:	ff 4f       	sbci	r31, 0xFF	; 255
    1582:	91 83       	std	Z+1, r25	; 0x01
    1584:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1586:	de 01       	movw	r26, r28
    1588:	a5 5b       	subi	r26, 0xB5	; 181
    158a:	bf 4f       	sbci	r27, 0xFF	; 255
    158c:	fe 01       	movw	r30, r28
    158e:	e5 5b       	subi	r30, 0xB5	; 181
    1590:	ff 4f       	sbci	r31, 0xFF	; 255
    1592:	80 81       	ld	r24, Z
    1594:	91 81       	ldd	r25, Z+1	; 0x01
    1596:	01 97       	sbiw	r24, 0x01	; 1
    1598:	11 96       	adiw	r26, 0x01	; 1
    159a:	9c 93       	st	X, r25
    159c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    159e:	fe 01       	movw	r30, r28
    15a0:	e5 5b       	subi	r30, 0xB5	; 181
    15a2:	ff 4f       	sbci	r31, 0xFF	; 255
    15a4:	80 81       	ld	r24, Z
    15a6:	91 81       	ldd	r25, Z+1	; 0x01
    15a8:	00 97       	sbiw	r24, 0x00	; 0
    15aa:	d1 f6       	brne	.-76     	; 0x1560 <check_reenter_pass+0x10e>
    15ac:	27 c0       	rjmp	.+78     	; 0x15fc <check_reenter_pass+0x1aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    15ae:	8e 01       	movw	r16, r28
    15b0:	05 5b       	subi	r16, 0xB5	; 181
    15b2:	1f 4f       	sbci	r17, 0xFF	; 255
    15b4:	fe 01       	movw	r30, r28
    15b6:	e3 5b       	subi	r30, 0xB3	; 179
    15b8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ba:	60 81       	ld	r22, Z
    15bc:	71 81       	ldd	r23, Z+1	; 0x01
    15be:	82 81       	ldd	r24, Z+2	; 0x02
    15c0:	93 81       	ldd	r25, Z+3	; 0x03
    15c2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    15c6:	dc 01       	movw	r26, r24
    15c8:	cb 01       	movw	r24, r22
    15ca:	f8 01       	movw	r30, r16
    15cc:	91 83       	std	Z+1, r25	; 0x01
    15ce:	80 83       	st	Z, r24
    15d0:	de 01       	movw	r26, r28
    15d2:	a9 5b       	subi	r26, 0xB9	; 185
    15d4:	bf 4f       	sbci	r27, 0xFF	; 255
    15d6:	fe 01       	movw	r30, r28
    15d8:	e5 5b       	subi	r30, 0xB5	; 181
    15da:	ff 4f       	sbci	r31, 0xFF	; 255
    15dc:	80 81       	ld	r24, Z
    15de:	91 81       	ldd	r25, Z+1	; 0x01
    15e0:	8d 93       	st	X+, r24
    15e2:	9c 93       	st	X, r25
    15e4:	fe 01       	movw	r30, r28
    15e6:	e9 5b       	subi	r30, 0xB9	; 185
    15e8:	ff 4f       	sbci	r31, 0xFF	; 255
    15ea:	80 81       	ld	r24, Z
    15ec:	91 81       	ldd	r25, Z+1	; 0x01
    15ee:	01 97       	sbiw	r24, 0x01	; 1
    15f0:	f1 f7       	brne	.-4      	; 0x15ee <check_reenter_pass+0x19c>
    15f2:	fe 01       	movw	r30, r28
    15f4:	e9 5b       	subi	r30, 0xB9	; 185
    15f6:	ff 4f       	sbci	r31, 0xFF	; 255
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	80 83       	st	Z, r24

void check_reenter_pass(void){

	uint8 value3[5];
	/************* RECEIVE the re-entered password from HMI_ECU ****************/
	for(int i=0;i<5;i++){
    15fc:	de 01       	movw	r26, r28
    15fe:	a9 5a       	subi	r26, 0xA9	; 169
    1600:	bf 4f       	sbci	r27, 0xFF	; 255
    1602:	fe 01       	movw	r30, r28
    1604:	e9 5a       	subi	r30, 0xA9	; 169
    1606:	ff 4f       	sbci	r31, 0xFF	; 255
    1608:	80 81       	ld	r24, Z
    160a:	91 81       	ldd	r25, Z+1	; 0x01
    160c:	01 96       	adiw	r24, 0x01	; 1
    160e:	11 96       	adiw	r26, 0x01	; 1
    1610:	9c 93       	st	X, r25
    1612:	8e 93       	st	-X, r24
    1614:	fe 01       	movw	r30, r28
    1616:	e9 5a       	subi	r30, 0xA9	; 169
    1618:	ff 4f       	sbci	r31, 0xFF	; 255
    161a:	80 81       	ld	r24, Z
    161c:	91 81       	ldd	r25, Z+1	; 0x01
    161e:	85 30       	cpi	r24, 0x05	; 5
    1620:	91 05       	cpc	r25, r1
    1622:	0c f4       	brge	.+2      	; 0x1626 <check_reenter_pass+0x1d4>
    1624:	29 cf       	rjmp	.-430    	; 0x1478 <check_reenter_pass+0x26>
    1626:	fe 01       	movw	r30, r28
    1628:	ed 5b       	subi	r30, 0xBD	; 189
    162a:	ff 4f       	sbci	r31, 0xFF	; 255
    162c:	80 e0       	ldi	r24, 0x00	; 0
    162e:	90 e0       	ldi	r25, 0x00	; 0
    1630:	a8 e4       	ldi	r26, 0x48	; 72
    1632:	b2 e4       	ldi	r27, 0x42	; 66
    1634:	80 83       	st	Z, r24
    1636:	91 83       	std	Z+1, r25	; 0x01
    1638:	a2 83       	std	Z+2, r26	; 0x02
    163a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    163c:	8e 01       	movw	r16, r28
    163e:	01 5c       	subi	r16, 0xC1	; 193
    1640:	1f 4f       	sbci	r17, 0xFF	; 255
    1642:	fe 01       	movw	r30, r28
    1644:	ed 5b       	subi	r30, 0xBD	; 189
    1646:	ff 4f       	sbci	r31, 0xFF	; 255
    1648:	60 81       	ld	r22, Z
    164a:	71 81       	ldd	r23, Z+1	; 0x01
    164c:	82 81       	ldd	r24, Z+2	; 0x02
    164e:	93 81       	ldd	r25, Z+3	; 0x03
    1650:	20 e0       	ldi	r18, 0x00	; 0
    1652:	30 e0       	ldi	r19, 0x00	; 0
    1654:	4a ef       	ldi	r20, 0xFA	; 250
    1656:	54 e4       	ldi	r21, 0x44	; 68
    1658:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    165c:	dc 01       	movw	r26, r24
    165e:	cb 01       	movw	r24, r22
    1660:	f8 01       	movw	r30, r16
    1662:	80 83       	st	Z, r24
    1664:	91 83       	std	Z+1, r25	; 0x01
    1666:	a2 83       	std	Z+2, r26	; 0x02
    1668:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    166a:	fe 01       	movw	r30, r28
    166c:	ff 96       	adiw	r30, 0x3f	; 63
    166e:	60 81       	ld	r22, Z
    1670:	71 81       	ldd	r23, Z+1	; 0x01
    1672:	82 81       	ldd	r24, Z+2	; 0x02
    1674:	93 81       	ldd	r25, Z+3	; 0x03
    1676:	20 e0       	ldi	r18, 0x00	; 0
    1678:	30 e0       	ldi	r19, 0x00	; 0
    167a:	40 e8       	ldi	r20, 0x80	; 128
    167c:	5f e3       	ldi	r21, 0x3F	; 63
    167e:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1682:	88 23       	and	r24, r24
    1684:	2c f4       	brge	.+10     	; 0x1690 <check_reenter_pass+0x23e>
		__ticks = 1;
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	90 e0       	ldi	r25, 0x00	; 0
    168a:	9e af       	std	Y+62, r25	; 0x3e
    168c:	8d af       	std	Y+61, r24	; 0x3d
    168e:	46 c0       	rjmp	.+140    	; 0x171c <check_reenter_pass+0x2ca>
	else if (__tmp > 65535)
    1690:	fe 01       	movw	r30, r28
    1692:	ff 96       	adiw	r30, 0x3f	; 63
    1694:	60 81       	ld	r22, Z
    1696:	71 81       	ldd	r23, Z+1	; 0x01
    1698:	82 81       	ldd	r24, Z+2	; 0x02
    169a:	93 81       	ldd	r25, Z+3	; 0x03
    169c:	20 e0       	ldi	r18, 0x00	; 0
    169e:	3f ef       	ldi	r19, 0xFF	; 255
    16a0:	4f e7       	ldi	r20, 0x7F	; 127
    16a2:	57 e4       	ldi	r21, 0x47	; 71
    16a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    16a8:	18 16       	cp	r1, r24
    16aa:	64 f5       	brge	.+88     	; 0x1704 <check_reenter_pass+0x2b2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    16ac:	fe 01       	movw	r30, r28
    16ae:	ed 5b       	subi	r30, 0xBD	; 189
    16b0:	ff 4f       	sbci	r31, 0xFF	; 255
    16b2:	60 81       	ld	r22, Z
    16b4:	71 81       	ldd	r23, Z+1	; 0x01
    16b6:	82 81       	ldd	r24, Z+2	; 0x02
    16b8:	93 81       	ldd	r25, Z+3	; 0x03
    16ba:	20 e0       	ldi	r18, 0x00	; 0
    16bc:	30 e0       	ldi	r19, 0x00	; 0
    16be:	40 e2       	ldi	r20, 0x20	; 32
    16c0:	51 e4       	ldi	r21, 0x41	; 65
    16c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16c6:	dc 01       	movw	r26, r24
    16c8:	cb 01       	movw	r24, r22
    16ca:	bc 01       	movw	r22, r24
    16cc:	cd 01       	movw	r24, r26
    16ce:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    16d2:	dc 01       	movw	r26, r24
    16d4:	cb 01       	movw	r24, r22
    16d6:	9e af       	std	Y+62, r25	; 0x3e
    16d8:	8d af       	std	Y+61, r24	; 0x3d
    16da:	0f c0       	rjmp	.+30     	; 0x16fa <check_reenter_pass+0x2a8>
    16dc:	88 ec       	ldi	r24, 0xC8	; 200
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	9c af       	std	Y+60, r25	; 0x3c
    16e2:	8b af       	std	Y+59, r24	; 0x3b
    16e4:	8b ad       	ldd	r24, Y+59	; 0x3b
    16e6:	9c ad       	ldd	r25, Y+60	; 0x3c
    16e8:	01 97       	sbiw	r24, 0x01	; 1
    16ea:	f1 f7       	brne	.-4      	; 0x16e8 <check_reenter_pass+0x296>
    16ec:	9c af       	std	Y+60, r25	; 0x3c
    16ee:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16f0:	8d ad       	ldd	r24, Y+61	; 0x3d
    16f2:	9e ad       	ldd	r25, Y+62	; 0x3e
    16f4:	01 97       	sbiw	r24, 0x01	; 1
    16f6:	9e af       	std	Y+62, r25	; 0x3e
    16f8:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16fa:	8d ad       	ldd	r24, Y+61	; 0x3d
    16fc:	9e ad       	ldd	r25, Y+62	; 0x3e
    16fe:	00 97       	sbiw	r24, 0x00	; 0
    1700:	69 f7       	brne	.-38     	; 0x16dc <check_reenter_pass+0x28a>
    1702:	16 c0       	rjmp	.+44     	; 0x1730 <check_reenter_pass+0x2de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1704:	fe 01       	movw	r30, r28
    1706:	ff 96       	adiw	r30, 0x3f	; 63
    1708:	60 81       	ld	r22, Z
    170a:	71 81       	ldd	r23, Z+1	; 0x01
    170c:	82 81       	ldd	r24, Z+2	; 0x02
    170e:	93 81       	ldd	r25, Z+3	; 0x03
    1710:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1714:	dc 01       	movw	r26, r24
    1716:	cb 01       	movw	r24, r22
    1718:	9e af       	std	Y+62, r25	; 0x3e
    171a:	8d af       	std	Y+61, r24	; 0x3d
    171c:	8d ad       	ldd	r24, Y+61	; 0x3d
    171e:	9e ad       	ldd	r25, Y+62	; 0x3e
    1720:	9a af       	std	Y+58, r25	; 0x3a
    1722:	89 af       	std	Y+57, r24	; 0x39
    1724:	89 ad       	ldd	r24, Y+57	; 0x39
    1726:	9a ad       	ldd	r25, Y+58	; 0x3a
    1728:	01 97       	sbiw	r24, 0x01	; 1
    172a:	f1 f7       	brne	.-4      	; 0x1728 <check_reenter_pass+0x2d6>
    172c:	9a af       	std	Y+58, r25	; 0x3a
    172e:	89 af       	std	Y+57, r24	; 0x39
		value3[i]=UART_recieveByte();
		_delay_ms(20);
	}
	_delay_ms(50);
	/************ read the password already saved at external eeprom to compare it with the received re-entered password */
	TWI_init();
    1730:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <TWI_init>
	EEPROM_readArray((0x0311),&value1,5); /* Write 0x0F in the external EEPROM */
    1734:	24 e8       	ldi	r18, 0x84	; 132
    1736:	30 e0       	ldi	r19, 0x00	; 0
    1738:	81 e1       	ldi	r24, 0x11	; 17
    173a:	93 e0       	ldi	r25, 0x03	; 3
    173c:	b9 01       	movw	r22, r18
    173e:	45 e0       	ldi	r20, 0x05	; 5
    1740:	50 e0       	ldi	r21, 0x00	; 0
    1742:	0e 94 30 10 	call	0x2060	; 0x2060 <EEPROM_readArray>
    1746:	80 e0       	ldi	r24, 0x00	; 0
    1748:	90 e0       	ldi	r25, 0x00	; 0
    174a:	a8 ec       	ldi	r26, 0xC8	; 200
    174c:	b2 e4       	ldi	r27, 0x42	; 66
    174e:	8d ab       	std	Y+53, r24	; 0x35
    1750:	9e ab       	std	Y+54, r25	; 0x36
    1752:	af ab       	std	Y+55, r26	; 0x37
    1754:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1756:	6d a9       	ldd	r22, Y+53	; 0x35
    1758:	7e a9       	ldd	r23, Y+54	; 0x36
    175a:	8f a9       	ldd	r24, Y+55	; 0x37
    175c:	98 ad       	ldd	r25, Y+56	; 0x38
    175e:	20 e0       	ldi	r18, 0x00	; 0
    1760:	30 e0       	ldi	r19, 0x00	; 0
    1762:	4a ef       	ldi	r20, 0xFA	; 250
    1764:	54 e4       	ldi	r21, 0x44	; 68
    1766:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    176a:	dc 01       	movw	r26, r24
    176c:	cb 01       	movw	r24, r22
    176e:	89 ab       	std	Y+49, r24	; 0x31
    1770:	9a ab       	std	Y+50, r25	; 0x32
    1772:	ab ab       	std	Y+51, r26	; 0x33
    1774:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    1776:	69 a9       	ldd	r22, Y+49	; 0x31
    1778:	7a a9       	ldd	r23, Y+50	; 0x32
    177a:	8b a9       	ldd	r24, Y+51	; 0x33
    177c:	9c a9       	ldd	r25, Y+52	; 0x34
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	2c f4       	brge	.+10     	; 0x1798 <check_reenter_pass+0x346>
		__ticks = 1;
    178e:	81 e0       	ldi	r24, 0x01	; 1
    1790:	90 e0       	ldi	r25, 0x00	; 0
    1792:	98 ab       	std	Y+48, r25	; 0x30
    1794:	8f a7       	std	Y+47, r24	; 0x2f
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <check_reenter_pass+0x3c4>
	else if (__tmp > 65535)
    1798:	69 a9       	ldd	r22, Y+49	; 0x31
    179a:	7a a9       	ldd	r23, Y+50	; 0x32
    179c:	8b a9       	ldd	r24, Y+51	; 0x33
    179e:	9c a9       	ldd	r25, Y+52	; 0x34
    17a0:	20 e0       	ldi	r18, 0x00	; 0
    17a2:	3f ef       	ldi	r19, 0xFF	; 255
    17a4:	4f e7       	ldi	r20, 0x7F	; 127
    17a6:	57 e4       	ldi	r21, 0x47	; 71
    17a8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17ac:	18 16       	cp	r1, r24
    17ae:	4c f5       	brge	.+82     	; 0x1802 <check_reenter_pass+0x3b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17b0:	6d a9       	ldd	r22, Y+53	; 0x35
    17b2:	7e a9       	ldd	r23, Y+54	; 0x36
    17b4:	8f a9       	ldd	r24, Y+55	; 0x37
    17b6:	98 ad       	ldd	r25, Y+56	; 0x38
    17b8:	20 e0       	ldi	r18, 0x00	; 0
    17ba:	30 e0       	ldi	r19, 0x00	; 0
    17bc:	40 e2       	ldi	r20, 0x20	; 32
    17be:	51 e4       	ldi	r21, 0x41	; 65
    17c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17c4:	dc 01       	movw	r26, r24
    17c6:	cb 01       	movw	r24, r22
    17c8:	bc 01       	movw	r22, r24
    17ca:	cd 01       	movw	r24, r26
    17cc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    17d0:	dc 01       	movw	r26, r24
    17d2:	cb 01       	movw	r24, r22
    17d4:	98 ab       	std	Y+48, r25	; 0x30
    17d6:	8f a7       	std	Y+47, r24	; 0x2f
    17d8:	0f c0       	rjmp	.+30     	; 0x17f8 <check_reenter_pass+0x3a6>
    17da:	88 ec       	ldi	r24, 0xC8	; 200
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	9e a7       	std	Y+46, r25	; 0x2e
    17e0:	8d a7       	std	Y+45, r24	; 0x2d
    17e2:	8d a5       	ldd	r24, Y+45	; 0x2d
    17e4:	9e a5       	ldd	r25, Y+46	; 0x2e
    17e6:	01 97       	sbiw	r24, 0x01	; 1
    17e8:	f1 f7       	brne	.-4      	; 0x17e6 <check_reenter_pass+0x394>
    17ea:	9e a7       	std	Y+46, r25	; 0x2e
    17ec:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    17ee:	8f a5       	ldd	r24, Y+47	; 0x2f
    17f0:	98 a9       	ldd	r25, Y+48	; 0x30
    17f2:	01 97       	sbiw	r24, 0x01	; 1
    17f4:	98 ab       	std	Y+48, r25	; 0x30
    17f6:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    17f8:	8f a5       	ldd	r24, Y+47	; 0x2f
    17fa:	98 a9       	ldd	r25, Y+48	; 0x30
    17fc:	00 97       	sbiw	r24, 0x00	; 0
    17fe:	69 f7       	brne	.-38     	; 0x17da <check_reenter_pass+0x388>
    1800:	14 c0       	rjmp	.+40     	; 0x182a <check_reenter_pass+0x3d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1802:	69 a9       	ldd	r22, Y+49	; 0x31
    1804:	7a a9       	ldd	r23, Y+50	; 0x32
    1806:	8b a9       	ldd	r24, Y+51	; 0x33
    1808:	9c a9       	ldd	r25, Y+52	; 0x34
    180a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    180e:	dc 01       	movw	r26, r24
    1810:	cb 01       	movw	r24, r22
    1812:	98 ab       	std	Y+48, r25	; 0x30
    1814:	8f a7       	std	Y+47, r24	; 0x2f
    1816:	8f a5       	ldd	r24, Y+47	; 0x2f
    1818:	98 a9       	ldd	r25, Y+48	; 0x30
    181a:	9c a7       	std	Y+44, r25	; 0x2c
    181c:	8b a7       	std	Y+43, r24	; 0x2b
    181e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1820:	9c a5       	ldd	r25, Y+44	; 0x2c
    1822:	01 97       	sbiw	r24, 0x01	; 1
    1824:	f1 f7       	brne	.-4      	; 0x1822 <check_reenter_pass+0x3d0>
    1826:	9c a7       	std	Y+44, r25	; 0x2c
    1828:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(100);


	/****************check if the entered passwords are the same *************/
	check=1;
    182a:	81 e0       	ldi	r24, 0x01	; 1
    182c:	80 93 68 00 	sts	0x0068, r24

	for(int i=0;i<5;i++){
    1830:	fe 01       	movw	r30, r28
    1832:	eb 5a       	subi	r30, 0xAB	; 171
    1834:	ff 4f       	sbci	r31, 0xFF	; 255
    1836:	11 82       	std	Z+1, r1	; 0x01
    1838:	10 82       	st	Z, r1
    183a:	98 c0       	rjmp	.+304    	; 0x196c <check_reenter_pass+0x51a>

		if(value3[i]!=value1[i]){
    183c:	fe 01       	movw	r30, r28
    183e:	eb 5a       	subi	r30, 0xAB	; 171
    1840:	ff 4f       	sbci	r31, 0xFF	; 255
    1842:	20 81       	ld	r18, Z
    1844:	31 81       	ldd	r19, Z+1	; 0x01
    1846:	ce 01       	movw	r24, r28
    1848:	87 5a       	subi	r24, 0xA7	; 167
    184a:	9f 4f       	sbci	r25, 0xFF	; 255
    184c:	fc 01       	movw	r30, r24
    184e:	e2 0f       	add	r30, r18
    1850:	f3 1f       	adc	r31, r19
    1852:	20 81       	ld	r18, Z
    1854:	fe 01       	movw	r30, r28
    1856:	eb 5a       	subi	r30, 0xAB	; 171
    1858:	ff 4f       	sbci	r31, 0xFF	; 255
    185a:	80 81       	ld	r24, Z
    185c:	91 81       	ldd	r25, Z+1	; 0x01
    185e:	fc 01       	movw	r30, r24
    1860:	ec 57       	subi	r30, 0x7C	; 124
    1862:	ff 4f       	sbci	r31, 0xFF	; 255
    1864:	80 81       	ld	r24, Z
    1866:	28 17       	cp	r18, r24
    1868:	09 f4       	brne	.+2      	; 0x186c <check_reenter_pass+0x41a>
    186a:	74 c0       	rjmp	.+232    	; 0x1954 <check_reenter_pass+0x502>
			check=0;
    186c:	10 92 68 00 	sts	0x0068, r1
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	90 e0       	ldi	r25, 0x00	; 0
    1874:	a0 ea       	ldi	r26, 0xA0	; 160
    1876:	b1 e4       	ldi	r27, 0x41	; 65
    1878:	8f a3       	std	Y+39, r24	; 0x27
    187a:	98 a7       	std	Y+40, r25	; 0x28
    187c:	a9 a7       	std	Y+41, r26	; 0x29
    187e:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1880:	6f a1       	ldd	r22, Y+39	; 0x27
    1882:	78 a5       	ldd	r23, Y+40	; 0x28
    1884:	89 a5       	ldd	r24, Y+41	; 0x29
    1886:	9a a5       	ldd	r25, Y+42	; 0x2a
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	30 e0       	ldi	r19, 0x00	; 0
    188c:	4a ef       	ldi	r20, 0xFA	; 250
    188e:	54 e4       	ldi	r21, 0x44	; 68
    1890:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1894:	dc 01       	movw	r26, r24
    1896:	cb 01       	movw	r24, r22
    1898:	8b a3       	std	Y+35, r24	; 0x23
    189a:	9c a3       	std	Y+36, r25	; 0x24
    189c:	ad a3       	std	Y+37, r26	; 0x25
    189e:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    18a0:	6b a1       	ldd	r22, Y+35	; 0x23
    18a2:	7c a1       	ldd	r23, Y+36	; 0x24
    18a4:	8d a1       	ldd	r24, Y+37	; 0x25
    18a6:	9e a1       	ldd	r25, Y+38	; 0x26
    18a8:	20 e0       	ldi	r18, 0x00	; 0
    18aa:	30 e0       	ldi	r19, 0x00	; 0
    18ac:	40 e8       	ldi	r20, 0x80	; 128
    18ae:	5f e3       	ldi	r21, 0x3F	; 63
    18b0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18b4:	88 23       	and	r24, r24
    18b6:	2c f4       	brge	.+10     	; 0x18c2 <check_reenter_pass+0x470>
		__ticks = 1;
    18b8:	81 e0       	ldi	r24, 0x01	; 1
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	9a a3       	std	Y+34, r25	; 0x22
    18be:	89 a3       	std	Y+33, r24	; 0x21
    18c0:	3f c0       	rjmp	.+126    	; 0x1940 <check_reenter_pass+0x4ee>
	else if (__tmp > 65535)
    18c2:	6b a1       	ldd	r22, Y+35	; 0x23
    18c4:	7c a1       	ldd	r23, Y+36	; 0x24
    18c6:	8d a1       	ldd	r24, Y+37	; 0x25
    18c8:	9e a1       	ldd	r25, Y+38	; 0x26
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	3f ef       	ldi	r19, 0xFF	; 255
    18ce:	4f e7       	ldi	r20, 0x7F	; 127
    18d0:	57 e4       	ldi	r21, 0x47	; 71
    18d2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18d6:	18 16       	cp	r1, r24
    18d8:	4c f5       	brge	.+82     	; 0x192c <check_reenter_pass+0x4da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18da:	6f a1       	ldd	r22, Y+39	; 0x27
    18dc:	78 a5       	ldd	r23, Y+40	; 0x28
    18de:	89 a5       	ldd	r24, Y+41	; 0x29
    18e0:	9a a5       	ldd	r25, Y+42	; 0x2a
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	30 e0       	ldi	r19, 0x00	; 0
    18e6:	40 e2       	ldi	r20, 0x20	; 32
    18e8:	51 e4       	ldi	r21, 0x41	; 65
    18ea:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18ee:	dc 01       	movw	r26, r24
    18f0:	cb 01       	movw	r24, r22
    18f2:	bc 01       	movw	r22, r24
    18f4:	cd 01       	movw	r24, r26
    18f6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    18fa:	dc 01       	movw	r26, r24
    18fc:	cb 01       	movw	r24, r22
    18fe:	9a a3       	std	Y+34, r25	; 0x22
    1900:	89 a3       	std	Y+33, r24	; 0x21
    1902:	0f c0       	rjmp	.+30     	; 0x1922 <check_reenter_pass+0x4d0>
    1904:	88 ec       	ldi	r24, 0xC8	; 200
    1906:	90 e0       	ldi	r25, 0x00	; 0
    1908:	98 a3       	std	Y+32, r25	; 0x20
    190a:	8f 8f       	std	Y+31, r24	; 0x1f
    190c:	8f 8d       	ldd	r24, Y+31	; 0x1f
    190e:	98 a1       	ldd	r25, Y+32	; 0x20
    1910:	01 97       	sbiw	r24, 0x01	; 1
    1912:	f1 f7       	brne	.-4      	; 0x1910 <check_reenter_pass+0x4be>
    1914:	98 a3       	std	Y+32, r25	; 0x20
    1916:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1918:	89 a1       	ldd	r24, Y+33	; 0x21
    191a:	9a a1       	ldd	r25, Y+34	; 0x22
    191c:	01 97       	sbiw	r24, 0x01	; 1
    191e:	9a a3       	std	Y+34, r25	; 0x22
    1920:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1922:	89 a1       	ldd	r24, Y+33	; 0x21
    1924:	9a a1       	ldd	r25, Y+34	; 0x22
    1926:	00 97       	sbiw	r24, 0x00	; 0
    1928:	69 f7       	brne	.-38     	; 0x1904 <check_reenter_pass+0x4b2>
    192a:	14 c0       	rjmp	.+40     	; 0x1954 <check_reenter_pass+0x502>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    192c:	6b a1       	ldd	r22, Y+35	; 0x23
    192e:	7c a1       	ldd	r23, Y+36	; 0x24
    1930:	8d a1       	ldd	r24, Y+37	; 0x25
    1932:	9e a1       	ldd	r25, Y+38	; 0x26
    1934:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1938:	dc 01       	movw	r26, r24
    193a:	cb 01       	movw	r24, r22
    193c:	9a a3       	std	Y+34, r25	; 0x22
    193e:	89 a3       	std	Y+33, r24	; 0x21
    1940:	89 a1       	ldd	r24, Y+33	; 0x21
    1942:	9a a1       	ldd	r25, Y+34	; 0x22
    1944:	9e 8f       	std	Y+30, r25	; 0x1e
    1946:	8d 8f       	std	Y+29, r24	; 0x1d
    1948:	8d 8d       	ldd	r24, Y+29	; 0x1d
    194a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    194c:	01 97       	sbiw	r24, 0x01	; 1
    194e:	f1 f7       	brne	.-4      	; 0x194c <check_reenter_pass+0x4fa>
    1950:	9e 8f       	std	Y+30, r25	; 0x1e
    1952:	8d 8f       	std	Y+29, r24	; 0x1d


	/****************check if the entered passwords are the same *************/
	check=1;

	for(int i=0;i<5;i++){
    1954:	de 01       	movw	r26, r28
    1956:	ab 5a       	subi	r26, 0xAB	; 171
    1958:	bf 4f       	sbci	r27, 0xFF	; 255
    195a:	fe 01       	movw	r30, r28
    195c:	eb 5a       	subi	r30, 0xAB	; 171
    195e:	ff 4f       	sbci	r31, 0xFF	; 255
    1960:	80 81       	ld	r24, Z
    1962:	91 81       	ldd	r25, Z+1	; 0x01
    1964:	01 96       	adiw	r24, 0x01	; 1
    1966:	11 96       	adiw	r26, 0x01	; 1
    1968:	9c 93       	st	X, r25
    196a:	8e 93       	st	-X, r24
    196c:	fe 01       	movw	r30, r28
    196e:	eb 5a       	subi	r30, 0xAB	; 171
    1970:	ff 4f       	sbci	r31, 0xFF	; 255
    1972:	80 81       	ld	r24, Z
    1974:	91 81       	ldd	r25, Z+1	; 0x01
    1976:	85 30       	cpi	r24, 0x05	; 5
    1978:	91 05       	cpc	r25, r1
    197a:	0c f4       	brge	.+2      	; 0x197e <check_reenter_pass+0x52c>
    197c:	5f cf       	rjmp	.-322    	; 0x183c <check_reenter_pass+0x3ea>
    197e:	80 e0       	ldi	r24, 0x00	; 0
    1980:	90 e0       	ldi	r25, 0x00	; 0
    1982:	a8 e4       	ldi	r26, 0x48	; 72
    1984:	b2 e4       	ldi	r27, 0x42	; 66
    1986:	89 8f       	std	Y+25, r24	; 0x19
    1988:	9a 8f       	std	Y+26, r25	; 0x1a
    198a:	ab 8f       	std	Y+27, r26	; 0x1b
    198c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    198e:	69 8d       	ldd	r22, Y+25	; 0x19
    1990:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1992:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1994:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1996:	20 e0       	ldi	r18, 0x00	; 0
    1998:	30 e0       	ldi	r19, 0x00	; 0
    199a:	4a ef       	ldi	r20, 0xFA	; 250
    199c:	54 e4       	ldi	r21, 0x44	; 68
    199e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19a2:	dc 01       	movw	r26, r24
    19a4:	cb 01       	movw	r24, r22
    19a6:	8d 8b       	std	Y+21, r24	; 0x15
    19a8:	9e 8b       	std	Y+22, r25	; 0x16
    19aa:	af 8b       	std	Y+23, r26	; 0x17
    19ac:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    19ae:	6d 89       	ldd	r22, Y+21	; 0x15
    19b0:	7e 89       	ldd	r23, Y+22	; 0x16
    19b2:	8f 89       	ldd	r24, Y+23	; 0x17
    19b4:	98 8d       	ldd	r25, Y+24	; 0x18
    19b6:	20 e0       	ldi	r18, 0x00	; 0
    19b8:	30 e0       	ldi	r19, 0x00	; 0
    19ba:	40 e8       	ldi	r20, 0x80	; 128
    19bc:	5f e3       	ldi	r21, 0x3F	; 63
    19be:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19c2:	88 23       	and	r24, r24
    19c4:	2c f4       	brge	.+10     	; 0x19d0 <check_reenter_pass+0x57e>
		__ticks = 1;
    19c6:	81 e0       	ldi	r24, 0x01	; 1
    19c8:	90 e0       	ldi	r25, 0x00	; 0
    19ca:	9c 8b       	std	Y+20, r25	; 0x14
    19cc:	8b 8b       	std	Y+19, r24	; 0x13
    19ce:	3f c0       	rjmp	.+126    	; 0x1a4e <check_reenter_pass+0x5fc>
	else if (__tmp > 65535)
    19d0:	6d 89       	ldd	r22, Y+21	; 0x15
    19d2:	7e 89       	ldd	r23, Y+22	; 0x16
    19d4:	8f 89       	ldd	r24, Y+23	; 0x17
    19d6:	98 8d       	ldd	r25, Y+24	; 0x18
    19d8:	20 e0       	ldi	r18, 0x00	; 0
    19da:	3f ef       	ldi	r19, 0xFF	; 255
    19dc:	4f e7       	ldi	r20, 0x7F	; 127
    19de:	57 e4       	ldi	r21, 0x47	; 71
    19e0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19e4:	18 16       	cp	r1, r24
    19e6:	4c f5       	brge	.+82     	; 0x1a3a <check_reenter_pass+0x5e8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19e8:	69 8d       	ldd	r22, Y+25	; 0x19
    19ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    19ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    19ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    19f0:	20 e0       	ldi	r18, 0x00	; 0
    19f2:	30 e0       	ldi	r19, 0x00	; 0
    19f4:	40 e2       	ldi	r20, 0x20	; 32
    19f6:	51 e4       	ldi	r21, 0x41	; 65
    19f8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19fc:	dc 01       	movw	r26, r24
    19fe:	cb 01       	movw	r24, r22
    1a00:	bc 01       	movw	r22, r24
    1a02:	cd 01       	movw	r24, r26
    1a04:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a08:	dc 01       	movw	r26, r24
    1a0a:	cb 01       	movw	r24, r22
    1a0c:	9c 8b       	std	Y+20, r25	; 0x14
    1a0e:	8b 8b       	std	Y+19, r24	; 0x13
    1a10:	0f c0       	rjmp	.+30     	; 0x1a30 <check_reenter_pass+0x5de>
    1a12:	88 ec       	ldi	r24, 0xC8	; 200
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	9a 8b       	std	Y+18, r25	; 0x12
    1a18:	89 8b       	std	Y+17, r24	; 0x11
    1a1a:	89 89       	ldd	r24, Y+17	; 0x11
    1a1c:	9a 89       	ldd	r25, Y+18	; 0x12
    1a1e:	01 97       	sbiw	r24, 0x01	; 1
    1a20:	f1 f7       	brne	.-4      	; 0x1a1e <check_reenter_pass+0x5cc>
    1a22:	9a 8b       	std	Y+18, r25	; 0x12
    1a24:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a26:	8b 89       	ldd	r24, Y+19	; 0x13
    1a28:	9c 89       	ldd	r25, Y+20	; 0x14
    1a2a:	01 97       	sbiw	r24, 0x01	; 1
    1a2c:	9c 8b       	std	Y+20, r25	; 0x14
    1a2e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a30:	8b 89       	ldd	r24, Y+19	; 0x13
    1a32:	9c 89       	ldd	r25, Y+20	; 0x14
    1a34:	00 97       	sbiw	r24, 0x00	; 0
    1a36:	69 f7       	brne	.-38     	; 0x1a12 <check_reenter_pass+0x5c0>
    1a38:	14 c0       	rjmp	.+40     	; 0x1a62 <check_reenter_pass+0x610>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a3a:	6d 89       	ldd	r22, Y+21	; 0x15
    1a3c:	7e 89       	ldd	r23, Y+22	; 0x16
    1a3e:	8f 89       	ldd	r24, Y+23	; 0x17
    1a40:	98 8d       	ldd	r25, Y+24	; 0x18
    1a42:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a46:	dc 01       	movw	r26, r24
    1a48:	cb 01       	movw	r24, r22
    1a4a:	9c 8b       	std	Y+20, r25	; 0x14
    1a4c:	8b 8b       	std	Y+19, r24	; 0x13
    1a4e:	8b 89       	ldd	r24, Y+19	; 0x13
    1a50:	9c 89       	ldd	r25, Y+20	; 0x14
    1a52:	98 8b       	std	Y+16, r25	; 0x10
    1a54:	8f 87       	std	Y+15, r24	; 0x0f
    1a56:	8f 85       	ldd	r24, Y+15	; 0x0f
    1a58:	98 89       	ldd	r25, Y+16	; 0x10
    1a5a:	01 97       	sbiw	r24, 0x01	; 1
    1a5c:	f1 f7       	brne	.-4      	; 0x1a5a <check_reenter_pass+0x608>
    1a5e:	98 8b       	std	Y+16, r25	; 0x10
    1a60:	8f 87       	std	Y+15, r24	; 0x0f
		}

	}
	_delay_ms(50);
	/********** send the result of check process for HMI_ECU */
	UART_sendByte(check);
    1a62:	80 91 68 00 	lds	r24, 0x0068
    1a66:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_sendByte>
    1a6a:	80 e0       	ldi	r24, 0x00	; 0
    1a6c:	90 e0       	ldi	r25, 0x00	; 0
    1a6e:	a8 ec       	ldi	r26, 0xC8	; 200
    1a70:	b2 e4       	ldi	r27, 0x42	; 66
    1a72:	8b 87       	std	Y+11, r24	; 0x0b
    1a74:	9c 87       	std	Y+12, r25	; 0x0c
    1a76:	ad 87       	std	Y+13, r26	; 0x0d
    1a78:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a7a:	6b 85       	ldd	r22, Y+11	; 0x0b
    1a7c:	7c 85       	ldd	r23, Y+12	; 0x0c
    1a7e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1a80:	9e 85       	ldd	r25, Y+14	; 0x0e
    1a82:	20 e0       	ldi	r18, 0x00	; 0
    1a84:	30 e0       	ldi	r19, 0x00	; 0
    1a86:	4a ef       	ldi	r20, 0xFA	; 250
    1a88:	54 e4       	ldi	r21, 0x44	; 68
    1a8a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1a8e:	dc 01       	movw	r26, r24
    1a90:	cb 01       	movw	r24, r22
    1a92:	8f 83       	std	Y+7, r24	; 0x07
    1a94:	98 87       	std	Y+8, r25	; 0x08
    1a96:	a9 87       	std	Y+9, r26	; 0x09
    1a98:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1a9a:	6f 81       	ldd	r22, Y+7	; 0x07
    1a9c:	78 85       	ldd	r23, Y+8	; 0x08
    1a9e:	89 85       	ldd	r24, Y+9	; 0x09
    1aa0:	9a 85       	ldd	r25, Y+10	; 0x0a
    1aa2:	20 e0       	ldi	r18, 0x00	; 0
    1aa4:	30 e0       	ldi	r19, 0x00	; 0
    1aa6:	40 e8       	ldi	r20, 0x80	; 128
    1aa8:	5f e3       	ldi	r21, 0x3F	; 63
    1aaa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1aae:	88 23       	and	r24, r24
    1ab0:	2c f4       	brge	.+10     	; 0x1abc <check_reenter_pass+0x66a>
		__ticks = 1;
    1ab2:	81 e0       	ldi	r24, 0x01	; 1
    1ab4:	90 e0       	ldi	r25, 0x00	; 0
    1ab6:	9e 83       	std	Y+6, r25	; 0x06
    1ab8:	8d 83       	std	Y+5, r24	; 0x05
    1aba:	3f c0       	rjmp	.+126    	; 0x1b3a <check_reenter_pass+0x6e8>
	else if (__tmp > 65535)
    1abc:	6f 81       	ldd	r22, Y+7	; 0x07
    1abe:	78 85       	ldd	r23, Y+8	; 0x08
    1ac0:	89 85       	ldd	r24, Y+9	; 0x09
    1ac2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	3f ef       	ldi	r19, 0xFF	; 255
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	57 e4       	ldi	r21, 0x47	; 71
    1acc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	4c f5       	brge	.+82     	; 0x1b26 <check_reenter_pass+0x6d4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ad4:	6b 85       	ldd	r22, Y+11	; 0x0b
    1ad6:	7c 85       	ldd	r23, Y+12	; 0x0c
    1ad8:	8d 85       	ldd	r24, Y+13	; 0x0d
    1ada:	9e 85       	ldd	r25, Y+14	; 0x0e
    1adc:	20 e0       	ldi	r18, 0x00	; 0
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	40 e2       	ldi	r20, 0x20	; 32
    1ae2:	51 e4       	ldi	r21, 0x41	; 65
    1ae4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1ae8:	dc 01       	movw	r26, r24
    1aea:	cb 01       	movw	r24, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	cd 01       	movw	r24, r26
    1af0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1af4:	dc 01       	movw	r26, r24
    1af6:	cb 01       	movw	r24, r22
    1af8:	9e 83       	std	Y+6, r25	; 0x06
    1afa:	8d 83       	std	Y+5, r24	; 0x05
    1afc:	0f c0       	rjmp	.+30     	; 0x1b1c <check_reenter_pass+0x6ca>
    1afe:	88 ec       	ldi	r24, 0xC8	; 200
    1b00:	90 e0       	ldi	r25, 0x00	; 0
    1b02:	9c 83       	std	Y+4, r25	; 0x04
    1b04:	8b 83       	std	Y+3, r24	; 0x03
    1b06:	8b 81       	ldd	r24, Y+3	; 0x03
    1b08:	9c 81       	ldd	r25, Y+4	; 0x04
    1b0a:	01 97       	sbiw	r24, 0x01	; 1
    1b0c:	f1 f7       	brne	.-4      	; 0x1b0a <check_reenter_pass+0x6b8>
    1b0e:	9c 83       	std	Y+4, r25	; 0x04
    1b10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b12:	8d 81       	ldd	r24, Y+5	; 0x05
    1b14:	9e 81       	ldd	r25, Y+6	; 0x06
    1b16:	01 97       	sbiw	r24, 0x01	; 1
    1b18:	9e 83       	std	Y+6, r25	; 0x06
    1b1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1b1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1b20:	00 97       	sbiw	r24, 0x00	; 0
    1b22:	69 f7       	brne	.-38     	; 0x1afe <check_reenter_pass+0x6ac>
    1b24:	14 c0       	rjmp	.+40     	; 0x1b4e <check_reenter_pass+0x6fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b26:	6f 81       	ldd	r22, Y+7	; 0x07
    1b28:	78 85       	ldd	r23, Y+8	; 0x08
    1b2a:	89 85       	ldd	r24, Y+9	; 0x09
    1b2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1b2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1b32:	dc 01       	movw	r26, r24
    1b34:	cb 01       	movw	r24, r22
    1b36:	9e 83       	std	Y+6, r25	; 0x06
    1b38:	8d 83       	std	Y+5, r24	; 0x05
    1b3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1b3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1b3e:	9a 83       	std	Y+2, r25	; 0x02
    1b40:	89 83       	std	Y+1, r24	; 0x01
    1b42:	89 81       	ldd	r24, Y+1	; 0x01
    1b44:	9a 81       	ldd	r25, Y+2	; 0x02
    1b46:	01 97       	sbiw	r24, 0x01	; 1
    1b48:	f1 f7       	brne	.-4      	; 0x1b46 <check_reenter_pass+0x6f4>
    1b4a:	9a 83       	std	Y+2, r25	; 0x02
    1b4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(100);

}
    1b4e:	c3 5a       	subi	r28, 0xA3	; 163
    1b50:	df 4f       	sbci	r29, 0xFF	; 255
    1b52:	0f b6       	in	r0, 0x3f	; 63
    1b54:	f8 94       	cli
    1b56:	de bf       	out	0x3e, r29	; 62
    1b58:	0f be       	out	0x3f, r0	; 63
    1b5a:	cd bf       	out	0x3d, r28	; 61
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	08 95       	ret

00001b66 <open_Door>:


void open_Door(void){
    1b66:	df 93       	push	r29
    1b68:	cf 93       	push	r28
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62

	/****** To Turn ON Timer1 to rotate aand hold the DC Motor
	 * "Rotate_CW_15_Seconds" or "Stop_15_Seconds" or "Rotate_ACW_15_Seconds" ***************/

	/*********** DC_motor  "Rotate_Clock_Wise_15_Seconds" *************/
	DCMotor_Rotate(CW);
    1b6e:	81 e0       	ldi	r24, 0x01	; 1
    1b70:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DCMotor_Rotate>
	delay(15);
    1b74:	8f e0       	ldi	r24, 0x0F	; 15
    1b76:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
	/*********** DC_motor  "stop_15_Seconds" *************/
	DCMotor_Rotate(stop);
    1b7a:	80 e0       	ldi	r24, 0x00	; 0
    1b7c:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DCMotor_Rotate>
	delay(5);
    1b80:	85 e0       	ldi	r24, 0x05	; 5
    1b82:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
	/*********** DC_motor  "Rotate_Anti_Clock_Wise_15_Seconds" *************/
	DCMotor_Rotate(ACW);
    1b86:	82 e0       	ldi	r24, 0x02	; 2
    1b88:	0e 94 07 0f 	call	0x1e0e	; 0x1e0e <DCMotor_Rotate>
	delay(15);
    1b8c:	8f e0       	ldi	r24, 0x0F	; 15
    1b8e:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
	/************* De_intialization for DC Motor *************/
	DCMotor_deInit();
    1b92:	0e 94 48 0f 	call	0x1e90	; 0x1e90 <DCMotor_deInit>
	/*************** call the main_option function *************/
	main_option();
    1b96:	0e 94 a0 09 	call	0x1340	; 0x1340 <main_option>

}
    1b9a:	cf 91       	pop	r28
    1b9c:	df 91       	pop	r29
    1b9e:	08 95       	ret

00001ba0 <change_password>:

void change_password(void){
    1ba0:	df 93       	push	r29
    1ba2:	cf 93       	push	r28
    1ba4:	cd b7       	in	r28, 0x3d	; 61
    1ba6:	de b7       	in	r29, 0x3e	; 62
	/************** call the creat_pass function ***************/
	creat_pass();
    1ba8:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <creat_pass>
}
    1bac:	cf 91       	pop	r28
    1bae:	df 91       	pop	r29
    1bb0:	08 95       	ret

00001bb2 <buzzer_error>:
void buzzer_error(void){
    1bb2:	df 93       	push	r29
    1bb4:	cf 93       	push	r28
    1bb6:	00 d0       	rcall	.+0      	; 0x1bb8 <buzzer_error+0x6>
    1bb8:	cd b7       	in	r28, 0x3d	; 61
    1bba:	de b7       	in	r29, 0x3e	; 62
	/****************** Turn ON Buzzer ****************/
	Buzzer_on();
    1bbc:	0e 94 4d 11 	call	0x229a	; 0x229a <Buzzer_on>
	//delay 62 seconds
	for(int i=0;i<11;i++){
    1bc0:	1a 82       	std	Y+2, r1	; 0x02
    1bc2:	19 82       	std	Y+1, r1	; 0x01
    1bc4:	08 c0       	rjmp	.+16     	; 0x1bd6 <buzzer_error+0x24>
		delay(1);
    1bc6:	81 e0       	ldi	r24, 0x01	; 1
    1bc8:	0e 94 af 05 	call	0xb5e	; 0xb5e <delay>
}
void buzzer_error(void){
	/****************** Turn ON Buzzer ****************/
	Buzzer_on();
	//delay 62 seconds
	for(int i=0;i<11;i++){
    1bcc:	89 81       	ldd	r24, Y+1	; 0x01
    1bce:	9a 81       	ldd	r25, Y+2	; 0x02
    1bd0:	01 96       	adiw	r24, 0x01	; 1
    1bd2:	9a 83       	std	Y+2, r25	; 0x02
    1bd4:	89 83       	std	Y+1, r24	; 0x01
    1bd6:	89 81       	ldd	r24, Y+1	; 0x01
    1bd8:	9a 81       	ldd	r25, Y+2	; 0x02
    1bda:	8b 30       	cpi	r24, 0x0B	; 11
    1bdc:	91 05       	cpc	r25, r1
    1bde:	9c f3       	brlt	.-26     	; 0x1bc6 <buzzer_error+0x14>
		delay(1);
	}
	/*********** Turn OFF Buzzer *****************/
	Buzzer_off();
    1be0:	0e 94 62 11 	call	0x22c4	; 0x22c4 <Buzzer_off>
	/********* re-call the main_option function */
	main_option();
    1be4:	0e 94 a0 09 	call	0x1340	; 0x1340 <main_option>
}
    1be8:	0f 90       	pop	r0
    1bea:	0f 90       	pop	r0
    1bec:	cf 91       	pop	r28
    1bee:	df 91       	pop	r29
    1bf0:	08 95       	ret

00001bf2 <main>:

int main(void)
{
    1bf2:	df 93       	push	r29
    1bf4:	cf 93       	push	r28
    1bf6:	cd b7       	in	r28, 0x3d	; 61
    1bf8:	de b7       	in	r29, 0x3e	; 62
    1bfa:	6e 97       	sbiw	r28, 0x1e	; 30
    1bfc:	0f b6       	in	r0, 0x3f	; 63
    1bfe:	f8 94       	cli
    1c00:	de bf       	out	0x3e, r29	; 62
    1c02:	0f be       	out	0x3f, r0	; 63
    1c04:	cd bf       	out	0x3d, r28	; 61

	Buzzer_init(); //initialization Buzzer
    1c06:	0e 94 2a 11 	call	0x2254	; 0x2254 <Buzzer_init>
	DCMotor_Init();//initialization DC_MOTOR
    1c0a:	0e 94 e4 0e 	call	0x1dc8	; 0x1dc8 <DCMotor_Init>

	SREG |=(1<<7);//SET the Global interrupt
    1c0e:	af e5       	ldi	r26, 0x5F	; 95
    1c10:	b0 e0       	ldi	r27, 0x00	; 0
    1c12:	ef e5       	ldi	r30, 0x5F	; 95
    1c14:	f0 e0       	ldi	r31, 0x00	; 0
    1c16:	80 81       	ld	r24, Z
    1c18:	80 68       	ori	r24, 0x80	; 128
    1c1a:	8c 93       	st	X, r24
	Timer1_setCallBack(Timer); /* Setup CallBAck Function For Timer */
    1c1c:	83 ea       	ldi	r24, 0xA3	; 163
    1c1e:	95 e0       	ldi	r25, 0x05	; 5
    1c20:	0e 94 be 15 	call	0x2b7c	; 0x2b7c <Timer1_setCallBack>
	UART_configType  configurations ={eight_bits,disable,one_bit,9600};//set the value of configuration
    1c24:	ce 01       	movw	r24, r28
    1c26:	41 96       	adiw	r24, 0x11	; 17
    1c28:	99 8f       	std	Y+25, r25	; 0x19
    1c2a:	88 8f       	std	Y+24, r24	; 0x18
    1c2c:	e0 e7       	ldi	r30, 0x70	; 112
    1c2e:	f0 e0       	ldi	r31, 0x00	; 0
    1c30:	fb 8f       	std	Y+27, r31	; 0x1b
    1c32:	ea 8f       	std	Y+26, r30	; 0x1a
    1c34:	f7 e0       	ldi	r31, 0x07	; 7
    1c36:	fc 8f       	std	Y+28, r31	; 0x1c
    1c38:	ea 8d       	ldd	r30, Y+26	; 0x1a
    1c3a:	fb 8d       	ldd	r31, Y+27	; 0x1b
    1c3c:	00 80       	ld	r0, Z
    1c3e:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1c40:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1c42:	01 96       	adiw	r24, 0x01	; 1
    1c44:	9b 8f       	std	Y+27, r25	; 0x1b
    1c46:	8a 8f       	std	Y+26, r24	; 0x1a
    1c48:	e8 8d       	ldd	r30, Y+24	; 0x18
    1c4a:	f9 8d       	ldd	r31, Y+25	; 0x19
    1c4c:	00 82       	st	Z, r0
    1c4e:	88 8d       	ldd	r24, Y+24	; 0x18
    1c50:	99 8d       	ldd	r25, Y+25	; 0x19
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	99 8f       	std	Y+25, r25	; 0x19
    1c56:	88 8f       	std	Y+24, r24	; 0x18
    1c58:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1c5a:	91 50       	subi	r25, 0x01	; 1
    1c5c:	9c 8f       	std	Y+28, r25	; 0x1c
    1c5e:	ec 8d       	ldd	r30, Y+28	; 0x1c
    1c60:	ee 23       	and	r30, r30
    1c62:	51 f7       	brne	.-44     	; 0x1c38 <main+0x46>
	UART_init(&configurations);//initialization the UART
    1c64:	ce 01       	movw	r24, r28
    1c66:	41 96       	adiw	r24, 0x11	; 17
    1c68:	0e 94 4d 16 	call	0x2c9a	; 0x2c9a <UART_init>
    1c6c:	80 e0       	ldi	r24, 0x00	; 0
    1c6e:	90 e0       	ldi	r25, 0x00	; 0
    1c70:	a8 e4       	ldi	r26, 0x48	; 72
    1c72:	b2 e4       	ldi	r27, 0x42	; 66
    1c74:	8b 87       	std	Y+11, r24	; 0x0b
    1c76:	9c 87       	std	Y+12, r25	; 0x0c
    1c78:	ad 87       	std	Y+13, r26	; 0x0d
    1c7a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1c7c:	6b 85       	ldd	r22, Y+11	; 0x0b
    1c7e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1c80:	8d 85       	ldd	r24, Y+13	; 0x0d
    1c82:	9e 85       	ldd	r25, Y+14	; 0x0e
    1c84:	20 e0       	ldi	r18, 0x00	; 0
    1c86:	30 e0       	ldi	r19, 0x00	; 0
    1c88:	4a ef       	ldi	r20, 0xFA	; 250
    1c8a:	54 e4       	ldi	r21, 0x44	; 68
    1c8c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1c90:	dc 01       	movw	r26, r24
    1c92:	cb 01       	movw	r24, r22
    1c94:	8f 83       	std	Y+7, r24	; 0x07
    1c96:	98 87       	std	Y+8, r25	; 0x08
    1c98:	a9 87       	std	Y+9, r26	; 0x09
    1c9a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1c9c:	6f 81       	ldd	r22, Y+7	; 0x07
    1c9e:	78 85       	ldd	r23, Y+8	; 0x08
    1ca0:	89 85       	ldd	r24, Y+9	; 0x09
    1ca2:	9a 85       	ldd	r25, Y+10	; 0x0a
    1ca4:	20 e0       	ldi	r18, 0x00	; 0
    1ca6:	30 e0       	ldi	r19, 0x00	; 0
    1ca8:	40 e8       	ldi	r20, 0x80	; 128
    1caa:	5f e3       	ldi	r21, 0x3F	; 63
    1cac:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1cb0:	88 23       	and	r24, r24
    1cb2:	2c f4       	brge	.+10     	; 0x1cbe <main+0xcc>
		__ticks = 1;
    1cb4:	81 e0       	ldi	r24, 0x01	; 1
    1cb6:	90 e0       	ldi	r25, 0x00	; 0
    1cb8:	9e 83       	std	Y+6, r25	; 0x06
    1cba:	8d 83       	std	Y+5, r24	; 0x05
    1cbc:	3f c0       	rjmp	.+126    	; 0x1d3c <main+0x14a>
	else if (__tmp > 65535)
    1cbe:	6f 81       	ldd	r22, Y+7	; 0x07
    1cc0:	78 85       	ldd	r23, Y+8	; 0x08
    1cc2:	89 85       	ldd	r24, Y+9	; 0x09
    1cc4:	9a 85       	ldd	r25, Y+10	; 0x0a
    1cc6:	20 e0       	ldi	r18, 0x00	; 0
    1cc8:	3f ef       	ldi	r19, 0xFF	; 255
    1cca:	4f e7       	ldi	r20, 0x7F	; 127
    1ccc:	57 e4       	ldi	r21, 0x47	; 71
    1cce:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1cd2:	18 16       	cp	r1, r24
    1cd4:	4c f5       	brge	.+82     	; 0x1d28 <main+0x136>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1cd6:	6b 85       	ldd	r22, Y+11	; 0x0b
    1cd8:	7c 85       	ldd	r23, Y+12	; 0x0c
    1cda:	8d 85       	ldd	r24, Y+13	; 0x0d
    1cdc:	9e 85       	ldd	r25, Y+14	; 0x0e
    1cde:	20 e0       	ldi	r18, 0x00	; 0
    1ce0:	30 e0       	ldi	r19, 0x00	; 0
    1ce2:	40 e2       	ldi	r20, 0x20	; 32
    1ce4:	51 e4       	ldi	r21, 0x41	; 65
    1ce6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1cea:	dc 01       	movw	r26, r24
    1cec:	cb 01       	movw	r24, r22
    1cee:	bc 01       	movw	r22, r24
    1cf0:	cd 01       	movw	r24, r26
    1cf2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1cf6:	dc 01       	movw	r26, r24
    1cf8:	cb 01       	movw	r24, r22
    1cfa:	9e 83       	std	Y+6, r25	; 0x06
    1cfc:	8d 83       	std	Y+5, r24	; 0x05
    1cfe:	0f c0       	rjmp	.+30     	; 0x1d1e <main+0x12c>
    1d00:	88 ec       	ldi	r24, 0xC8	; 200
    1d02:	90 e0       	ldi	r25, 0x00	; 0
    1d04:	9c 83       	std	Y+4, r25	; 0x04
    1d06:	8b 83       	std	Y+3, r24	; 0x03
    1d08:	8b 81       	ldd	r24, Y+3	; 0x03
    1d0a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d0c:	01 97       	sbiw	r24, 0x01	; 1
    1d0e:	f1 f7       	brne	.-4      	; 0x1d0c <main+0x11a>
    1d10:	9c 83       	std	Y+4, r25	; 0x04
    1d12:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1d14:	8d 81       	ldd	r24, Y+5	; 0x05
    1d16:	9e 81       	ldd	r25, Y+6	; 0x06
    1d18:	01 97       	sbiw	r24, 0x01	; 1
    1d1a:	9e 83       	std	Y+6, r25	; 0x06
    1d1c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1d1e:	8d 81       	ldd	r24, Y+5	; 0x05
    1d20:	9e 81       	ldd	r25, Y+6	; 0x06
    1d22:	00 97       	sbiw	r24, 0x00	; 0
    1d24:	69 f7       	brne	.-38     	; 0x1d00 <main+0x10e>
    1d26:	14 c0       	rjmp	.+40     	; 0x1d50 <main+0x15e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1d28:	6f 81       	ldd	r22, Y+7	; 0x07
    1d2a:	78 85       	ldd	r23, Y+8	; 0x08
    1d2c:	89 85       	ldd	r24, Y+9	; 0x09
    1d2e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1d30:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1d34:	dc 01       	movw	r26, r24
    1d36:	cb 01       	movw	r24, r22
    1d38:	9e 83       	std	Y+6, r25	; 0x06
    1d3a:	8d 83       	std	Y+5, r24	; 0x05
    1d3c:	8d 81       	ldd	r24, Y+5	; 0x05
    1d3e:	9e 81       	ldd	r25, Y+6	; 0x06
    1d40:	9a 83       	std	Y+2, r25	; 0x02
    1d42:	89 83       	std	Y+1, r24	; 0x01
    1d44:	89 81       	ldd	r24, Y+1	; 0x01
    1d46:	9a 81       	ldd	r25, Y+2	; 0x02
    1d48:	01 97       	sbiw	r24, 0x01	; 1
    1d4a:	f1 f7       	brne	.-4      	; 0x1d48 <main+0x156>
    1d4c:	9a 83       	std	Y+2, r25	; 0x02
    1d4e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(50);
	UART_sendByte(MC2_Ready); /* Send to 1st MCU That MCU2 is Ready To Receive */
    1d50:	80 e2       	ldi	r24, 0x20	; 32
    1d52:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_sendByte>

	while(1)
	{

		int required=UART_recieveByte();//receive the required operation from HMI_ECU
    1d56:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
    1d5a:	88 2f       	mov	r24, r24
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	98 8b       	std	Y+16, r25	; 0x10
    1d60:	8f 87       	std	Y+15, r24	; 0x0f

		switch (required){
    1d62:	8f 85       	ldd	r24, Y+15	; 0x0f
    1d64:	98 89       	ldd	r25, Y+16	; 0x10
    1d66:	9e 8f       	std	Y+30, r25	; 0x1e
    1d68:	8d 8f       	std	Y+29, r24	; 0x1d
    1d6a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d6c:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d6e:	e3 30       	cpi	r30, 0x03	; 3
    1d70:	f1 05       	cpc	r31, r1
    1d72:	09 f1       	breq	.+66     	; 0x1db6 <main+0x1c4>
    1d74:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d76:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d78:	84 30       	cpi	r24, 0x04	; 4
    1d7a:	91 05       	cpc	r25, r1
    1d7c:	5c f4       	brge	.+22     	; 0x1d94 <main+0x1a2>
    1d7e:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d80:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d82:	e1 30       	cpi	r30, 0x01	; 1
    1d84:	f1 05       	cpc	r31, r1
    1d86:	89 f0       	breq	.+34     	; 0x1daa <main+0x1b8>
    1d88:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1d8a:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1d8c:	82 30       	cpi	r24, 0x02	; 2
    1d8e:	91 05       	cpc	r25, r1
    1d90:	79 f0       	breq	.+30     	; 0x1db0 <main+0x1be>
    1d92:	e1 cf       	rjmp	.-62     	; 0x1d56 <main+0x164>
    1d94:	ed 8d       	ldd	r30, Y+29	; 0x1d
    1d96:	fe 8d       	ldd	r31, Y+30	; 0x1e
    1d98:	e4 30       	cpi	r30, 0x04	; 4
    1d9a:	f1 05       	cpc	r31, r1
    1d9c:	79 f0       	breq	.+30     	; 0x1dbc <main+0x1ca>
    1d9e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1da0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1da2:	86 30       	cpi	r24, 0x06	; 6
    1da4:	91 05       	cpc	r25, r1
    1da6:	69 f0       	breq	.+26     	; 0x1dc2 <main+0x1d0>
    1da8:	d6 cf       	rjmp	.-84     	; 0x1d56 <main+0x164>
		case creat_password : creat_pass();
    1daa:	0e 94 f0 05 	call	0xbe0	; 0xbe0 <creat_pass>
    1dae:	d3 cf       	rjmp	.-90     	; 0x1d56 <main+0x164>
		break;
		case required_operation : main_option();
    1db0:	0e 94 a0 09 	call	0x1340	; 0x1340 <main_option>
    1db4:	d0 cf       	rjmp	.-96     	; 0x1d56 <main+0x164>
		break;
		case check_reentered_pass : check_reenter_pass();
    1db6:	0e 94 29 0a 	call	0x1452	; 0x1452 <check_reenter_pass>
    1dba:	cd cf       	rjmp	.-102    	; 0x1d56 <main+0x164>
		break;
		case open_dooor: open_Door();
    1dbc:	0e 94 b3 0d 	call	0x1b66	; 0x1b66 <open_Door>
    1dc0:	ca cf       	rjmp	.-108    	; 0x1d56 <main+0x164>
		break;
		case ERROR: buzzer_error();
    1dc2:	0e 94 d9 0d 	call	0x1bb2	; 0x1bb2 <buzzer_error>
    1dc6:	c7 cf       	rjmp	.-114    	; 0x1d56 <main+0x164>

00001dc8 <DCMotor_Init>:
#include"gpio.h"



/************* Initialization The DC_motor Pins ********************/
void DCMotor_Init(void){
    1dc8:	df 93       	push	r29
    1dca:	cf 93       	push	r28
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62

	DDRA |= 0x70;
    1dd0:	aa e3       	ldi	r26, 0x3A	; 58
    1dd2:	b0 e0       	ldi	r27, 0x00	; 0
    1dd4:	ea e3       	ldi	r30, 0x3A	; 58
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 81       	ld	r24, Z
    1dda:	80 67       	ori	r24, 0x70	; 112
    1ddc:	8c 93       	st	X, r24
	/* Motor is stop at the beginning */
	PORTA &=~(1<<PA4);
    1dde:	ab e3       	ldi	r26, 0x3B	; 59
    1de0:	b0 e0       	ldi	r27, 0x00	; 0
    1de2:	eb e3       	ldi	r30, 0x3B	; 59
    1de4:	f0 e0       	ldi	r31, 0x00	; 0
    1de6:	80 81       	ld	r24, Z
    1de8:	8f 7e       	andi	r24, 0xEF	; 239
    1dea:	8c 93       	st	X, r24
	PORTA &=~(1<<PA5);
    1dec:	ab e3       	ldi	r26, 0x3B	; 59
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	eb e3       	ldi	r30, 0x3B	; 59
    1df2:	f0 e0       	ldi	r31, 0x00	; 0
    1df4:	80 81       	ld	r24, Z
    1df6:	8f 7d       	andi	r24, 0xDF	; 223
    1df8:	8c 93       	st	X, r24
	PORTA |=(1<<PA6);
    1dfa:	ab e3       	ldi	r26, 0x3B	; 59
    1dfc:	b0 e0       	ldi	r27, 0x00	; 0
    1dfe:	eb e3       	ldi	r30, 0x3B	; 59
    1e00:	f0 e0       	ldi	r31, 0x00	; 0
    1e02:	80 81       	ld	r24, Z
    1e04:	80 64       	ori	r24, 0x40	; 64
    1e06:	8c 93       	st	X, r24
}
    1e08:	cf 91       	pop	r28
    1e0a:	df 91       	pop	r29
    1e0c:	08 95       	ret

00001e0e <DCMotor_Rotate>:
/************ set the wanted operations of DC-Motor *********************/
void DCMotor_Rotate(uint8 state){
    1e0e:	df 93       	push	r29
    1e10:	cf 93       	push	r28
    1e12:	00 d0       	rcall	.+0      	; 0x1e14 <DCMotor_Rotate+0x6>
    1e14:	0f 92       	push	r0
    1e16:	cd b7       	in	r28, 0x3d	; 61
    1e18:	de b7       	in	r29, 0x3e	; 62
    1e1a:	89 83       	std	Y+1, r24	; 0x01

	switch(state)
    1e1c:	89 81       	ldd	r24, Y+1	; 0x01
    1e1e:	28 2f       	mov	r18, r24
    1e20:	30 e0       	ldi	r19, 0x00	; 0
    1e22:	3b 83       	std	Y+3, r19	; 0x03
    1e24:	2a 83       	std	Y+2, r18	; 0x02
    1e26:	8a 81       	ldd	r24, Y+2	; 0x02
    1e28:	9b 81       	ldd	r25, Y+3	; 0x03
    1e2a:	81 30       	cpi	r24, 0x01	; 1
    1e2c:	91 05       	cpc	r25, r1
    1e2e:	51 f0       	breq	.+20     	; 0x1e44 <DCMotor_Rotate+0x36>
    1e30:	2a 81       	ldd	r18, Y+2	; 0x02
    1e32:	3b 81       	ldd	r19, Y+3	; 0x03
    1e34:	22 30       	cpi	r18, 0x02	; 2
    1e36:	31 05       	cpc	r19, r1
    1e38:	81 f0       	breq	.+32     	; 0x1e5a <DCMotor_Rotate+0x4c>
    1e3a:	8a 81       	ldd	r24, Y+2	; 0x02
    1e3c:	9b 81       	ldd	r25, Y+3	; 0x03
    1e3e:	00 97       	sbiw	r24, 0x00	; 0
    1e40:	b9 f0       	breq	.+46     	; 0x1e70 <DCMotor_Rotate+0x62>
    1e42:	20 c0       	rjmp	.+64     	; 0x1e84 <DCMotor_Rotate+0x76>
	{

	case CW://Turn_ON the DC_motor with clock wise rotation
		GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_LOW);
    1e44:	80 e0       	ldi	r24, 0x00	; 0
    1e46:	64 e0       	ldi	r22, 0x04	; 4
    1e48:	40 e0       	ldi	r20, 0x00	; 0
    1e4a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID,PIN5_ID, LOGIC_HIGH);
    1e4e:	80 e0       	ldi	r24, 0x00	; 0
    1e50:	65 e0       	ldi	r22, 0x05	; 5
    1e52:	41 e0       	ldi	r20, 0x01	; 1
    1e54:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
    1e58:	15 c0       	rjmp	.+42     	; 0x1e84 <DCMotor_Rotate+0x76>
		break;
	case ACW://Turn_ON the DC_motor with clock  Anti wise rotation
		GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_HIGH);
    1e5a:	80 e0       	ldi	r24, 0x00	; 0
    1e5c:	64 e0       	ldi	r22, 0x04	; 4
    1e5e:	41 e0       	ldi	r20, 0x01	; 1
    1e60:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW);
    1e64:	80 e0       	ldi	r24, 0x00	; 0
    1e66:	65 e0       	ldi	r22, 0x05	; 5
    1e68:	40 e0       	ldi	r20, 0x00	; 0
    1e6a:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
    1e6e:	0a c0       	rjmp	.+20     	; 0x1e84 <DCMotor_Rotate+0x76>
		break;
	case stop://Turn_OFF DC-Motor
		GPIO_writePin(PORTA_ID, PIN4_ID, LOGIC_LOW);
    1e70:	80 e0       	ldi	r24, 0x00	; 0
    1e72:	64 e0       	ldi	r22, 0x04	; 4
    1e74:	40 e0       	ldi	r20, 0x00	; 0
    1e76:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
		GPIO_writePin(PORTA_ID, PIN5_ID, LOGIC_LOW);
    1e7a:	80 e0       	ldi	r24, 0x00	; 0
    1e7c:	65 e0       	ldi	r22, 0x05	; 5
    1e7e:	40 e0       	ldi	r20, 0x00	; 0
    1e80:	0e 94 62 12 	call	0x24c4	; 0x24c4 <GPIO_writePin>
		break;
	}

}
    1e84:	0f 90       	pop	r0
    1e86:	0f 90       	pop	r0
    1e88:	0f 90       	pop	r0
    1e8a:	cf 91       	pop	r28
    1e8c:	df 91       	pop	r29
    1e8e:	08 95       	ret

00001e90 <DCMotor_deInit>:
/************* DE_Initialization DC_Motor *************/
void DCMotor_deInit(void){
    1e90:	df 93       	push	r29
    1e92:	cf 93       	push	r28
    1e94:	cd b7       	in	r28, 0x3d	; 61
    1e96:	de b7       	in	r29, 0x3e	; 62
	PORTA &=~(1<<PA4);
    1e98:	ab e3       	ldi	r26, 0x3B	; 59
    1e9a:	b0 e0       	ldi	r27, 0x00	; 0
    1e9c:	eb e3       	ldi	r30, 0x3B	; 59
    1e9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ea0:	80 81       	ld	r24, Z
    1ea2:	8f 7e       	andi	r24, 0xEF	; 239
    1ea4:	8c 93       	st	X, r24
	PORTA &=~(1<<PA5);
    1ea6:	ab e3       	ldi	r26, 0x3B	; 59
    1ea8:	b0 e0       	ldi	r27, 0x00	; 0
    1eaa:	eb e3       	ldi	r30, 0x3B	; 59
    1eac:	f0 e0       	ldi	r31, 0x00	; 0
    1eae:	80 81       	ld	r24, Z
    1eb0:	8f 7d       	andi	r24, 0xDF	; 223
    1eb2:	8c 93       	st	X, r24

}
    1eb4:	cf 91       	pop	r28
    1eb6:	df 91       	pop	r29
    1eb8:	08 95       	ret

00001eba <EEPROM_writeArray>:
#include "external_eeprom.h"
#include "twi.h"
#include"util/delay.h"

uint8 EEPROM_writeArray(uint16 u16addr, uint8 *u8data ,uint8 array_size)
{
    1eba:	df 93       	push	r29
    1ebc:	cf 93       	push	r28
    1ebe:	cd b7       	in	r28, 0x3d	; 61
    1ec0:	de b7       	in	r29, 0x3e	; 62
    1ec2:	66 97       	sbiw	r28, 0x16	; 22
    1ec4:	0f b6       	in	r0, 0x3f	; 63
    1ec6:	f8 94       	cli
    1ec8:	de bf       	out	0x3e, r29	; 62
    1eca:	0f be       	out	0x3f, r0	; 63
    1ecc:	cd bf       	out	0x3d, r28	; 61
    1ece:	9a 8b       	std	Y+18, r25	; 0x12
    1ed0:	89 8b       	std	Y+17, r24	; 0x11
    1ed2:	7c 8b       	std	Y+20, r23	; 0x14
    1ed4:	6b 8b       	std	Y+19, r22	; 0x13
    1ed6:	4d 8b       	std	Y+21, r20	; 0x15
	/* Send the Start Bit */
    TWI_start();
    1ed8:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    1edc:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    1ee0:	88 30       	cpi	r24, 0x08	; 8
    1ee2:	11 f0       	breq	.+4      	; 0x1ee8 <EEPROM_writeArray+0x2e>
        return ERROR;
    1ee4:	1e 8a       	std	Y+22, r1	; 0x16
    1ee6:	b2 c0       	rjmp	.+356    	; 0x204c <EEPROM_writeArray+0x192>


    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)(0xA0 | ((u16addr & 0x0700)>>7)));
    1ee8:	89 89       	ldd	r24, Y+17	; 0x11
    1eea:	9a 89       	ldd	r25, Y+18	; 0x12
    1eec:	80 70       	andi	r24, 0x00	; 0
    1eee:	97 70       	andi	r25, 0x07	; 7
    1ef0:	88 0f       	add	r24, r24
    1ef2:	89 2f       	mov	r24, r25
    1ef4:	88 1f       	adc	r24, r24
    1ef6:	99 0b       	sbc	r25, r25
    1ef8:	91 95       	neg	r25
    1efa:	80 6a       	ori	r24, 0xA0	; 160
    1efc:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    1f00:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    1f04:	88 31       	cpi	r24, 0x18	; 24
    1f06:	11 f0       	breq	.+4      	; 0x1f0c <EEPROM_writeArray+0x52>
        return ERROR;
    1f08:	1e 8a       	std	Y+22, r1	; 0x16
    1f0a:	a0 c0       	rjmp	.+320    	; 0x204c <EEPROM_writeArray+0x192>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    1f0c:	89 89       	ldd	r24, Y+17	; 0x11
    1f0e:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f12:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    1f16:	88 32       	cpi	r24, 0x28	; 40
    1f18:	11 f0       	breq	.+4      	; 0x1f1e <EEPROM_writeArray+0x64>
        return ERROR;
    1f1a:	1e 8a       	std	Y+22, r1	; 0x16
    1f1c:	97 c0       	rjmp	.+302    	; 0x204c <EEPROM_writeArray+0x192>
    for ( int i=0 ; i<array_size ; i++ ) {
    1f1e:	18 8a       	std	Y+16, r1	; 0x10
    1f20:	1f 86       	std	Y+15, r1	; 0x0f
    1f22:	87 c0       	rjmp	.+270    	; 0x2032 <EEPROM_writeArray+0x178>
    /* write byte to eeprom */
    TWI_writeByte(*u8data);
    1f24:	eb 89       	ldd	r30, Y+19	; 0x13
    1f26:	fc 89       	ldd	r31, Y+20	; 0x14
    1f28:	80 81       	ld	r24, Z
    1f2a:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    1f2e:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    1f32:	88 32       	cpi	r24, 0x28	; 40
    1f34:	11 f0       	breq	.+4      	; 0x1f3a <EEPROM_writeArray+0x80>
        return ERROR;
    1f36:	1e 8a       	std	Y+22, r1	; 0x16
    1f38:	89 c0       	rjmp	.+274    	; 0x204c <EEPROM_writeArray+0x192>
    u8data++;
    1f3a:	8b 89       	ldd	r24, Y+19	; 0x13
    1f3c:	9c 89       	ldd	r25, Y+20	; 0x14
    1f3e:	01 96       	adiw	r24, 0x01	; 1
    1f40:	9c 8b       	std	Y+20, r25	; 0x14
    1f42:	8b 8b       	std	Y+19, r24	; 0x13
    1f44:	80 e0       	ldi	r24, 0x00	; 0
    1f46:	90 e0       	ldi	r25, 0x00	; 0
    1f48:	a0 e2       	ldi	r26, 0x20	; 32
    1f4a:	b1 e4       	ldi	r27, 0x41	; 65
    1f4c:	8b 87       	std	Y+11, r24	; 0x0b
    1f4e:	9c 87       	std	Y+12, r25	; 0x0c
    1f50:	ad 87       	std	Y+13, r26	; 0x0d
    1f52:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1f54:	6b 85       	ldd	r22, Y+11	; 0x0b
    1f56:	7c 85       	ldd	r23, Y+12	; 0x0c
    1f58:	8d 85       	ldd	r24, Y+13	; 0x0d
    1f5a:	9e 85       	ldd	r25, Y+14	; 0x0e
    1f5c:	20 e0       	ldi	r18, 0x00	; 0
    1f5e:	30 e0       	ldi	r19, 0x00	; 0
    1f60:	4a ef       	ldi	r20, 0xFA	; 250
    1f62:	54 e4       	ldi	r21, 0x44	; 68
    1f64:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f68:	dc 01       	movw	r26, r24
    1f6a:	cb 01       	movw	r24, r22
    1f6c:	8f 83       	std	Y+7, r24	; 0x07
    1f6e:	98 87       	std	Y+8, r25	; 0x08
    1f70:	a9 87       	std	Y+9, r26	; 0x09
    1f72:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1f74:	6f 81       	ldd	r22, Y+7	; 0x07
    1f76:	78 85       	ldd	r23, Y+8	; 0x08
    1f78:	89 85       	ldd	r24, Y+9	; 0x09
    1f7a:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f7c:	20 e0       	ldi	r18, 0x00	; 0
    1f7e:	30 e0       	ldi	r19, 0x00	; 0
    1f80:	40 e8       	ldi	r20, 0x80	; 128
    1f82:	5f e3       	ldi	r21, 0x3F	; 63
    1f84:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f88:	88 23       	and	r24, r24
    1f8a:	2c f4       	brge	.+10     	; 0x1f96 <EEPROM_writeArray+0xdc>
		__ticks = 1;
    1f8c:	81 e0       	ldi	r24, 0x01	; 1
    1f8e:	90 e0       	ldi	r25, 0x00	; 0
    1f90:	9e 83       	std	Y+6, r25	; 0x06
    1f92:	8d 83       	std	Y+5, r24	; 0x05
    1f94:	3f c0       	rjmp	.+126    	; 0x2014 <EEPROM_writeArray+0x15a>
	else if (__tmp > 65535)
    1f96:	6f 81       	ldd	r22, Y+7	; 0x07
    1f98:	78 85       	ldd	r23, Y+8	; 0x08
    1f9a:	89 85       	ldd	r24, Y+9	; 0x09
    1f9c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1f9e:	20 e0       	ldi	r18, 0x00	; 0
    1fa0:	3f ef       	ldi	r19, 0xFF	; 255
    1fa2:	4f e7       	ldi	r20, 0x7F	; 127
    1fa4:	57 e4       	ldi	r21, 0x47	; 71
    1fa6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1faa:	18 16       	cp	r1, r24
    1fac:	4c f5       	brge	.+82     	; 0x2000 <EEPROM_writeArray+0x146>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1fae:	6b 85       	ldd	r22, Y+11	; 0x0b
    1fb0:	7c 85       	ldd	r23, Y+12	; 0x0c
    1fb2:	8d 85       	ldd	r24, Y+13	; 0x0d
    1fb4:	9e 85       	ldd	r25, Y+14	; 0x0e
    1fb6:	20 e0       	ldi	r18, 0x00	; 0
    1fb8:	30 e0       	ldi	r19, 0x00	; 0
    1fba:	40 e2       	ldi	r20, 0x20	; 32
    1fbc:	51 e4       	ldi	r21, 0x41	; 65
    1fbe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1fc2:	dc 01       	movw	r26, r24
    1fc4:	cb 01       	movw	r24, r22
    1fc6:	bc 01       	movw	r22, r24
    1fc8:	cd 01       	movw	r24, r26
    1fca:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1fce:	dc 01       	movw	r26, r24
    1fd0:	cb 01       	movw	r24, r22
    1fd2:	9e 83       	std	Y+6, r25	; 0x06
    1fd4:	8d 83       	std	Y+5, r24	; 0x05
    1fd6:	0f c0       	rjmp	.+30     	; 0x1ff6 <EEPROM_writeArray+0x13c>
    1fd8:	88 ec       	ldi	r24, 0xC8	; 200
    1fda:	90 e0       	ldi	r25, 0x00	; 0
    1fdc:	9c 83       	std	Y+4, r25	; 0x04
    1fde:	8b 83       	std	Y+3, r24	; 0x03
    1fe0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fe2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fe4:	01 97       	sbiw	r24, 0x01	; 1
    1fe6:	f1 f7       	brne	.-4      	; 0x1fe4 <EEPROM_writeArray+0x12a>
    1fe8:	9c 83       	std	Y+4, r25	; 0x04
    1fea:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fec:	8d 81       	ldd	r24, Y+5	; 0x05
    1fee:	9e 81       	ldd	r25, Y+6	; 0x06
    1ff0:	01 97       	sbiw	r24, 0x01	; 1
    1ff2:	9e 83       	std	Y+6, r25	; 0x06
    1ff4:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ff6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ff8:	9e 81       	ldd	r25, Y+6	; 0x06
    1ffa:	00 97       	sbiw	r24, 0x00	; 0
    1ffc:	69 f7       	brne	.-38     	; 0x1fd8 <EEPROM_writeArray+0x11e>
    1ffe:	14 c0       	rjmp	.+40     	; 0x2028 <EEPROM_writeArray+0x16e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2000:	6f 81       	ldd	r22, Y+7	; 0x07
    2002:	78 85       	ldd	r23, Y+8	; 0x08
    2004:	89 85       	ldd	r24, Y+9	; 0x09
    2006:	9a 85       	ldd	r25, Y+10	; 0x0a
    2008:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	9e 83       	std	Y+6, r25	; 0x06
    2012:	8d 83       	std	Y+5, r24	; 0x05
    2014:	8d 81       	ldd	r24, Y+5	; 0x05
    2016:	9e 81       	ldd	r25, Y+6	; 0x06
    2018:	9a 83       	std	Y+2, r25	; 0x02
    201a:	89 83       	std	Y+1, r24	; 0x01
    201c:	89 81       	ldd	r24, Y+1	; 0x01
    201e:	9a 81       	ldd	r25, Y+2	; 0x02
    2020:	01 97       	sbiw	r24, 0x01	; 1
    2022:	f1 f7       	brne	.-4      	; 0x2020 <EEPROM_writeArray+0x166>
    2024:	9a 83       	std	Y+2, r25	; 0x02
    2026:	89 83       	std	Y+1, r24	; 0x01

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
        return ERROR;
    for ( int i=0 ; i<array_size ; i++ ) {
    2028:	8f 85       	ldd	r24, Y+15	; 0x0f
    202a:	98 89       	ldd	r25, Y+16	; 0x10
    202c:	01 96       	adiw	r24, 0x01	; 1
    202e:	98 8b       	std	Y+16, r25	; 0x10
    2030:	8f 87       	std	Y+15, r24	; 0x0f
    2032:	8d 89       	ldd	r24, Y+21	; 0x15
    2034:	28 2f       	mov	r18, r24
    2036:	30 e0       	ldi	r19, 0x00	; 0
    2038:	8f 85       	ldd	r24, Y+15	; 0x0f
    203a:	98 89       	ldd	r25, Y+16	; 0x10
    203c:	82 17       	cp	r24, r18
    203e:	93 07       	cpc	r25, r19
    2040:	0c f4       	brge	.+2      	; 0x2044 <EEPROM_writeArray+0x18a>
    2042:	70 cf       	rjmp	.-288    	; 0x1f24 <EEPROM_writeArray+0x6a>
        return ERROR;
    u8data++;
    _delay_ms(10);
}
    /* Send the Stop Bit */
    TWI_stop();
    2044:	0e 94 f6 15 	call	0x2bec	; 0x2bec <TWI_stop>

    return SUCCESS;
    2048:	81 e0       	ldi	r24, 0x01	; 1
    204a:	8e 8b       	std	Y+22, r24	; 0x16
    204c:	8e 89       	ldd	r24, Y+22	; 0x16
}
    204e:	66 96       	adiw	r28, 0x16	; 22
    2050:	0f b6       	in	r0, 0x3f	; 63
    2052:	f8 94       	cli
    2054:	de bf       	out	0x3e, r29	; 62
    2056:	0f be       	out	0x3f, r0	; 63
    2058:	cd bf       	out	0x3d, r28	; 61
    205a:	cf 91       	pop	r28
    205c:	df 91       	pop	r29
    205e:	08 95       	ret

00002060 <EEPROM_readArray>:

uint8 EEPROM_readArray(uint16 u16addr, uint8 *u8data,uint8 array_size)
{
    2060:	df 93       	push	r29
    2062:	cf 93       	push	r28
    2064:	cd b7       	in	r28, 0x3d	; 61
    2066:	de b7       	in	r29, 0x3e	; 62
    2068:	66 97       	sbiw	r28, 0x16	; 22
    206a:	0f b6       	in	r0, 0x3f	; 63
    206c:	f8 94       	cli
    206e:	de bf       	out	0x3e, r29	; 62
    2070:	0f be       	out	0x3f, r0	; 63
    2072:	cd bf       	out	0x3d, r28	; 61
    2074:	9a 8b       	std	Y+18, r25	; 0x12
    2076:	89 8b       	std	Y+17, r24	; 0x11
    2078:	7c 8b       	std	Y+20, r23	; 0x14
    207a:	6b 8b       	std	Y+19, r22	; 0x13
    207c:	4d 8b       	std	Y+21, r20	; 0x15
	/* Send the Start Bit */
    TWI_start();
    207e:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_start>
    if (TWI_getStatus() != TWI_START)
    2082:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    2086:	88 30       	cpi	r24, 0x08	; 8
    2088:	11 f0       	breq	.+4      	; 0x208e <EEPROM_readArray+0x2e>
        return ERROR;
    208a:	1e 8a       	std	Y+22, r1	; 0x16
    208c:	d9 c0       	rjmp	.+434    	; 0x2240 <EEPROM_readArray+0x1e0>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=0 (write) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7)));
    208e:	89 89       	ldd	r24, Y+17	; 0x11
    2090:	9a 89       	ldd	r25, Y+18	; 0x12
    2092:	80 70       	andi	r24, 0x00	; 0
    2094:	97 70       	andi	r25, 0x07	; 7
    2096:	88 0f       	add	r24, r24
    2098:	89 2f       	mov	r24, r25
    209a:	88 1f       	adc	r24, r24
    209c:	99 0b       	sbc	r25, r25
    209e:	91 95       	neg	r25
    20a0:	80 6a       	ori	r24, 0xA0	; 160
    20a2:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_W_ACK)
    20a6:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    20aa:	88 31       	cpi	r24, 0x18	; 24
    20ac:	11 f0       	breq	.+4      	; 0x20b2 <EEPROM_readArray+0x52>
        return ERROR;
    20ae:	1e 8a       	std	Y+22, r1	; 0x16
    20b0:	c7 c0       	rjmp	.+398    	; 0x2240 <EEPROM_readArray+0x1e0>

    /* Send the required memory location address */
    TWI_writeByte((uint8)(u16addr));
    20b2:	89 89       	ldd	r24, Y+17	; 0x11
    20b4:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_DATA_ACK)
    20b8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    20bc:	88 32       	cpi	r24, 0x28	; 40
    20be:	11 f0       	breq	.+4      	; 0x20c4 <EEPROM_readArray+0x64>
        return ERROR;
    20c0:	1e 8a       	std	Y+22, r1	; 0x16
    20c2:	be c0       	rjmp	.+380    	; 0x2240 <EEPROM_readArray+0x1e0>

    /* Send the Repeated Start Bit */
    TWI_start();
    20c4:	0e 94 e6 15 	call	0x2bcc	; 0x2bcc <TWI_start>
    if (TWI_getStatus() != TWI_REP_START)
    20c8:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    20cc:	80 31       	cpi	r24, 0x10	; 16
    20ce:	11 f0       	breq	.+4      	; 0x20d4 <EEPROM_readArray+0x74>
        return ERROR;
    20d0:	1e 8a       	std	Y+22, r1	; 0x16
    20d2:	b6 c0       	rjmp	.+364    	; 0x2240 <EEPROM_readArray+0x1e0>

    /* Send the device address, we need to get A8 A9 A10 address bits from the
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    20d4:	89 89       	ldd	r24, Y+17	; 0x11
    20d6:	9a 89       	ldd	r25, Y+18	; 0x12
    20d8:	80 70       	andi	r24, 0x00	; 0
    20da:	97 70       	andi	r25, 0x07	; 7
    20dc:	88 0f       	add	r24, r24
    20de:	89 2f       	mov	r24, r25
    20e0:	88 1f       	adc	r24, r24
    20e2:	99 0b       	sbc	r25, r25
    20e4:	91 95       	neg	r25
    20e6:	81 6a       	ori	r24, 0xA1	; 161
    20e8:	0e 94 01 16 	call	0x2c02	; 0x2c02 <TWI_writeByte>
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
    20ec:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    20f0:	80 34       	cpi	r24, 0x40	; 64
    20f2:	11 f0       	breq	.+4      	; 0x20f8 <EEPROM_readArray+0x98>
        return ERROR;
    20f4:	1e 8a       	std	Y+22, r1	; 0x16
    20f6:	a4 c0       	rjmp	.+328    	; 0x2240 <EEPROM_readArray+0x1e0>

    for ( int i=1 ; i<array_size ; i++ ) {
    20f8:	81 e0       	ldi	r24, 0x01	; 1
    20fa:	90 e0       	ldi	r25, 0x00	; 0
    20fc:	98 8b       	std	Y+16, r25	; 0x10
    20fe:	8f 87       	std	Y+15, r24	; 0x0f
    2100:	87 c0       	rjmp	.+270    	; 0x2210 <EEPROM_readArray+0x1b0>

    	/* Read Byte from Memory with send ACK */
    	    *u8data = TWI_readByteWithACK();
    2102:	0e 94 18 16 	call	0x2c30	; 0x2c30 <TWI_readByteWithACK>
    2106:	eb 89       	ldd	r30, Y+19	; 0x13
    2108:	fc 89       	ldd	r31, Y+20	; 0x14
    210a:	80 83       	st	Z, r24
    	    if (TWI_getStatus() != TWI_MR_DATA_ACK)
    210c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    2110:	80 35       	cpi	r24, 0x50	; 80
    2112:	11 f0       	breq	.+4      	; 0x2118 <EEPROM_readArray+0xb8>
    	        return ERROR;
    2114:	1e 8a       	std	Y+22, r1	; 0x16
    2116:	94 c0       	rjmp	.+296    	; 0x2240 <EEPROM_readArray+0x1e0>
    	    u8data++;
    2118:	8b 89       	ldd	r24, Y+19	; 0x13
    211a:	9c 89       	ldd	r25, Y+20	; 0x14
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	9c 8b       	std	Y+20, r25	; 0x14
    2120:	8b 8b       	std	Y+19, r24	; 0x13
    2122:	80 e0       	ldi	r24, 0x00	; 0
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	a0 e2       	ldi	r26, 0x20	; 32
    2128:	b1 e4       	ldi	r27, 0x41	; 65
    212a:	8b 87       	std	Y+11, r24	; 0x0b
    212c:	9c 87       	std	Y+12, r25	; 0x0c
    212e:	ad 87       	std	Y+13, r26	; 0x0d
    2130:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2132:	6b 85       	ldd	r22, Y+11	; 0x0b
    2134:	7c 85       	ldd	r23, Y+12	; 0x0c
    2136:	8d 85       	ldd	r24, Y+13	; 0x0d
    2138:	9e 85       	ldd	r25, Y+14	; 0x0e
    213a:	20 e0       	ldi	r18, 0x00	; 0
    213c:	30 e0       	ldi	r19, 0x00	; 0
    213e:	4a ef       	ldi	r20, 0xFA	; 250
    2140:	54 e4       	ldi	r21, 0x44	; 68
    2142:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2146:	dc 01       	movw	r26, r24
    2148:	cb 01       	movw	r24, r22
    214a:	8f 83       	std	Y+7, r24	; 0x07
    214c:	98 87       	std	Y+8, r25	; 0x08
    214e:	a9 87       	std	Y+9, r26	; 0x09
    2150:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2152:	6f 81       	ldd	r22, Y+7	; 0x07
    2154:	78 85       	ldd	r23, Y+8	; 0x08
    2156:	89 85       	ldd	r24, Y+9	; 0x09
    2158:	9a 85       	ldd	r25, Y+10	; 0x0a
    215a:	20 e0       	ldi	r18, 0x00	; 0
    215c:	30 e0       	ldi	r19, 0x00	; 0
    215e:	40 e8       	ldi	r20, 0x80	; 128
    2160:	5f e3       	ldi	r21, 0x3F	; 63
    2162:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2166:	88 23       	and	r24, r24
    2168:	2c f4       	brge	.+10     	; 0x2174 <EEPROM_readArray+0x114>
		__ticks = 1;
    216a:	81 e0       	ldi	r24, 0x01	; 1
    216c:	90 e0       	ldi	r25, 0x00	; 0
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	3f c0       	rjmp	.+126    	; 0x21f2 <EEPROM_readArray+0x192>
	else if (__tmp > 65535)
    2174:	6f 81       	ldd	r22, Y+7	; 0x07
    2176:	78 85       	ldd	r23, Y+8	; 0x08
    2178:	89 85       	ldd	r24, Y+9	; 0x09
    217a:	9a 85       	ldd	r25, Y+10	; 0x0a
    217c:	20 e0       	ldi	r18, 0x00	; 0
    217e:	3f ef       	ldi	r19, 0xFF	; 255
    2180:	4f e7       	ldi	r20, 0x7F	; 127
    2182:	57 e4       	ldi	r21, 0x47	; 71
    2184:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2188:	18 16       	cp	r1, r24
    218a:	4c f5       	brge	.+82     	; 0x21de <EEPROM_readArray+0x17e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    218c:	6b 85       	ldd	r22, Y+11	; 0x0b
    218e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2190:	8d 85       	ldd	r24, Y+13	; 0x0d
    2192:	9e 85       	ldd	r25, Y+14	; 0x0e
    2194:	20 e0       	ldi	r18, 0x00	; 0
    2196:	30 e0       	ldi	r19, 0x00	; 0
    2198:	40 e2       	ldi	r20, 0x20	; 32
    219a:	51 e4       	ldi	r21, 0x41	; 65
    219c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    21a0:	dc 01       	movw	r26, r24
    21a2:	cb 01       	movw	r24, r22
    21a4:	bc 01       	movw	r22, r24
    21a6:	cd 01       	movw	r24, r26
    21a8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ac:	dc 01       	movw	r26, r24
    21ae:	cb 01       	movw	r24, r22
    21b0:	9e 83       	std	Y+6, r25	; 0x06
    21b2:	8d 83       	std	Y+5, r24	; 0x05
    21b4:	0f c0       	rjmp	.+30     	; 0x21d4 <EEPROM_readArray+0x174>
    21b6:	88 ec       	ldi	r24, 0xC8	; 200
    21b8:	90 e0       	ldi	r25, 0x00	; 0
    21ba:	9c 83       	std	Y+4, r25	; 0x04
    21bc:	8b 83       	std	Y+3, r24	; 0x03
    21be:	8b 81       	ldd	r24, Y+3	; 0x03
    21c0:	9c 81       	ldd	r25, Y+4	; 0x04
    21c2:	01 97       	sbiw	r24, 0x01	; 1
    21c4:	f1 f7       	brne	.-4      	; 0x21c2 <EEPROM_readArray+0x162>
    21c6:	9c 83       	std	Y+4, r25	; 0x04
    21c8:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    21ca:	8d 81       	ldd	r24, Y+5	; 0x05
    21cc:	9e 81       	ldd	r25, Y+6	; 0x06
    21ce:	01 97       	sbiw	r24, 0x01	; 1
    21d0:	9e 83       	std	Y+6, r25	; 0x06
    21d2:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    21d4:	8d 81       	ldd	r24, Y+5	; 0x05
    21d6:	9e 81       	ldd	r25, Y+6	; 0x06
    21d8:	00 97       	sbiw	r24, 0x00	; 0
    21da:	69 f7       	brne	.-38     	; 0x21b6 <EEPROM_readArray+0x156>
    21dc:	14 c0       	rjmp	.+40     	; 0x2206 <EEPROM_readArray+0x1a6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    21de:	6f 81       	ldd	r22, Y+7	; 0x07
    21e0:	78 85       	ldd	r23, Y+8	; 0x08
    21e2:	89 85       	ldd	r24, Y+9	; 0x09
    21e4:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    21ea:	dc 01       	movw	r26, r24
    21ec:	cb 01       	movw	r24, r22
    21ee:	9e 83       	std	Y+6, r25	; 0x06
    21f0:	8d 83       	std	Y+5, r24	; 0x05
    21f2:	8d 81       	ldd	r24, Y+5	; 0x05
    21f4:	9e 81       	ldd	r25, Y+6	; 0x06
    21f6:	9a 83       	std	Y+2, r25	; 0x02
    21f8:	89 83       	std	Y+1, r24	; 0x01
    21fa:	89 81       	ldd	r24, Y+1	; 0x01
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	01 97       	sbiw	r24, 0x01	; 1
    2200:	f1 f7       	brne	.-4      	; 0x21fe <EEPROM_readArray+0x19e>
    2202:	9a 83       	std	Y+2, r25	; 0x02
    2204:	89 83       	std	Y+1, r24	; 0x01
     * memory location address and R/W=1 (Read) */
    TWI_writeByte((uint8)((0xA0) | ((u16addr & 0x0700)>>7) | 1));
    if (TWI_getStatus() != TWI_MT_SLA_R_ACK)
        return ERROR;

    for ( int i=1 ; i<array_size ; i++ ) {
    2206:	8f 85       	ldd	r24, Y+15	; 0x0f
    2208:	98 89       	ldd	r25, Y+16	; 0x10
    220a:	01 96       	adiw	r24, 0x01	; 1
    220c:	98 8b       	std	Y+16, r25	; 0x10
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    2210:	8d 89       	ldd	r24, Y+21	; 0x15
    2212:	28 2f       	mov	r18, r24
    2214:	30 e0       	ldi	r19, 0x00	; 0
    2216:	8f 85       	ldd	r24, Y+15	; 0x0f
    2218:	98 89       	ldd	r25, Y+16	; 0x10
    221a:	82 17       	cp	r24, r18
    221c:	93 07       	cpc	r25, r19
    221e:	0c f4       	brge	.+2      	; 0x2222 <EEPROM_readArray+0x1c2>
    2220:	70 cf       	rjmp	.-288    	; 0x2102 <EEPROM_readArray+0xa2>

    }


    /* Read Byte from Memory without send ACK */
    *u8data = TWI_readByteWithNACK();
    2222:	0e 94 2b 16 	call	0x2c56	; 0x2c56 <TWI_readByteWithNACK>
    2226:	eb 89       	ldd	r30, Y+19	; 0x13
    2228:	fc 89       	ldd	r31, Y+20	; 0x14
    222a:	80 83       	st	Z, r24
    if (TWI_getStatus() != TWI_MR_DATA_NACK)
    222c:	0e 94 3e 16 	call	0x2c7c	; 0x2c7c <TWI_getStatus>
    2230:	88 35       	cpi	r24, 0x58	; 88
    2232:	11 f0       	breq	.+4      	; 0x2238 <EEPROM_readArray+0x1d8>
        return ERROR;
    2234:	1e 8a       	std	Y+22, r1	; 0x16
    2236:	04 c0       	rjmp	.+8      	; 0x2240 <EEPROM_readArray+0x1e0>

    /* Send the Stop Bit */
    TWI_stop();
    2238:	0e 94 f6 15 	call	0x2bec	; 0x2bec <TWI_stop>

    return SUCCESS;
    223c:	81 e0       	ldi	r24, 0x01	; 1
    223e:	8e 8b       	std	Y+22, r24	; 0x16
    2240:	8e 89       	ldd	r24, Y+22	; 0x16
}
    2242:	66 96       	adiw	r28, 0x16	; 22
    2244:	0f b6       	in	r0, 0x3f	; 63
    2246:	f8 94       	cli
    2248:	de bf       	out	0x3e, r29	; 62
    224a:	0f be       	out	0x3f, r0	; 63
    224c:	cd bf       	out	0x3d, r28	; 61
    224e:	cf 91       	pop	r28
    2250:	df 91       	pop	r29
    2252:	08 95       	ret

00002254 <Buzzer_init>:
 *******************************************************************************/

#include"buzzer.h"
#include"avr/io.h"
/********** Buzzer Initialization function *************************/
void Buzzer_init(void){
    2254:	df 93       	push	r29
    2256:	cf 93       	push	r28
    2258:	cd b7       	in	r28, 0x3d	; 61
    225a:	de b7       	in	r29, 0x3e	; 62
	DDRD |=(1<<PD6);
    225c:	a1 e3       	ldi	r26, 0x31	; 49
    225e:	b0 e0       	ldi	r27, 0x00	; 0
    2260:	e1 e3       	ldi	r30, 0x31	; 49
    2262:	f0 e0       	ldi	r31, 0x00	; 0
    2264:	80 81       	ld	r24, Z
    2266:	80 64       	ori	r24, 0x40	; 64
    2268:	8c 93       	st	X, r24
	DDRD |=(1<<PD7);
    226a:	a1 e3       	ldi	r26, 0x31	; 49
    226c:	b0 e0       	ldi	r27, 0x00	; 0
    226e:	e1 e3       	ldi	r30, 0x31	; 49
    2270:	f0 e0       	ldi	r31, 0x00	; 0
    2272:	80 81       	ld	r24, Z
    2274:	80 68       	ori	r24, 0x80	; 128
    2276:	8c 93       	st	X, r24
	PORTD&=~(1<<PD6);
    2278:	a2 e3       	ldi	r26, 0x32	; 50
    227a:	b0 e0       	ldi	r27, 0x00	; 0
    227c:	e2 e3       	ldi	r30, 0x32	; 50
    227e:	f0 e0       	ldi	r31, 0x00	; 0
    2280:	80 81       	ld	r24, Z
    2282:	8f 7b       	andi	r24, 0xBF	; 191
    2284:	8c 93       	st	X, r24
	PORTD&=~(1<<PD7);
    2286:	a2 e3       	ldi	r26, 0x32	; 50
    2288:	b0 e0       	ldi	r27, 0x00	; 0
    228a:	e2 e3       	ldi	r30, 0x32	; 50
    228c:	f0 e0       	ldi	r31, 0x00	; 0
    228e:	80 81       	ld	r24, Z
    2290:	8f 77       	andi	r24, 0x7F	; 127
    2292:	8c 93       	st	X, r24

}
    2294:	cf 91       	pop	r28
    2296:	df 91       	pop	r29
    2298:	08 95       	ret

0000229a <Buzzer_on>:
/************** Turn ON Buzzer ************/
void Buzzer_on(void){
    229a:	df 93       	push	r29
    229c:	cf 93       	push	r28
    229e:	cd b7       	in	r28, 0x3d	; 61
    22a0:	de b7       	in	r29, 0x3e	; 62

	PORTD |=(1<<PD6);
    22a2:	a2 e3       	ldi	r26, 0x32	; 50
    22a4:	b0 e0       	ldi	r27, 0x00	; 0
    22a6:	e2 e3       	ldi	r30, 0x32	; 50
    22a8:	f0 e0       	ldi	r31, 0x00	; 0
    22aa:	80 81       	ld	r24, Z
    22ac:	80 64       	ori	r24, 0x40	; 64
    22ae:	8c 93       	st	X, r24
	PORTD |=(1<<PD7);
    22b0:	a2 e3       	ldi	r26, 0x32	; 50
    22b2:	b0 e0       	ldi	r27, 0x00	; 0
    22b4:	e2 e3       	ldi	r30, 0x32	; 50
    22b6:	f0 e0       	ldi	r31, 0x00	; 0
    22b8:	80 81       	ld	r24, Z
    22ba:	80 68       	ori	r24, 0x80	; 128
    22bc:	8c 93       	st	X, r24

}
    22be:	cf 91       	pop	r28
    22c0:	df 91       	pop	r29
    22c2:	08 95       	ret

000022c4 <Buzzer_off>:
/******************Turn OFF Buzzer  **********/
void Buzzer_off(){
    22c4:	df 93       	push	r29
    22c6:	cf 93       	push	r28
    22c8:	cd b7       	in	r28, 0x3d	; 61
    22ca:	de b7       	in	r29, 0x3e	; 62
	PORTD &=~(1<<PD6);
    22cc:	a2 e3       	ldi	r26, 0x32	; 50
    22ce:	b0 e0       	ldi	r27, 0x00	; 0
    22d0:	e2 e3       	ldi	r30, 0x32	; 50
    22d2:	f0 e0       	ldi	r31, 0x00	; 0
    22d4:	80 81       	ld	r24, Z
    22d6:	8f 7b       	andi	r24, 0xBF	; 191
    22d8:	8c 93       	st	X, r24
	PORTD &=~(1<<PD7);
    22da:	a2 e3       	ldi	r26, 0x32	; 50
    22dc:	b0 e0       	ldi	r27, 0x00	; 0
    22de:	e2 e3       	ldi	r30, 0x32	; 50
    22e0:	f0 e0       	ldi	r31, 0x00	; 0
    22e2:	80 81       	ld	r24, Z
    22e4:	8f 77       	andi	r24, 0x7F	; 127
    22e6:	8c 93       	st	X, r24
}
    22e8:	cf 91       	pop	r28
    22ea:	df 91       	pop	r29
    22ec:	08 95       	ret

000022ee <GPIO_setupPinDirection>:
 * Description :
 * Setup the direction of the required pin input/output.
 * If the input port number or pin number are not correct, The function will not handle the request.
 */
void GPIO_setupPinDirection(uint8 port_num, uint8 pin_num, GPIO_PinDirectionType direction)
{
    22ee:	df 93       	push	r29
    22f0:	cf 93       	push	r28
    22f2:	00 d0       	rcall	.+0      	; 0x22f4 <GPIO_setupPinDirection+0x6>
    22f4:	00 d0       	rcall	.+0      	; 0x22f6 <GPIO_setupPinDirection+0x8>
    22f6:	0f 92       	push	r0
    22f8:	cd b7       	in	r28, 0x3d	; 61
    22fa:	de b7       	in	r29, 0x3e	; 62
    22fc:	89 83       	std	Y+1, r24	; 0x01
    22fe:	6a 83       	std	Y+2, r22	; 0x02
    2300:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    2302:	8a 81       	ldd	r24, Y+2	; 0x02
    2304:	88 30       	cpi	r24, 0x08	; 8
    2306:	08 f0       	brcs	.+2      	; 0x230a <GPIO_setupPinDirection+0x1c>
    2308:	d5 c0       	rjmp	.+426    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
    230a:	89 81       	ldd	r24, Y+1	; 0x01
    230c:	84 30       	cpi	r24, 0x04	; 4
    230e:	08 f0       	brcs	.+2      	; 0x2312 <GPIO_setupPinDirection+0x24>
    2310:	d1 c0       	rjmp	.+418    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Setup the pin direction as required */
		switch(port_num)
    2312:	89 81       	ldd	r24, Y+1	; 0x01
    2314:	28 2f       	mov	r18, r24
    2316:	30 e0       	ldi	r19, 0x00	; 0
    2318:	3d 83       	std	Y+5, r19	; 0x05
    231a:	2c 83       	std	Y+4, r18	; 0x04
    231c:	8c 81       	ldd	r24, Y+4	; 0x04
    231e:	9d 81       	ldd	r25, Y+5	; 0x05
    2320:	81 30       	cpi	r24, 0x01	; 1
    2322:	91 05       	cpc	r25, r1
    2324:	09 f4       	brne	.+2      	; 0x2328 <GPIO_setupPinDirection+0x3a>
    2326:	43 c0       	rjmp	.+134    	; 0x23ae <GPIO_setupPinDirection+0xc0>
    2328:	2c 81       	ldd	r18, Y+4	; 0x04
    232a:	3d 81       	ldd	r19, Y+5	; 0x05
    232c:	22 30       	cpi	r18, 0x02	; 2
    232e:	31 05       	cpc	r19, r1
    2330:	2c f4       	brge	.+10     	; 0x233c <GPIO_setupPinDirection+0x4e>
    2332:	8c 81       	ldd	r24, Y+4	; 0x04
    2334:	9d 81       	ldd	r25, Y+5	; 0x05
    2336:	00 97       	sbiw	r24, 0x00	; 0
    2338:	71 f0       	breq	.+28     	; 0x2356 <GPIO_setupPinDirection+0x68>
    233a:	bc c0       	rjmp	.+376    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
    233c:	2c 81       	ldd	r18, Y+4	; 0x04
    233e:	3d 81       	ldd	r19, Y+5	; 0x05
    2340:	22 30       	cpi	r18, 0x02	; 2
    2342:	31 05       	cpc	r19, r1
    2344:	09 f4       	brne	.+2      	; 0x2348 <GPIO_setupPinDirection+0x5a>
    2346:	5f c0       	rjmp	.+190    	; 0x2406 <GPIO_setupPinDirection+0x118>
    2348:	8c 81       	ldd	r24, Y+4	; 0x04
    234a:	9d 81       	ldd	r25, Y+5	; 0x05
    234c:	83 30       	cpi	r24, 0x03	; 3
    234e:	91 05       	cpc	r25, r1
    2350:	09 f4       	brne	.+2      	; 0x2354 <GPIO_setupPinDirection+0x66>
    2352:	85 c0       	rjmp	.+266    	; 0x245e <GPIO_setupPinDirection+0x170>
    2354:	af c0       	rjmp	.+350    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
		{
		case PORTA_ID:
			if(direction == PIN_OUTPUT)
    2356:	8b 81       	ldd	r24, Y+3	; 0x03
    2358:	81 30       	cpi	r24, 0x01	; 1
    235a:	a1 f4       	brne	.+40     	; 0x2384 <GPIO_setupPinDirection+0x96>
			{
				SET_BIT(DDRA,pin_num);
    235c:	aa e3       	ldi	r26, 0x3A	; 58
    235e:	b0 e0       	ldi	r27, 0x00	; 0
    2360:	ea e3       	ldi	r30, 0x3A	; 58
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	80 81       	ld	r24, Z
    2366:	48 2f       	mov	r20, r24
    2368:	8a 81       	ldd	r24, Y+2	; 0x02
    236a:	28 2f       	mov	r18, r24
    236c:	30 e0       	ldi	r19, 0x00	; 0
    236e:	81 e0       	ldi	r24, 0x01	; 1
    2370:	90 e0       	ldi	r25, 0x00	; 0
    2372:	02 2e       	mov	r0, r18
    2374:	02 c0       	rjmp	.+4      	; 0x237a <GPIO_setupPinDirection+0x8c>
    2376:	88 0f       	add	r24, r24
    2378:	99 1f       	adc	r25, r25
    237a:	0a 94       	dec	r0
    237c:	e2 f7       	brpl	.-8      	; 0x2376 <GPIO_setupPinDirection+0x88>
    237e:	84 2b       	or	r24, r20
    2380:	8c 93       	st	X, r24
    2382:	98 c0       	rjmp	.+304    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRA,pin_num);
    2384:	aa e3       	ldi	r26, 0x3A	; 58
    2386:	b0 e0       	ldi	r27, 0x00	; 0
    2388:	ea e3       	ldi	r30, 0x3A	; 58
    238a:	f0 e0       	ldi	r31, 0x00	; 0
    238c:	80 81       	ld	r24, Z
    238e:	48 2f       	mov	r20, r24
    2390:	8a 81       	ldd	r24, Y+2	; 0x02
    2392:	28 2f       	mov	r18, r24
    2394:	30 e0       	ldi	r19, 0x00	; 0
    2396:	81 e0       	ldi	r24, 0x01	; 1
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	02 2e       	mov	r0, r18
    239c:	02 c0       	rjmp	.+4      	; 0x23a2 <GPIO_setupPinDirection+0xb4>
    239e:	88 0f       	add	r24, r24
    23a0:	99 1f       	adc	r25, r25
    23a2:	0a 94       	dec	r0
    23a4:	e2 f7       	brpl	.-8      	; 0x239e <GPIO_setupPinDirection+0xb0>
    23a6:	80 95       	com	r24
    23a8:	84 23       	and	r24, r20
    23aa:	8c 93       	st	X, r24
    23ac:	83 c0       	rjmp	.+262    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTB_ID:
			if(direction == PIN_OUTPUT)
    23ae:	8b 81       	ldd	r24, Y+3	; 0x03
    23b0:	81 30       	cpi	r24, 0x01	; 1
    23b2:	a1 f4       	brne	.+40     	; 0x23dc <GPIO_setupPinDirection+0xee>
			{
				SET_BIT(DDRB,pin_num);
    23b4:	a7 e3       	ldi	r26, 0x37	; 55
    23b6:	b0 e0       	ldi	r27, 0x00	; 0
    23b8:	e7 e3       	ldi	r30, 0x37	; 55
    23ba:	f0 e0       	ldi	r31, 0x00	; 0
    23bc:	80 81       	ld	r24, Z
    23be:	48 2f       	mov	r20, r24
    23c0:	8a 81       	ldd	r24, Y+2	; 0x02
    23c2:	28 2f       	mov	r18, r24
    23c4:	30 e0       	ldi	r19, 0x00	; 0
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	02 2e       	mov	r0, r18
    23cc:	02 c0       	rjmp	.+4      	; 0x23d2 <GPIO_setupPinDirection+0xe4>
    23ce:	88 0f       	add	r24, r24
    23d0:	99 1f       	adc	r25, r25
    23d2:	0a 94       	dec	r0
    23d4:	e2 f7       	brpl	.-8      	; 0x23ce <GPIO_setupPinDirection+0xe0>
    23d6:	84 2b       	or	r24, r20
    23d8:	8c 93       	st	X, r24
    23da:	6c c0       	rjmp	.+216    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRB,pin_num);
    23dc:	a7 e3       	ldi	r26, 0x37	; 55
    23de:	b0 e0       	ldi	r27, 0x00	; 0
    23e0:	e7 e3       	ldi	r30, 0x37	; 55
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	48 2f       	mov	r20, r24
    23e8:	8a 81       	ldd	r24, Y+2	; 0x02
    23ea:	28 2f       	mov	r18, r24
    23ec:	30 e0       	ldi	r19, 0x00	; 0
    23ee:	81 e0       	ldi	r24, 0x01	; 1
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	02 2e       	mov	r0, r18
    23f4:	02 c0       	rjmp	.+4      	; 0x23fa <GPIO_setupPinDirection+0x10c>
    23f6:	88 0f       	add	r24, r24
    23f8:	99 1f       	adc	r25, r25
    23fa:	0a 94       	dec	r0
    23fc:	e2 f7       	brpl	.-8      	; 0x23f6 <GPIO_setupPinDirection+0x108>
    23fe:	80 95       	com	r24
    2400:	84 23       	and	r24, r20
    2402:	8c 93       	st	X, r24
    2404:	57 c0       	rjmp	.+174    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTC_ID:
			if(direction == PIN_OUTPUT)
    2406:	8b 81       	ldd	r24, Y+3	; 0x03
    2408:	81 30       	cpi	r24, 0x01	; 1
    240a:	a1 f4       	brne	.+40     	; 0x2434 <GPIO_setupPinDirection+0x146>
			{
				SET_BIT(DDRC,pin_num);
    240c:	a4 e3       	ldi	r26, 0x34	; 52
    240e:	b0 e0       	ldi	r27, 0x00	; 0
    2410:	e4 e3       	ldi	r30, 0x34	; 52
    2412:	f0 e0       	ldi	r31, 0x00	; 0
    2414:	80 81       	ld	r24, Z
    2416:	48 2f       	mov	r20, r24
    2418:	8a 81       	ldd	r24, Y+2	; 0x02
    241a:	28 2f       	mov	r18, r24
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	81 e0       	ldi	r24, 0x01	; 1
    2420:	90 e0       	ldi	r25, 0x00	; 0
    2422:	02 2e       	mov	r0, r18
    2424:	02 c0       	rjmp	.+4      	; 0x242a <GPIO_setupPinDirection+0x13c>
    2426:	88 0f       	add	r24, r24
    2428:	99 1f       	adc	r25, r25
    242a:	0a 94       	dec	r0
    242c:	e2 f7       	brpl	.-8      	; 0x2426 <GPIO_setupPinDirection+0x138>
    242e:	84 2b       	or	r24, r20
    2430:	8c 93       	st	X, r24
    2432:	40 c0       	rjmp	.+128    	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRC,pin_num);
    2434:	a4 e3       	ldi	r26, 0x34	; 52
    2436:	b0 e0       	ldi	r27, 0x00	; 0
    2438:	e4 e3       	ldi	r30, 0x34	; 52
    243a:	f0 e0       	ldi	r31, 0x00	; 0
    243c:	80 81       	ld	r24, Z
    243e:	48 2f       	mov	r20, r24
    2440:	8a 81       	ldd	r24, Y+2	; 0x02
    2442:	28 2f       	mov	r18, r24
    2444:	30 e0       	ldi	r19, 0x00	; 0
    2446:	81 e0       	ldi	r24, 0x01	; 1
    2448:	90 e0       	ldi	r25, 0x00	; 0
    244a:	02 2e       	mov	r0, r18
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <GPIO_setupPinDirection+0x164>
    244e:	88 0f       	add	r24, r24
    2450:	99 1f       	adc	r25, r25
    2452:	0a 94       	dec	r0
    2454:	e2 f7       	brpl	.-8      	; 0x244e <GPIO_setupPinDirection+0x160>
    2456:	80 95       	com	r24
    2458:	84 23       	and	r24, r20
    245a:	8c 93       	st	X, r24
    245c:	2b c0       	rjmp	.+86     	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			break;
		case PORTD_ID:
			if(direction == PIN_OUTPUT)
    245e:	8b 81       	ldd	r24, Y+3	; 0x03
    2460:	81 30       	cpi	r24, 0x01	; 1
    2462:	a1 f4       	brne	.+40     	; 0x248c <GPIO_setupPinDirection+0x19e>
			{
				SET_BIT(DDRD,pin_num);
    2464:	a1 e3       	ldi	r26, 0x31	; 49
    2466:	b0 e0       	ldi	r27, 0x00	; 0
    2468:	e1 e3       	ldi	r30, 0x31	; 49
    246a:	f0 e0       	ldi	r31, 0x00	; 0
    246c:	80 81       	ld	r24, Z
    246e:	48 2f       	mov	r20, r24
    2470:	8a 81       	ldd	r24, Y+2	; 0x02
    2472:	28 2f       	mov	r18, r24
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	81 e0       	ldi	r24, 0x01	; 1
    2478:	90 e0       	ldi	r25, 0x00	; 0
    247a:	02 2e       	mov	r0, r18
    247c:	02 c0       	rjmp	.+4      	; 0x2482 <GPIO_setupPinDirection+0x194>
    247e:	88 0f       	add	r24, r24
    2480:	99 1f       	adc	r25, r25
    2482:	0a 94       	dec	r0
    2484:	e2 f7       	brpl	.-8      	; 0x247e <GPIO_setupPinDirection+0x190>
    2486:	84 2b       	or	r24, r20
    2488:	8c 93       	st	X, r24
    248a:	14 c0       	rjmp	.+40     	; 0x24b4 <GPIO_setupPinDirection+0x1c6>
			}
			else
			{
				CLEAR_BIT(DDRD,pin_num);
    248c:	a1 e3       	ldi	r26, 0x31	; 49
    248e:	b0 e0       	ldi	r27, 0x00	; 0
    2490:	e1 e3       	ldi	r30, 0x31	; 49
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	48 2f       	mov	r20, r24
    2498:	8a 81       	ldd	r24, Y+2	; 0x02
    249a:	28 2f       	mov	r18, r24
    249c:	30 e0       	ldi	r19, 0x00	; 0
    249e:	81 e0       	ldi	r24, 0x01	; 1
    24a0:	90 e0       	ldi	r25, 0x00	; 0
    24a2:	02 2e       	mov	r0, r18
    24a4:	02 c0       	rjmp	.+4      	; 0x24aa <GPIO_setupPinDirection+0x1bc>
    24a6:	88 0f       	add	r24, r24
    24a8:	99 1f       	adc	r25, r25
    24aa:	0a 94       	dec	r0
    24ac:	e2 f7       	brpl	.-8      	; 0x24a6 <GPIO_setupPinDirection+0x1b8>
    24ae:	80 95       	com	r24
    24b0:	84 23       	and	r24, r20
    24b2:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    24b4:	0f 90       	pop	r0
    24b6:	0f 90       	pop	r0
    24b8:	0f 90       	pop	r0
    24ba:	0f 90       	pop	r0
    24bc:	0f 90       	pop	r0
    24be:	cf 91       	pop	r28
    24c0:	df 91       	pop	r29
    24c2:	08 95       	ret

000024c4 <GPIO_writePin>:
 * Write the value Logic High or Logic Low on the required pin.
 * If the input port number or pin number are not correct, The function will not handle the request.
 * If the pin is input, this function will enable/disable the internal pull-up resistor.
 */
void GPIO_writePin(uint8 port_num, uint8 pin_num, uint8 value)
{
    24c4:	df 93       	push	r29
    24c6:	cf 93       	push	r28
    24c8:	00 d0       	rcall	.+0      	; 0x24ca <GPIO_writePin+0x6>
    24ca:	00 d0       	rcall	.+0      	; 0x24cc <GPIO_writePin+0x8>
    24cc:	0f 92       	push	r0
    24ce:	cd b7       	in	r28, 0x3d	; 61
    24d0:	de b7       	in	r29, 0x3e	; 62
    24d2:	89 83       	std	Y+1, r24	; 0x01
    24d4:	6a 83       	std	Y+2, r22	; 0x02
    24d6:	4b 83       	std	Y+3, r20	; 0x03
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    24d8:	8a 81       	ldd	r24, Y+2	; 0x02
    24da:	88 30       	cpi	r24, 0x08	; 8
    24dc:	08 f0       	brcs	.+2      	; 0x24e0 <GPIO_writePin+0x1c>
    24de:	d5 c0       	rjmp	.+426    	; 0x268a <GPIO_writePin+0x1c6>
    24e0:	89 81       	ldd	r24, Y+1	; 0x01
    24e2:	84 30       	cpi	r24, 0x04	; 4
    24e4:	08 f0       	brcs	.+2      	; 0x24e8 <GPIO_writePin+0x24>
    24e6:	d1 c0       	rjmp	.+418    	; 0x268a <GPIO_writePin+0x1c6>
		/* Do Nothing */
	}
	else
	{
		/* Write the pin value as required */
		switch(port_num)
    24e8:	89 81       	ldd	r24, Y+1	; 0x01
    24ea:	28 2f       	mov	r18, r24
    24ec:	30 e0       	ldi	r19, 0x00	; 0
    24ee:	3d 83       	std	Y+5, r19	; 0x05
    24f0:	2c 83       	std	Y+4, r18	; 0x04
    24f2:	8c 81       	ldd	r24, Y+4	; 0x04
    24f4:	9d 81       	ldd	r25, Y+5	; 0x05
    24f6:	81 30       	cpi	r24, 0x01	; 1
    24f8:	91 05       	cpc	r25, r1
    24fa:	09 f4       	brne	.+2      	; 0x24fe <GPIO_writePin+0x3a>
    24fc:	43 c0       	rjmp	.+134    	; 0x2584 <GPIO_writePin+0xc0>
    24fe:	2c 81       	ldd	r18, Y+4	; 0x04
    2500:	3d 81       	ldd	r19, Y+5	; 0x05
    2502:	22 30       	cpi	r18, 0x02	; 2
    2504:	31 05       	cpc	r19, r1
    2506:	2c f4       	brge	.+10     	; 0x2512 <GPIO_writePin+0x4e>
    2508:	8c 81       	ldd	r24, Y+4	; 0x04
    250a:	9d 81       	ldd	r25, Y+5	; 0x05
    250c:	00 97       	sbiw	r24, 0x00	; 0
    250e:	71 f0       	breq	.+28     	; 0x252c <GPIO_writePin+0x68>
    2510:	bc c0       	rjmp	.+376    	; 0x268a <GPIO_writePin+0x1c6>
    2512:	2c 81       	ldd	r18, Y+4	; 0x04
    2514:	3d 81       	ldd	r19, Y+5	; 0x05
    2516:	22 30       	cpi	r18, 0x02	; 2
    2518:	31 05       	cpc	r19, r1
    251a:	09 f4       	brne	.+2      	; 0x251e <GPIO_writePin+0x5a>
    251c:	5f c0       	rjmp	.+190    	; 0x25dc <GPIO_writePin+0x118>
    251e:	8c 81       	ldd	r24, Y+4	; 0x04
    2520:	9d 81       	ldd	r25, Y+5	; 0x05
    2522:	83 30       	cpi	r24, 0x03	; 3
    2524:	91 05       	cpc	r25, r1
    2526:	09 f4       	brne	.+2      	; 0x252a <GPIO_writePin+0x66>
    2528:	85 c0       	rjmp	.+266    	; 0x2634 <GPIO_writePin+0x170>
    252a:	af c0       	rjmp	.+350    	; 0x268a <GPIO_writePin+0x1c6>
		{
		case PORTA_ID:
			if(value == LOGIC_HIGH)
    252c:	8b 81       	ldd	r24, Y+3	; 0x03
    252e:	81 30       	cpi	r24, 0x01	; 1
    2530:	a1 f4       	brne	.+40     	; 0x255a <GPIO_writePin+0x96>
			{
				SET_BIT(PORTA,pin_num);
    2532:	ab e3       	ldi	r26, 0x3B	; 59
    2534:	b0 e0       	ldi	r27, 0x00	; 0
    2536:	eb e3       	ldi	r30, 0x3B	; 59
    2538:	f0 e0       	ldi	r31, 0x00	; 0
    253a:	80 81       	ld	r24, Z
    253c:	48 2f       	mov	r20, r24
    253e:	8a 81       	ldd	r24, Y+2	; 0x02
    2540:	28 2f       	mov	r18, r24
    2542:	30 e0       	ldi	r19, 0x00	; 0
    2544:	81 e0       	ldi	r24, 0x01	; 1
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	02 2e       	mov	r0, r18
    254a:	02 c0       	rjmp	.+4      	; 0x2550 <GPIO_writePin+0x8c>
    254c:	88 0f       	add	r24, r24
    254e:	99 1f       	adc	r25, r25
    2550:	0a 94       	dec	r0
    2552:	e2 f7       	brpl	.-8      	; 0x254c <GPIO_writePin+0x88>
    2554:	84 2b       	or	r24, r20
    2556:	8c 93       	st	X, r24
    2558:	98 c0       	rjmp	.+304    	; 0x268a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTA,pin_num);
    255a:	ab e3       	ldi	r26, 0x3B	; 59
    255c:	b0 e0       	ldi	r27, 0x00	; 0
    255e:	eb e3       	ldi	r30, 0x3B	; 59
    2560:	f0 e0       	ldi	r31, 0x00	; 0
    2562:	80 81       	ld	r24, Z
    2564:	48 2f       	mov	r20, r24
    2566:	8a 81       	ldd	r24, Y+2	; 0x02
    2568:	28 2f       	mov	r18, r24
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	81 e0       	ldi	r24, 0x01	; 1
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	02 2e       	mov	r0, r18
    2572:	02 c0       	rjmp	.+4      	; 0x2578 <GPIO_writePin+0xb4>
    2574:	88 0f       	add	r24, r24
    2576:	99 1f       	adc	r25, r25
    2578:	0a 94       	dec	r0
    257a:	e2 f7       	brpl	.-8      	; 0x2574 <GPIO_writePin+0xb0>
    257c:	80 95       	com	r24
    257e:	84 23       	and	r24, r20
    2580:	8c 93       	st	X, r24
    2582:	83 c0       	rjmp	.+262    	; 0x268a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTB_ID:
			if(value == LOGIC_HIGH)
    2584:	8b 81       	ldd	r24, Y+3	; 0x03
    2586:	81 30       	cpi	r24, 0x01	; 1
    2588:	a1 f4       	brne	.+40     	; 0x25b2 <GPIO_writePin+0xee>
			{
				SET_BIT(PORTB,pin_num);
    258a:	a8 e3       	ldi	r26, 0x38	; 56
    258c:	b0 e0       	ldi	r27, 0x00	; 0
    258e:	e8 e3       	ldi	r30, 0x38	; 56
    2590:	f0 e0       	ldi	r31, 0x00	; 0
    2592:	80 81       	ld	r24, Z
    2594:	48 2f       	mov	r20, r24
    2596:	8a 81       	ldd	r24, Y+2	; 0x02
    2598:	28 2f       	mov	r18, r24
    259a:	30 e0       	ldi	r19, 0x00	; 0
    259c:	81 e0       	ldi	r24, 0x01	; 1
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	02 2e       	mov	r0, r18
    25a2:	02 c0       	rjmp	.+4      	; 0x25a8 <GPIO_writePin+0xe4>
    25a4:	88 0f       	add	r24, r24
    25a6:	99 1f       	adc	r25, r25
    25a8:	0a 94       	dec	r0
    25aa:	e2 f7       	brpl	.-8      	; 0x25a4 <GPIO_writePin+0xe0>
    25ac:	84 2b       	or	r24, r20
    25ae:	8c 93       	st	X, r24
    25b0:	6c c0       	rjmp	.+216    	; 0x268a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTB,pin_num);
    25b2:	a8 e3       	ldi	r26, 0x38	; 56
    25b4:	b0 e0       	ldi	r27, 0x00	; 0
    25b6:	e8 e3       	ldi	r30, 0x38	; 56
    25b8:	f0 e0       	ldi	r31, 0x00	; 0
    25ba:	80 81       	ld	r24, Z
    25bc:	48 2f       	mov	r20, r24
    25be:	8a 81       	ldd	r24, Y+2	; 0x02
    25c0:	28 2f       	mov	r18, r24
    25c2:	30 e0       	ldi	r19, 0x00	; 0
    25c4:	81 e0       	ldi	r24, 0x01	; 1
    25c6:	90 e0       	ldi	r25, 0x00	; 0
    25c8:	02 2e       	mov	r0, r18
    25ca:	02 c0       	rjmp	.+4      	; 0x25d0 <GPIO_writePin+0x10c>
    25cc:	88 0f       	add	r24, r24
    25ce:	99 1f       	adc	r25, r25
    25d0:	0a 94       	dec	r0
    25d2:	e2 f7       	brpl	.-8      	; 0x25cc <GPIO_writePin+0x108>
    25d4:	80 95       	com	r24
    25d6:	84 23       	and	r24, r20
    25d8:	8c 93       	st	X, r24
    25da:	57 c0       	rjmp	.+174    	; 0x268a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTC_ID:
			if(value == LOGIC_HIGH)
    25dc:	8b 81       	ldd	r24, Y+3	; 0x03
    25de:	81 30       	cpi	r24, 0x01	; 1
    25e0:	a1 f4       	brne	.+40     	; 0x260a <GPIO_writePin+0x146>
			{
				SET_BIT(PORTC,pin_num);
    25e2:	a5 e3       	ldi	r26, 0x35	; 53
    25e4:	b0 e0       	ldi	r27, 0x00	; 0
    25e6:	e5 e3       	ldi	r30, 0x35	; 53
    25e8:	f0 e0       	ldi	r31, 0x00	; 0
    25ea:	80 81       	ld	r24, Z
    25ec:	48 2f       	mov	r20, r24
    25ee:	8a 81       	ldd	r24, Y+2	; 0x02
    25f0:	28 2f       	mov	r18, r24
    25f2:	30 e0       	ldi	r19, 0x00	; 0
    25f4:	81 e0       	ldi	r24, 0x01	; 1
    25f6:	90 e0       	ldi	r25, 0x00	; 0
    25f8:	02 2e       	mov	r0, r18
    25fa:	02 c0       	rjmp	.+4      	; 0x2600 <GPIO_writePin+0x13c>
    25fc:	88 0f       	add	r24, r24
    25fe:	99 1f       	adc	r25, r25
    2600:	0a 94       	dec	r0
    2602:	e2 f7       	brpl	.-8      	; 0x25fc <GPIO_writePin+0x138>
    2604:	84 2b       	or	r24, r20
    2606:	8c 93       	st	X, r24
    2608:	40 c0       	rjmp	.+128    	; 0x268a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTC,pin_num);
    260a:	a5 e3       	ldi	r26, 0x35	; 53
    260c:	b0 e0       	ldi	r27, 0x00	; 0
    260e:	e5 e3       	ldi	r30, 0x35	; 53
    2610:	f0 e0       	ldi	r31, 0x00	; 0
    2612:	80 81       	ld	r24, Z
    2614:	48 2f       	mov	r20, r24
    2616:	8a 81       	ldd	r24, Y+2	; 0x02
    2618:	28 2f       	mov	r18, r24
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	81 e0       	ldi	r24, 0x01	; 1
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	02 2e       	mov	r0, r18
    2622:	02 c0       	rjmp	.+4      	; 0x2628 <GPIO_writePin+0x164>
    2624:	88 0f       	add	r24, r24
    2626:	99 1f       	adc	r25, r25
    2628:	0a 94       	dec	r0
    262a:	e2 f7       	brpl	.-8      	; 0x2624 <GPIO_writePin+0x160>
    262c:	80 95       	com	r24
    262e:	84 23       	and	r24, r20
    2630:	8c 93       	st	X, r24
    2632:	2b c0       	rjmp	.+86     	; 0x268a <GPIO_writePin+0x1c6>
			}
			break;
		case PORTD_ID:
			if(value == LOGIC_HIGH)
    2634:	8b 81       	ldd	r24, Y+3	; 0x03
    2636:	81 30       	cpi	r24, 0x01	; 1
    2638:	a1 f4       	brne	.+40     	; 0x2662 <GPIO_writePin+0x19e>
			{
				SET_BIT(PORTD,pin_num);
    263a:	a2 e3       	ldi	r26, 0x32	; 50
    263c:	b0 e0       	ldi	r27, 0x00	; 0
    263e:	e2 e3       	ldi	r30, 0x32	; 50
    2640:	f0 e0       	ldi	r31, 0x00	; 0
    2642:	80 81       	ld	r24, Z
    2644:	48 2f       	mov	r20, r24
    2646:	8a 81       	ldd	r24, Y+2	; 0x02
    2648:	28 2f       	mov	r18, r24
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	81 e0       	ldi	r24, 0x01	; 1
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	02 2e       	mov	r0, r18
    2652:	02 c0       	rjmp	.+4      	; 0x2658 <GPIO_writePin+0x194>
    2654:	88 0f       	add	r24, r24
    2656:	99 1f       	adc	r25, r25
    2658:	0a 94       	dec	r0
    265a:	e2 f7       	brpl	.-8      	; 0x2654 <GPIO_writePin+0x190>
    265c:	84 2b       	or	r24, r20
    265e:	8c 93       	st	X, r24
    2660:	14 c0       	rjmp	.+40     	; 0x268a <GPIO_writePin+0x1c6>
			}
			else
			{
				CLEAR_BIT(PORTD,pin_num);
    2662:	a2 e3       	ldi	r26, 0x32	; 50
    2664:	b0 e0       	ldi	r27, 0x00	; 0
    2666:	e2 e3       	ldi	r30, 0x32	; 50
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	80 81       	ld	r24, Z
    266c:	48 2f       	mov	r20, r24
    266e:	8a 81       	ldd	r24, Y+2	; 0x02
    2670:	28 2f       	mov	r18, r24
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	81 e0       	ldi	r24, 0x01	; 1
    2676:	90 e0       	ldi	r25, 0x00	; 0
    2678:	02 2e       	mov	r0, r18
    267a:	02 c0       	rjmp	.+4      	; 0x2680 <GPIO_writePin+0x1bc>
    267c:	88 0f       	add	r24, r24
    267e:	99 1f       	adc	r25, r25
    2680:	0a 94       	dec	r0
    2682:	e2 f7       	brpl	.-8      	; 0x267c <GPIO_writePin+0x1b8>
    2684:	80 95       	com	r24
    2686:	84 23       	and	r24, r20
    2688:	8c 93       	st	X, r24
			}
			break;
		}
	}
}
    268a:	0f 90       	pop	r0
    268c:	0f 90       	pop	r0
    268e:	0f 90       	pop	r0
    2690:	0f 90       	pop	r0
    2692:	0f 90       	pop	r0
    2694:	cf 91       	pop	r28
    2696:	df 91       	pop	r29
    2698:	08 95       	ret

0000269a <GPIO_readPin>:
 * Description :
 * Read and return the value for the required pin, it should be Logic High or Logic Low.
 * If the input port number or pin number are not correct, The function will return Logic Low.
 */
uint8 GPIO_readPin(uint8 port_num, uint8 pin_num)
{
    269a:	df 93       	push	r29
    269c:	cf 93       	push	r28
    269e:	00 d0       	rcall	.+0      	; 0x26a0 <GPIO_readPin+0x6>
    26a0:	00 d0       	rcall	.+0      	; 0x26a2 <GPIO_readPin+0x8>
    26a2:	0f 92       	push	r0
    26a4:	cd b7       	in	r28, 0x3d	; 61
    26a6:	de b7       	in	r29, 0x3e	; 62
    26a8:	8a 83       	std	Y+2, r24	; 0x02
    26aa:	6b 83       	std	Y+3, r22	; 0x03
	uint8 pin_value = LOGIC_LOW;
    26ac:	19 82       	std	Y+1, r1	; 0x01
	/*
	 * Check if the input port number is greater than NUM_OF_PINS_PER_PORT value.
	 * Or if the input pin number is greater than NUM_OF_PINS_PER_PORT value.
	 * In this case the input is not valid port/pin number
	 */
	if((pin_num >= NUM_OF_PINS_PER_PORT) || (port_num >= NUM_OF_PORTS))
    26ae:	8b 81       	ldd	r24, Y+3	; 0x03
    26b0:	88 30       	cpi	r24, 0x08	; 8
    26b2:	08 f0       	brcs	.+2      	; 0x26b6 <GPIO_readPin+0x1c>
    26b4:	84 c0       	rjmp	.+264    	; 0x27be <GPIO_readPin+0x124>
    26b6:	8a 81       	ldd	r24, Y+2	; 0x02
    26b8:	84 30       	cpi	r24, 0x04	; 4
    26ba:	08 f0       	brcs	.+2      	; 0x26be <GPIO_readPin+0x24>
    26bc:	80 c0       	rjmp	.+256    	; 0x27be <GPIO_readPin+0x124>
		/* Do Nothing */
	}
	else
	{
		/* Read the pin value as required */
		switch(port_num)
    26be:	8a 81       	ldd	r24, Y+2	; 0x02
    26c0:	28 2f       	mov	r18, r24
    26c2:	30 e0       	ldi	r19, 0x00	; 0
    26c4:	3d 83       	std	Y+5, r19	; 0x05
    26c6:	2c 83       	std	Y+4, r18	; 0x04
    26c8:	4c 81       	ldd	r20, Y+4	; 0x04
    26ca:	5d 81       	ldd	r21, Y+5	; 0x05
    26cc:	41 30       	cpi	r20, 0x01	; 1
    26ce:	51 05       	cpc	r21, r1
    26d0:	79 f1       	breq	.+94     	; 0x2730 <GPIO_readPin+0x96>
    26d2:	8c 81       	ldd	r24, Y+4	; 0x04
    26d4:	9d 81       	ldd	r25, Y+5	; 0x05
    26d6:	82 30       	cpi	r24, 0x02	; 2
    26d8:	91 05       	cpc	r25, r1
    26da:	34 f4       	brge	.+12     	; 0x26e8 <GPIO_readPin+0x4e>
    26dc:	2c 81       	ldd	r18, Y+4	; 0x04
    26de:	3d 81       	ldd	r19, Y+5	; 0x05
    26e0:	21 15       	cp	r18, r1
    26e2:	31 05       	cpc	r19, r1
    26e4:	69 f0       	breq	.+26     	; 0x2700 <GPIO_readPin+0x66>
    26e6:	6b c0       	rjmp	.+214    	; 0x27be <GPIO_readPin+0x124>
    26e8:	4c 81       	ldd	r20, Y+4	; 0x04
    26ea:	5d 81       	ldd	r21, Y+5	; 0x05
    26ec:	42 30       	cpi	r20, 0x02	; 2
    26ee:	51 05       	cpc	r21, r1
    26f0:	b9 f1       	breq	.+110    	; 0x2760 <GPIO_readPin+0xc6>
    26f2:	8c 81       	ldd	r24, Y+4	; 0x04
    26f4:	9d 81       	ldd	r25, Y+5	; 0x05
    26f6:	83 30       	cpi	r24, 0x03	; 3
    26f8:	91 05       	cpc	r25, r1
    26fa:	09 f4       	brne	.+2      	; 0x26fe <GPIO_readPin+0x64>
    26fc:	49 c0       	rjmp	.+146    	; 0x2790 <GPIO_readPin+0xf6>
    26fe:	5f c0       	rjmp	.+190    	; 0x27be <GPIO_readPin+0x124>
		{
		case PORTA_ID:
			if(BIT_IS_SET(PINA,pin_num))
    2700:	e9 e3       	ldi	r30, 0x39	; 57
    2702:	f0 e0       	ldi	r31, 0x00	; 0
    2704:	80 81       	ld	r24, Z
    2706:	28 2f       	mov	r18, r24
    2708:	30 e0       	ldi	r19, 0x00	; 0
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	88 2f       	mov	r24, r24
    270e:	90 e0       	ldi	r25, 0x00	; 0
    2710:	a9 01       	movw	r20, r18
    2712:	02 c0       	rjmp	.+4      	; 0x2718 <GPIO_readPin+0x7e>
    2714:	55 95       	asr	r21
    2716:	47 95       	ror	r20
    2718:	8a 95       	dec	r24
    271a:	e2 f7       	brpl	.-8      	; 0x2714 <GPIO_readPin+0x7a>
    271c:	ca 01       	movw	r24, r20
    271e:	81 70       	andi	r24, 0x01	; 1
    2720:	90 70       	andi	r25, 0x00	; 0
    2722:	88 23       	and	r24, r24
    2724:	19 f0       	breq	.+6      	; 0x272c <GPIO_readPin+0x92>
			{
				pin_value = LOGIC_HIGH;
    2726:	81 e0       	ldi	r24, 0x01	; 1
    2728:	89 83       	std	Y+1, r24	; 0x01
    272a:	49 c0       	rjmp	.+146    	; 0x27be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    272c:	19 82       	std	Y+1, r1	; 0x01
    272e:	47 c0       	rjmp	.+142    	; 0x27be <GPIO_readPin+0x124>
			}
			break;
		case PORTB_ID:
			if(BIT_IS_SET(PINB,pin_num))
    2730:	e6 e3       	ldi	r30, 0x36	; 54
    2732:	f0 e0       	ldi	r31, 0x00	; 0
    2734:	80 81       	ld	r24, Z
    2736:	28 2f       	mov	r18, r24
    2738:	30 e0       	ldi	r19, 0x00	; 0
    273a:	8b 81       	ldd	r24, Y+3	; 0x03
    273c:	88 2f       	mov	r24, r24
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a9 01       	movw	r20, r18
    2742:	02 c0       	rjmp	.+4      	; 0x2748 <GPIO_readPin+0xae>
    2744:	55 95       	asr	r21
    2746:	47 95       	ror	r20
    2748:	8a 95       	dec	r24
    274a:	e2 f7       	brpl	.-8      	; 0x2744 <GPIO_readPin+0xaa>
    274c:	ca 01       	movw	r24, r20
    274e:	81 70       	andi	r24, 0x01	; 1
    2750:	90 70       	andi	r25, 0x00	; 0
    2752:	88 23       	and	r24, r24
    2754:	19 f0       	breq	.+6      	; 0x275c <GPIO_readPin+0xc2>
			{
				pin_value = LOGIC_HIGH;
    2756:	81 e0       	ldi	r24, 0x01	; 1
    2758:	89 83       	std	Y+1, r24	; 0x01
    275a:	31 c0       	rjmp	.+98     	; 0x27be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    275c:	19 82       	std	Y+1, r1	; 0x01
    275e:	2f c0       	rjmp	.+94     	; 0x27be <GPIO_readPin+0x124>
			}
			break;
		case PORTC_ID:
			if(BIT_IS_SET(PINC,pin_num))
    2760:	e3 e3       	ldi	r30, 0x33	; 51
    2762:	f0 e0       	ldi	r31, 0x00	; 0
    2764:	80 81       	ld	r24, Z
    2766:	28 2f       	mov	r18, r24
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	8b 81       	ldd	r24, Y+3	; 0x03
    276c:	88 2f       	mov	r24, r24
    276e:	90 e0       	ldi	r25, 0x00	; 0
    2770:	a9 01       	movw	r20, r18
    2772:	02 c0       	rjmp	.+4      	; 0x2778 <GPIO_readPin+0xde>
    2774:	55 95       	asr	r21
    2776:	47 95       	ror	r20
    2778:	8a 95       	dec	r24
    277a:	e2 f7       	brpl	.-8      	; 0x2774 <GPIO_readPin+0xda>
    277c:	ca 01       	movw	r24, r20
    277e:	81 70       	andi	r24, 0x01	; 1
    2780:	90 70       	andi	r25, 0x00	; 0
    2782:	88 23       	and	r24, r24
    2784:	19 f0       	breq	.+6      	; 0x278c <GPIO_readPin+0xf2>
			{
				pin_value = LOGIC_HIGH;
    2786:	81 e0       	ldi	r24, 0x01	; 1
    2788:	89 83       	std	Y+1, r24	; 0x01
    278a:	19 c0       	rjmp	.+50     	; 0x27be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    278c:	19 82       	std	Y+1, r1	; 0x01
    278e:	17 c0       	rjmp	.+46     	; 0x27be <GPIO_readPin+0x124>
			}
			break;
		case PORTD_ID:
			if(BIT_IS_SET(PIND,pin_num))
    2790:	e0 e3       	ldi	r30, 0x30	; 48
    2792:	f0 e0       	ldi	r31, 0x00	; 0
    2794:	80 81       	ld	r24, Z
    2796:	28 2f       	mov	r18, r24
    2798:	30 e0       	ldi	r19, 0x00	; 0
    279a:	8b 81       	ldd	r24, Y+3	; 0x03
    279c:	88 2f       	mov	r24, r24
    279e:	90 e0       	ldi	r25, 0x00	; 0
    27a0:	a9 01       	movw	r20, r18
    27a2:	02 c0       	rjmp	.+4      	; 0x27a8 <GPIO_readPin+0x10e>
    27a4:	55 95       	asr	r21
    27a6:	47 95       	ror	r20
    27a8:	8a 95       	dec	r24
    27aa:	e2 f7       	brpl	.-8      	; 0x27a4 <GPIO_readPin+0x10a>
    27ac:	ca 01       	movw	r24, r20
    27ae:	81 70       	andi	r24, 0x01	; 1
    27b0:	90 70       	andi	r25, 0x00	; 0
    27b2:	88 23       	and	r24, r24
    27b4:	19 f0       	breq	.+6      	; 0x27bc <GPIO_readPin+0x122>
			{
				pin_value = LOGIC_HIGH;
    27b6:	81 e0       	ldi	r24, 0x01	; 1
    27b8:	89 83       	std	Y+1, r24	; 0x01
    27ba:	01 c0       	rjmp	.+2      	; 0x27be <GPIO_readPin+0x124>
			}
			else
			{
				pin_value = LOGIC_LOW;
    27bc:	19 82       	std	Y+1, r1	; 0x01
			}
			break;
		}
	}

	return pin_value;
    27be:	89 81       	ldd	r24, Y+1	; 0x01
}
    27c0:	0f 90       	pop	r0
    27c2:	0f 90       	pop	r0
    27c4:	0f 90       	pop	r0
    27c6:	0f 90       	pop	r0
    27c8:	0f 90       	pop	r0
    27ca:	cf 91       	pop	r28
    27cc:	df 91       	pop	r29
    27ce:	08 95       	ret

000027d0 <GPIO_setupPortDirection>:
 * If the direction value is PORT_INPUT all pins in this port should be input pins.
 * If the direction value is PORT_OUTPUT all pins in this port should be output pins.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_setupPortDirection(uint8 port_num, GPIO_PortDirectionType direction)
{
    27d0:	df 93       	push	r29
    27d2:	cf 93       	push	r28
    27d4:	00 d0       	rcall	.+0      	; 0x27d6 <GPIO_setupPortDirection+0x6>
    27d6:	00 d0       	rcall	.+0      	; 0x27d8 <GPIO_setupPortDirection+0x8>
    27d8:	cd b7       	in	r28, 0x3d	; 61
    27da:	de b7       	in	r29, 0x3e	; 62
    27dc:	89 83       	std	Y+1, r24	; 0x01
    27de:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    27e0:	89 81       	ldd	r24, Y+1	; 0x01
    27e2:	84 30       	cpi	r24, 0x04	; 4
    27e4:	90 f5       	brcc	.+100    	; 0x284a <GPIO_setupPortDirection+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Setup the port direction as required */
		switch(port_num)
    27e6:	89 81       	ldd	r24, Y+1	; 0x01
    27e8:	28 2f       	mov	r18, r24
    27ea:	30 e0       	ldi	r19, 0x00	; 0
    27ec:	3c 83       	std	Y+4, r19	; 0x04
    27ee:	2b 83       	std	Y+3, r18	; 0x03
    27f0:	8b 81       	ldd	r24, Y+3	; 0x03
    27f2:	9c 81       	ldd	r25, Y+4	; 0x04
    27f4:	81 30       	cpi	r24, 0x01	; 1
    27f6:	91 05       	cpc	r25, r1
    27f8:	d1 f0       	breq	.+52     	; 0x282e <GPIO_setupPortDirection+0x5e>
    27fa:	2b 81       	ldd	r18, Y+3	; 0x03
    27fc:	3c 81       	ldd	r19, Y+4	; 0x04
    27fe:	22 30       	cpi	r18, 0x02	; 2
    2800:	31 05       	cpc	r19, r1
    2802:	2c f4       	brge	.+10     	; 0x280e <GPIO_setupPortDirection+0x3e>
    2804:	8b 81       	ldd	r24, Y+3	; 0x03
    2806:	9c 81       	ldd	r25, Y+4	; 0x04
    2808:	00 97       	sbiw	r24, 0x00	; 0
    280a:	61 f0       	breq	.+24     	; 0x2824 <GPIO_setupPortDirection+0x54>
    280c:	1e c0       	rjmp	.+60     	; 0x284a <GPIO_setupPortDirection+0x7a>
    280e:	2b 81       	ldd	r18, Y+3	; 0x03
    2810:	3c 81       	ldd	r19, Y+4	; 0x04
    2812:	22 30       	cpi	r18, 0x02	; 2
    2814:	31 05       	cpc	r19, r1
    2816:	81 f0       	breq	.+32     	; 0x2838 <GPIO_setupPortDirection+0x68>
    2818:	8b 81       	ldd	r24, Y+3	; 0x03
    281a:	9c 81       	ldd	r25, Y+4	; 0x04
    281c:	83 30       	cpi	r24, 0x03	; 3
    281e:	91 05       	cpc	r25, r1
    2820:	81 f0       	breq	.+32     	; 0x2842 <GPIO_setupPortDirection+0x72>
    2822:	13 c0       	rjmp	.+38     	; 0x284a <GPIO_setupPortDirection+0x7a>
		{
		case PORTA_ID:
			DDRA = direction;
    2824:	ea e3       	ldi	r30, 0x3A	; 58
    2826:	f0 e0       	ldi	r31, 0x00	; 0
    2828:	8a 81       	ldd	r24, Y+2	; 0x02
    282a:	80 83       	st	Z, r24
    282c:	0e c0       	rjmp	.+28     	; 0x284a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTB_ID:
			DDRB = direction;
    282e:	e7 e3       	ldi	r30, 0x37	; 55
    2830:	f0 e0       	ldi	r31, 0x00	; 0
    2832:	8a 81       	ldd	r24, Y+2	; 0x02
    2834:	80 83       	st	Z, r24
    2836:	09 c0       	rjmp	.+18     	; 0x284a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTC_ID:
			DDRC = direction;
    2838:	e4 e3       	ldi	r30, 0x34	; 52
    283a:	f0 e0       	ldi	r31, 0x00	; 0
    283c:	8a 81       	ldd	r24, Y+2	; 0x02
    283e:	80 83       	st	Z, r24
    2840:	04 c0       	rjmp	.+8      	; 0x284a <GPIO_setupPortDirection+0x7a>
			break;
		case PORTD_ID:
			DDRD = direction;
    2842:	e1 e3       	ldi	r30, 0x31	; 49
    2844:	f0 e0       	ldi	r31, 0x00	; 0
    2846:	8a 81       	ldd	r24, Y+2	; 0x02
    2848:	80 83       	st	Z, r24
			break;
		}
	}
}
    284a:	0f 90       	pop	r0
    284c:	0f 90       	pop	r0
    284e:	0f 90       	pop	r0
    2850:	0f 90       	pop	r0
    2852:	cf 91       	pop	r28
    2854:	df 91       	pop	r29
    2856:	08 95       	ret

00002858 <GPIO_writePort>:
 * If any pin in the port is output pin the value will be written.
 * If any pin in the port is input pin this will activate/deactivate the internal pull-up resistor.
 * If the input port number is not correct, The function will not handle the request.
 */
void GPIO_writePort(uint8 port_num, uint8 value)
{
    2858:	df 93       	push	r29
    285a:	cf 93       	push	r28
    285c:	00 d0       	rcall	.+0      	; 0x285e <GPIO_writePort+0x6>
    285e:	00 d0       	rcall	.+0      	; 0x2860 <GPIO_writePort+0x8>
    2860:	cd b7       	in	r28, 0x3d	; 61
    2862:	de b7       	in	r29, 0x3e	; 62
    2864:	89 83       	std	Y+1, r24	; 0x01
    2866:	6a 83       	std	Y+2, r22	; 0x02
	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    2868:	89 81       	ldd	r24, Y+1	; 0x01
    286a:	84 30       	cpi	r24, 0x04	; 4
    286c:	90 f5       	brcc	.+100    	; 0x28d2 <GPIO_writePort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Write the port value as required */
		switch(port_num)
    286e:	89 81       	ldd	r24, Y+1	; 0x01
    2870:	28 2f       	mov	r18, r24
    2872:	30 e0       	ldi	r19, 0x00	; 0
    2874:	3c 83       	std	Y+4, r19	; 0x04
    2876:	2b 83       	std	Y+3, r18	; 0x03
    2878:	8b 81       	ldd	r24, Y+3	; 0x03
    287a:	9c 81       	ldd	r25, Y+4	; 0x04
    287c:	81 30       	cpi	r24, 0x01	; 1
    287e:	91 05       	cpc	r25, r1
    2880:	d1 f0       	breq	.+52     	; 0x28b6 <GPIO_writePort+0x5e>
    2882:	2b 81       	ldd	r18, Y+3	; 0x03
    2884:	3c 81       	ldd	r19, Y+4	; 0x04
    2886:	22 30       	cpi	r18, 0x02	; 2
    2888:	31 05       	cpc	r19, r1
    288a:	2c f4       	brge	.+10     	; 0x2896 <GPIO_writePort+0x3e>
    288c:	8b 81       	ldd	r24, Y+3	; 0x03
    288e:	9c 81       	ldd	r25, Y+4	; 0x04
    2890:	00 97       	sbiw	r24, 0x00	; 0
    2892:	61 f0       	breq	.+24     	; 0x28ac <GPIO_writePort+0x54>
    2894:	1e c0       	rjmp	.+60     	; 0x28d2 <GPIO_writePort+0x7a>
    2896:	2b 81       	ldd	r18, Y+3	; 0x03
    2898:	3c 81       	ldd	r19, Y+4	; 0x04
    289a:	22 30       	cpi	r18, 0x02	; 2
    289c:	31 05       	cpc	r19, r1
    289e:	81 f0       	breq	.+32     	; 0x28c0 <GPIO_writePort+0x68>
    28a0:	8b 81       	ldd	r24, Y+3	; 0x03
    28a2:	9c 81       	ldd	r25, Y+4	; 0x04
    28a4:	83 30       	cpi	r24, 0x03	; 3
    28a6:	91 05       	cpc	r25, r1
    28a8:	81 f0       	breq	.+32     	; 0x28ca <GPIO_writePort+0x72>
    28aa:	13 c0       	rjmp	.+38     	; 0x28d2 <GPIO_writePort+0x7a>
		{
		case PORTA_ID:
			PORTA = value;
    28ac:	eb e3       	ldi	r30, 0x3B	; 59
    28ae:	f0 e0       	ldi	r31, 0x00	; 0
    28b0:	8a 81       	ldd	r24, Y+2	; 0x02
    28b2:	80 83       	st	Z, r24
    28b4:	0e c0       	rjmp	.+28     	; 0x28d2 <GPIO_writePort+0x7a>
			break;
		case PORTB_ID:
			PORTB = value;
    28b6:	e8 e3       	ldi	r30, 0x38	; 56
    28b8:	f0 e0       	ldi	r31, 0x00	; 0
    28ba:	8a 81       	ldd	r24, Y+2	; 0x02
    28bc:	80 83       	st	Z, r24
    28be:	09 c0       	rjmp	.+18     	; 0x28d2 <GPIO_writePort+0x7a>
			break;
		case PORTC_ID:
			PORTC = value;
    28c0:	e5 e3       	ldi	r30, 0x35	; 53
    28c2:	f0 e0       	ldi	r31, 0x00	; 0
    28c4:	8a 81       	ldd	r24, Y+2	; 0x02
    28c6:	80 83       	st	Z, r24
    28c8:	04 c0       	rjmp	.+8      	; 0x28d2 <GPIO_writePort+0x7a>
			break;
		case PORTD_ID:
			PORTD = value;
    28ca:	e2 e3       	ldi	r30, 0x32	; 50
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	8a 81       	ldd	r24, Y+2	; 0x02
    28d0:	80 83       	st	Z, r24
			break;
		}
	}
}
    28d2:	0f 90       	pop	r0
    28d4:	0f 90       	pop	r0
    28d6:	0f 90       	pop	r0
    28d8:	0f 90       	pop	r0
    28da:	cf 91       	pop	r28
    28dc:	df 91       	pop	r29
    28de:	08 95       	ret

000028e0 <GPIO_readPort>:
 * Description :
 * Read and return the value of the required port.
 * If the input port number is not correct, The function will return ZERO value.
 */
uint8 GPIO_readPort(uint8 port_num)
{
    28e0:	df 93       	push	r29
    28e2:	cf 93       	push	r28
    28e4:	00 d0       	rcall	.+0      	; 0x28e6 <GPIO_readPort+0x6>
    28e6:	00 d0       	rcall	.+0      	; 0x28e8 <GPIO_readPort+0x8>
    28e8:	cd b7       	in	r28, 0x3d	; 61
    28ea:	de b7       	in	r29, 0x3e	; 62
    28ec:	8a 83       	std	Y+2, r24	; 0x02
	uint8 value = LOGIC_LOW;
    28ee:	19 82       	std	Y+1, r1	; 0x01

	/*
	 * Check if the input number is greater than NUM_OF_PORTS value.
	 * In this case the input is not valid port number
	 */
	if(port_num >= NUM_OF_PORTS)
    28f0:	8a 81       	ldd	r24, Y+2	; 0x02
    28f2:	84 30       	cpi	r24, 0x04	; 4
    28f4:	90 f5       	brcc	.+100    	; 0x295a <GPIO_readPort+0x7a>
		/* Do Nothing */
	}
	else
	{
		/* Read the port value as required */
		switch(port_num)
    28f6:	8a 81       	ldd	r24, Y+2	; 0x02
    28f8:	28 2f       	mov	r18, r24
    28fa:	30 e0       	ldi	r19, 0x00	; 0
    28fc:	3c 83       	std	Y+4, r19	; 0x04
    28fe:	2b 83       	std	Y+3, r18	; 0x03
    2900:	8b 81       	ldd	r24, Y+3	; 0x03
    2902:	9c 81       	ldd	r25, Y+4	; 0x04
    2904:	81 30       	cpi	r24, 0x01	; 1
    2906:	91 05       	cpc	r25, r1
    2908:	d1 f0       	breq	.+52     	; 0x293e <GPIO_readPort+0x5e>
    290a:	2b 81       	ldd	r18, Y+3	; 0x03
    290c:	3c 81       	ldd	r19, Y+4	; 0x04
    290e:	22 30       	cpi	r18, 0x02	; 2
    2910:	31 05       	cpc	r19, r1
    2912:	2c f4       	brge	.+10     	; 0x291e <GPIO_readPort+0x3e>
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	00 97       	sbiw	r24, 0x00	; 0
    291a:	61 f0       	breq	.+24     	; 0x2934 <GPIO_readPort+0x54>
    291c:	1e c0       	rjmp	.+60     	; 0x295a <GPIO_readPort+0x7a>
    291e:	2b 81       	ldd	r18, Y+3	; 0x03
    2920:	3c 81       	ldd	r19, Y+4	; 0x04
    2922:	22 30       	cpi	r18, 0x02	; 2
    2924:	31 05       	cpc	r19, r1
    2926:	81 f0       	breq	.+32     	; 0x2948 <GPIO_readPort+0x68>
    2928:	8b 81       	ldd	r24, Y+3	; 0x03
    292a:	9c 81       	ldd	r25, Y+4	; 0x04
    292c:	83 30       	cpi	r24, 0x03	; 3
    292e:	91 05       	cpc	r25, r1
    2930:	81 f0       	breq	.+32     	; 0x2952 <GPIO_readPort+0x72>
    2932:	13 c0       	rjmp	.+38     	; 0x295a <GPIO_readPort+0x7a>
		{
		case PORTA_ID:
			value = PINA;
    2934:	e9 e3       	ldi	r30, 0x39	; 57
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	80 81       	ld	r24, Z
    293a:	89 83       	std	Y+1, r24	; 0x01
    293c:	0e c0       	rjmp	.+28     	; 0x295a <GPIO_readPort+0x7a>
			break;
		case PORTB_ID:
			value = PINB;
    293e:	e6 e3       	ldi	r30, 0x36	; 54
    2940:	f0 e0       	ldi	r31, 0x00	; 0
    2942:	80 81       	ld	r24, Z
    2944:	89 83       	std	Y+1, r24	; 0x01
    2946:	09 c0       	rjmp	.+18     	; 0x295a <GPIO_readPort+0x7a>
			break;
		case PORTC_ID:
			value = PINC;
    2948:	e3 e3       	ldi	r30, 0x33	; 51
    294a:	f0 e0       	ldi	r31, 0x00	; 0
    294c:	80 81       	ld	r24, Z
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	04 c0       	rjmp	.+8      	; 0x295a <GPIO_readPort+0x7a>
			break;
		case PORTD_ID:
			value = PIND;
    2952:	e0 e3       	ldi	r30, 0x30	; 48
    2954:	f0 e0       	ldi	r31, 0x00	; 0
    2956:	80 81       	ld	r24, Z
    2958:	89 83       	std	Y+1, r24	; 0x01
			break;
		}
	}

	return value;
    295a:	89 81       	ldd	r24, Y+1	; 0x01

}
    295c:	0f 90       	pop	r0
    295e:	0f 90       	pop	r0
    2960:	0f 90       	pop	r0
    2962:	0f 90       	pop	r0
    2964:	cf 91       	pop	r28
    2966:	df 91       	pop	r29
    2968:	08 95       	ret

0000296a <__vector_9>:
/* Global variables to hold the address of the call back function in the application */
static volatile void (*g_callBack_ptr)(void) = NULL_PTR ; /* Global Pointer to Function */

/* Interrupt Service Routine for timer1 compare mode */
ISR(TIMER1_OVF_vect) /* ISR For Normal MODE */
{
    296a:	1f 92       	push	r1
    296c:	0f 92       	push	r0
    296e:	0f b6       	in	r0, 0x3f	; 63
    2970:	0f 92       	push	r0
    2972:	11 24       	eor	r1, r1
    2974:	2f 93       	push	r18
    2976:	3f 93       	push	r19
    2978:	4f 93       	push	r20
    297a:	5f 93       	push	r21
    297c:	6f 93       	push	r22
    297e:	7f 93       	push	r23
    2980:	8f 93       	push	r24
    2982:	9f 93       	push	r25
    2984:	af 93       	push	r26
    2986:	bf 93       	push	r27
    2988:	ef 93       	push	r30
    298a:	ff 93       	push	r31
    298c:	df 93       	push	r29
    298e:	cf 93       	push	r28
    2990:	cd b7       	in	r28, 0x3d	; 61
    2992:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2994:	80 91 7c 00 	lds	r24, 0x007C
    2998:	90 91 7d 00 	lds	r25, 0x007D
    299c:	00 97       	sbiw	r24, 0x00	; 0
    299e:	29 f0       	breq	.+10     	; 0x29aa <__vector_9+0x40>
	{
		(*g_callBack_ptr)() ;
    29a0:	e0 91 7c 00 	lds	r30, 0x007C
    29a4:	f0 91 7d 00 	lds	r31, 0x007D
    29a8:	09 95       	icall
	}
}
    29aa:	cf 91       	pop	r28
    29ac:	df 91       	pop	r29
    29ae:	ff 91       	pop	r31
    29b0:	ef 91       	pop	r30
    29b2:	bf 91       	pop	r27
    29b4:	af 91       	pop	r26
    29b6:	9f 91       	pop	r25
    29b8:	8f 91       	pop	r24
    29ba:	7f 91       	pop	r23
    29bc:	6f 91       	pop	r22
    29be:	5f 91       	pop	r21
    29c0:	4f 91       	pop	r20
    29c2:	3f 91       	pop	r19
    29c4:	2f 91       	pop	r18
    29c6:	0f 90       	pop	r0
    29c8:	0f be       	out	0x3f, r0	; 63
    29ca:	0f 90       	pop	r0
    29cc:	1f 90       	pop	r1
    29ce:	18 95       	reti

000029d0 <__vector_7>:

ISR(TIMER1_COMPA_vect) /* ISR For Compare1A Mode */
{
    29d0:	1f 92       	push	r1
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	0f 92       	push	r0
    29d8:	11 24       	eor	r1, r1
    29da:	2f 93       	push	r18
    29dc:	3f 93       	push	r19
    29de:	4f 93       	push	r20
    29e0:	5f 93       	push	r21
    29e2:	6f 93       	push	r22
    29e4:	7f 93       	push	r23
    29e6:	8f 93       	push	r24
    29e8:	9f 93       	push	r25
    29ea:	af 93       	push	r26
    29ec:	bf 93       	push	r27
    29ee:	ef 93       	push	r30
    29f0:	ff 93       	push	r31
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    29fa:	80 91 7c 00 	lds	r24, 0x007C
    29fe:	90 91 7d 00 	lds	r25, 0x007D
    2a02:	00 97       	sbiw	r24, 0x00	; 0
    2a04:	29 f0       	breq	.+10     	; 0x2a10 <__vector_7+0x40>
	{
		(*g_callBack_ptr)() ;
    2a06:	e0 91 7c 00 	lds	r30, 0x007C
    2a0a:	f0 91 7d 00 	lds	r31, 0x007D
    2a0e:	09 95       	icall
	}
}
    2a10:	cf 91       	pop	r28
    2a12:	df 91       	pop	r29
    2a14:	ff 91       	pop	r31
    2a16:	ef 91       	pop	r30
    2a18:	bf 91       	pop	r27
    2a1a:	af 91       	pop	r26
    2a1c:	9f 91       	pop	r25
    2a1e:	8f 91       	pop	r24
    2a20:	7f 91       	pop	r23
    2a22:	6f 91       	pop	r22
    2a24:	5f 91       	pop	r21
    2a26:	4f 91       	pop	r20
    2a28:	3f 91       	pop	r19
    2a2a:	2f 91       	pop	r18
    2a2c:	0f 90       	pop	r0
    2a2e:	0f be       	out	0x3f, r0	; 63
    2a30:	0f 90       	pop	r0
    2a32:	1f 90       	pop	r1
    2a34:	18 95       	reti

00002a36 <__vector_8>:

ISR(TIMER1_COMPB_vect) /* ISR For Compare1B Mode */
{
    2a36:	1f 92       	push	r1
    2a38:	0f 92       	push	r0
    2a3a:	0f b6       	in	r0, 0x3f	; 63
    2a3c:	0f 92       	push	r0
    2a3e:	11 24       	eor	r1, r1
    2a40:	2f 93       	push	r18
    2a42:	3f 93       	push	r19
    2a44:	4f 93       	push	r20
    2a46:	5f 93       	push	r21
    2a48:	6f 93       	push	r22
    2a4a:	7f 93       	push	r23
    2a4c:	8f 93       	push	r24
    2a4e:	9f 93       	push	r25
    2a50:	af 93       	push	r26
    2a52:	bf 93       	push	r27
    2a54:	ef 93       	push	r30
    2a56:	ff 93       	push	r31
    2a58:	df 93       	push	r29
    2a5a:	cf 93       	push	r28
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
	if(g_callBack_ptr != NULL_PTR)
    2a60:	80 91 7c 00 	lds	r24, 0x007C
    2a64:	90 91 7d 00 	lds	r25, 0x007D
    2a68:	00 97       	sbiw	r24, 0x00	; 0
    2a6a:	29 f0       	breq	.+10     	; 0x2a76 <__vector_8+0x40>
	{
		(*g_callBack_ptr)() ;
    2a6c:	e0 91 7c 00 	lds	r30, 0x007C
    2a70:	f0 91 7d 00 	lds	r31, 0x007D
    2a74:	09 95       	icall
	}
}
    2a76:	cf 91       	pop	r28
    2a78:	df 91       	pop	r29
    2a7a:	ff 91       	pop	r31
    2a7c:	ef 91       	pop	r30
    2a7e:	bf 91       	pop	r27
    2a80:	af 91       	pop	r26
    2a82:	9f 91       	pop	r25
    2a84:	8f 91       	pop	r24
    2a86:	7f 91       	pop	r23
    2a88:	6f 91       	pop	r22
    2a8a:	5f 91       	pop	r21
    2a8c:	4f 91       	pop	r20
    2a8e:	3f 91       	pop	r19
    2a90:	2f 91       	pop	r18
    2a92:	0f 90       	pop	r0
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	0f 90       	pop	r0
    2a98:	1f 90       	pop	r1
    2a9a:	18 95       	reti

00002a9c <Timer1_init>:

void Timer1_init(const Timer1_ConfigType * Config_ptr)
{
    2a9c:	df 93       	push	r29
    2a9e:	cf 93       	push	r28
    2aa0:	00 d0       	rcall	.+0      	; 0x2aa2 <Timer1_init+0x6>
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	9a 83       	std	Y+2, r25	; 0x02
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	/* Non-PWM MODE */
	TCCR1A = (1<<FOC1A) | (1<<FOC1B) ;
    2aaa:	ef e4       	ldi	r30, 0x4F	; 79
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	8c e0       	ldi	r24, 0x0C	; 12
    2ab0:	80 83       	st	Z, r24

	/* Configure Mode For Timer 1 , (WGM10:WGM11) Bits */
	TCCR1A = (TCCR1A & 0xFC) | (Config_ptr->mode & 0x03) ;
    2ab2:	af e4       	ldi	r26, 0x4F	; 79
    2ab4:	b0 e0       	ldi	r27, 0x00	; 0
    2ab6:	ef e4       	ldi	r30, 0x4F	; 79
    2ab8:	f0 e0       	ldi	r31, 0x00	; 0
    2aba:	80 81       	ld	r24, Z
    2abc:	98 2f       	mov	r25, r24
    2abe:	9c 7f       	andi	r25, 0xFC	; 252
    2ac0:	e9 81       	ldd	r30, Y+1	; 0x01
    2ac2:	fa 81       	ldd	r31, Y+2	; 0x02
    2ac4:	85 81       	ldd	r24, Z+5	; 0x05
    2ac6:	83 70       	andi	r24, 0x03	; 3
    2ac8:	89 2b       	or	r24, r25
    2aca:	8c 93       	st	X, r24

	/* Configure Mode For Timer 1 , (WGM12:WGM13) Bits */
	TCCR1B = (TCCR1B & 0xE7) |((Config_ptr->mode & 0x0C)<<1) ;
    2acc:	ae e4       	ldi	r26, 0x4E	; 78
    2ace:	b0 e0       	ldi	r27, 0x00	; 0
    2ad0:	ee e4       	ldi	r30, 0x4E	; 78
    2ad2:	f0 e0       	ldi	r31, 0x00	; 0
    2ad4:	80 81       	ld	r24, Z
    2ad6:	28 2f       	mov	r18, r24
    2ad8:	27 7e       	andi	r18, 0xE7	; 231
    2ada:	e9 81       	ldd	r30, Y+1	; 0x01
    2adc:	fa 81       	ldd	r31, Y+2	; 0x02
    2ade:	85 81       	ldd	r24, Z+5	; 0x05
    2ae0:	88 2f       	mov	r24, r24
    2ae2:	90 e0       	ldi	r25, 0x00	; 0
    2ae4:	8c 70       	andi	r24, 0x0C	; 12
    2ae6:	90 70       	andi	r25, 0x00	; 0
    2ae8:	88 0f       	add	r24, r24
    2aea:	99 1f       	adc	r25, r25
    2aec:	82 2b       	or	r24, r18
    2aee:	8c 93       	st	X, r24

	TCNT1 = Config_ptr->initial_value ; /* Configure Initial Value For Timer 1 */
    2af0:	ac e4       	ldi	r26, 0x4C	; 76
    2af2:	b0 e0       	ldi	r27, 0x00	; 0
    2af4:	e9 81       	ldd	r30, Y+1	; 0x01
    2af6:	fa 81       	ldd	r31, Y+2	; 0x02
    2af8:	80 81       	ld	r24, Z
    2afa:	91 81       	ldd	r25, Z+1	; 0x01
    2afc:	11 96       	adiw	r26, 0x01	; 1
    2afe:	9c 93       	st	X, r25
    2b00:	8e 93       	st	-X, r24

	/* Check The Mode Of Timer */
	if(Config_ptr->mode == Normal)
    2b02:	e9 81       	ldd	r30, Y+1	; 0x01
    2b04:	fa 81       	ldd	r31, Y+2	; 0x02
    2b06:	85 81       	ldd	r24, Z+5	; 0x05
    2b08:	88 23       	and	r24, r24
    2b0a:	29 f4       	brne	.+10     	; 0x2b16 <Timer1_init+0x7a>
	{
		TIMSK = (1<<TOIE1) ; /* Enable Timer 1 Normal Mode Interrupt */
    2b0c:	e9 e5       	ldi	r30, 0x59	; 89
    2b0e:	f0 e0       	ldi	r31, 0x00	; 0
    2b10:	84 e0       	ldi	r24, 0x04	; 4
    2b12:	80 83       	st	Z, r24
    2b14:	12 c0       	rjmp	.+36     	; 0x2b3a <Timer1_init+0x9e>
	}
	else if (Config_ptr->mode == CTC)
    2b16:	e9 81       	ldd	r30, Y+1	; 0x01
    2b18:	fa 81       	ldd	r31, Y+2	; 0x02
    2b1a:	85 81       	ldd	r24, Z+5	; 0x05
    2b1c:	84 30       	cpi	r24, 0x04	; 4
    2b1e:	69 f4       	brne	.+26     	; 0x2b3a <Timer1_init+0x9e>
	{
#ifdef COMPARE1A
		/* Configure Compare Value in Compare1A Register */
		OCR1A = Config_ptr->compare_value ;
    2b20:	aa e4       	ldi	r26, 0x4A	; 74
    2b22:	b0 e0       	ldi	r27, 0x00	; 0
    2b24:	e9 81       	ldd	r30, Y+1	; 0x01
    2b26:	fa 81       	ldd	r31, Y+2	; 0x02
    2b28:	82 81       	ldd	r24, Z+2	; 0x02
    2b2a:	93 81       	ldd	r25, Z+3	; 0x03
    2b2c:	11 96       	adiw	r26, 0x01	; 1
    2b2e:	9c 93       	st	X, r25
    2b30:	8e 93       	st	-X, r24

		TIMSK = (1<<OCIE1A); /* Enable Timer 1 Compare1A Mode Interrupt */
    2b32:	e9 e5       	ldi	r30, 0x59	; 89
    2b34:	f0 e0       	ldi	r31, 0x00	; 0
    2b36:	80 e1       	ldi	r24, 0x10	; 16
    2b38:	80 83       	st	Z, r24
		TIMSK = (1<<OCIE1B); /* Enable Timer 1 Compare1A Mode Interrupt */
#endif
	}

	/* Configure Pre-scaler For Timer 1 , (CS10:CS12) Bits */
	TCCR1B = (TCCR1B & 0xF8) | (Config_ptr->prescaler);
    2b3a:	ae e4       	ldi	r26, 0x4E	; 78
    2b3c:	b0 e0       	ldi	r27, 0x00	; 0
    2b3e:	ee e4       	ldi	r30, 0x4E	; 78
    2b40:	f0 e0       	ldi	r31, 0x00	; 0
    2b42:	80 81       	ld	r24, Z
    2b44:	98 2f       	mov	r25, r24
    2b46:	98 7f       	andi	r25, 0xF8	; 248
    2b48:	e9 81       	ldd	r30, Y+1	; 0x01
    2b4a:	fa 81       	ldd	r31, Y+2	; 0x02
    2b4c:	84 81       	ldd	r24, Z+4	; 0x04
    2b4e:	89 2b       	or	r24, r25
    2b50:	8c 93       	st	X, r24
}
    2b52:	0f 90       	pop	r0
    2b54:	0f 90       	pop	r0
    2b56:	cf 91       	pop	r28
    2b58:	df 91       	pop	r29
    2b5a:	08 95       	ret

00002b5c <Timer1_deInit>:

void Timer1_deInit(void){
    2b5c:	df 93       	push	r29
    2b5e:	cf 93       	push	r28
    2b60:	cd b7       	in	r28, 0x3d	; 61
    2b62:	de b7       	in	r29, 0x3e	; 62
	TCCR1A =0;
    2b64:	ef e4       	ldi	r30, 0x4F	; 79
    2b66:	f0 e0       	ldi	r31, 0x00	; 0
    2b68:	10 82       	st	Z, r1
	TCCR1B =0;
    2b6a:	ee e4       	ldi	r30, 0x4E	; 78
    2b6c:	f0 e0       	ldi	r31, 0x00	; 0
    2b6e:	10 82       	st	Z, r1
	TIMSK =0;
    2b70:	e9 e5       	ldi	r30, 0x59	; 89
    2b72:	f0 e0       	ldi	r31, 0x00	; 0
    2b74:	10 82       	st	Z, r1

}
    2b76:	cf 91       	pop	r28
    2b78:	df 91       	pop	r29
    2b7a:	08 95       	ret

00002b7c <Timer1_setCallBack>:

void Timer1_setCallBack(void (*a_ptr)(void))
{
    2b7c:	df 93       	push	r29
    2b7e:	cf 93       	push	r28
    2b80:	00 d0       	rcall	.+0      	; 0x2b82 <Timer1_setCallBack+0x6>
    2b82:	cd b7       	in	r28, 0x3d	; 61
    2b84:	de b7       	in	r29, 0x3e	; 62
    2b86:	9a 83       	std	Y+2, r25	; 0x02
    2b88:	89 83       	std	Y+1, r24	; 0x01
	g_callBack_ptr = a_ptr ;
    2b8a:	89 81       	ldd	r24, Y+1	; 0x01
    2b8c:	9a 81       	ldd	r25, Y+2	; 0x02
    2b8e:	90 93 7d 00 	sts	0x007D, r25
    2b92:	80 93 7c 00 	sts	0x007C, r24
}
    2b96:	0f 90       	pop	r0
    2b98:	0f 90       	pop	r0
    2b9a:	cf 91       	pop	r28
    2b9c:	df 91       	pop	r29
    2b9e:	08 95       	ret

00002ba0 <TWI_init>:
#include "twi.h"
#include "common_macros.h"
#include <avr/io.h>

void TWI_init(void)
{
    2ba0:	df 93       	push	r29
    2ba2:	cf 93       	push	r28
    2ba4:	cd b7       	in	r28, 0x3d	; 61
    2ba6:	de b7       	in	r29, 0x3e	; 62
    /* Bit Rate: 400.000 kbps using zero pre-scaler TWPS=00 and F_CPU=8Mhz */
    TWBR = 0x02;
    2ba8:	e0 e2       	ldi	r30, 0x20	; 32
    2baa:	f0 e0       	ldi	r31, 0x00	; 0
    2bac:	82 e0       	ldi	r24, 0x02	; 2
    2bae:	80 83       	st	Z, r24
	TWSR = 0x00;
    2bb0:	e1 e2       	ldi	r30, 0x21	; 33
    2bb2:	f0 e0       	ldi	r31, 0x00	; 0
    2bb4:	10 82       	st	Z, r1

    /* Two Wire Bus address my address if any master device want to call me: 0x1 (used in case this MC is a slave device)
       General Call Recognition: Off */
    TWAR = 0b00000010; // my address = 0x01 :)
    2bb6:	e2 e2       	ldi	r30, 0x22	; 34
    2bb8:	f0 e0       	ldi	r31, 0x00	; 0
    2bba:	82 e0       	ldi	r24, 0x02	; 2
    2bbc:	80 83       	st	Z, r24

    TWCR = (1<<TWEN); /* enable TWI */
    2bbe:	e6 e5       	ldi	r30, 0x56	; 86
    2bc0:	f0 e0       	ldi	r31, 0x00	; 0
    2bc2:	84 e0       	ldi	r24, 0x04	; 4
    2bc4:	80 83       	st	Z, r24
}
    2bc6:	cf 91       	pop	r28
    2bc8:	df 91       	pop	r29
    2bca:	08 95       	ret

00002bcc <TWI_start>:

void TWI_start(void)
{
    2bcc:	df 93       	push	r29
    2bce:	cf 93       	push	r28
    2bd0:	cd b7       	in	r28, 0x3d	; 61
    2bd2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the start bit TWINT=1
	 * send the start bit by TWSTA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTA) | (1 << TWEN);
    2bd4:	e6 e5       	ldi	r30, 0x56	; 86
    2bd6:	f0 e0       	ldi	r31, 0x00	; 0
    2bd8:	84 ea       	ldi	r24, 0xA4	; 164
    2bda:	80 83       	st	Z, r24

    /* Wait for TWINT flag set in TWCR Register (start bit is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2bdc:	e6 e5       	ldi	r30, 0x56	; 86
    2bde:	f0 e0       	ldi	r31, 0x00	; 0
    2be0:	80 81       	ld	r24, Z
    2be2:	88 23       	and	r24, r24
    2be4:	dc f7       	brge	.-10     	; 0x2bdc <TWI_start+0x10>
}
    2be6:	cf 91       	pop	r28
    2be8:	df 91       	pop	r29
    2bea:	08 95       	ret

00002bec <TWI_stop>:

void TWI_stop(void)
{
    2bec:	df 93       	push	r29
    2bee:	cf 93       	push	r28
    2bf0:	cd b7       	in	r28, 0x3d	; 61
    2bf2:	de b7       	in	r29, 0x3e	; 62
    /*
	 * Clear the TWINT flag before sending the stop bit TWINT=1
	 * send the stop bit by TWSTO=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWSTO) | (1 << TWEN);
    2bf4:	e6 e5       	ldi	r30, 0x56	; 86
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	84 e9       	ldi	r24, 0x94	; 148
    2bfa:	80 83       	st	Z, r24
}
    2bfc:	cf 91       	pop	r28
    2bfe:	df 91       	pop	r29
    2c00:	08 95       	ret

00002c02 <TWI_writeByte>:

void TWI_writeByte(uint8 data)
{
    2c02:	df 93       	push	r29
    2c04:	cf 93       	push	r28
    2c06:	0f 92       	push	r0
    2c08:	cd b7       	in	r28, 0x3d	; 61
    2c0a:	de b7       	in	r29, 0x3e	; 62
    2c0c:	89 83       	std	Y+1, r24	; 0x01
    /* Put data On TWI data Register */
    TWDR = data;
    2c0e:	e3 e2       	ldi	r30, 0x23	; 35
    2c10:	f0 e0       	ldi	r31, 0x00	; 0
    2c12:	89 81       	ldd	r24, Y+1	; 0x01
    2c14:	80 83       	st	Z, r24
    /*
	 * Clear the TWINT flag before sending the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c16:	e6 e5       	ldi	r30, 0x56	; 86
    2c18:	f0 e0       	ldi	r31, 0x00	; 0
    2c1a:	84 e8       	ldi	r24, 0x84	; 132
    2c1c:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register(data is send successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c1e:	e6 e5       	ldi	r30, 0x56	; 86
    2c20:	f0 e0       	ldi	r31, 0x00	; 0
    2c22:	80 81       	ld	r24, Z
    2c24:	88 23       	and	r24, r24
    2c26:	dc f7       	brge	.-10     	; 0x2c1e <TWI_writeByte+0x1c>
}
    2c28:	0f 90       	pop	r0
    2c2a:	cf 91       	pop	r28
    2c2c:	df 91       	pop	r29
    2c2e:	08 95       	ret

00002c30 <TWI_readByteWithACK>:

uint8 TWI_readByteWithACK(void)
{
    2c30:	df 93       	push	r29
    2c32:	cf 93       	push	r28
    2c34:	cd b7       	in	r28, 0x3d	; 61
    2c36:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable sending ACK after reading or receiving data TWEA=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN) | (1 << TWEA);
    2c38:	e6 e5       	ldi	r30, 0x56	; 86
    2c3a:	f0 e0       	ldi	r31, 0x00	; 0
    2c3c:	84 ec       	ldi	r24, 0xC4	; 196
    2c3e:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c40:	e6 e5       	ldi	r30, 0x56	; 86
    2c42:	f0 e0       	ldi	r31, 0x00	; 0
    2c44:	80 81       	ld	r24, Z
    2c46:	88 23       	and	r24, r24
    2c48:	dc f7       	brge	.-10     	; 0x2c40 <TWI_readByteWithACK+0x10>
    /* Read Data */
    return TWDR;
    2c4a:	e3 e2       	ldi	r30, 0x23	; 35
    2c4c:	f0 e0       	ldi	r31, 0x00	; 0
    2c4e:	80 81       	ld	r24, Z
}
    2c50:	cf 91       	pop	r28
    2c52:	df 91       	pop	r29
    2c54:	08 95       	ret

00002c56 <TWI_readByteWithNACK>:

uint8 TWI_readByteWithNACK(void)
{
    2c56:	df 93       	push	r29
    2c58:	cf 93       	push	r28
    2c5a:	cd b7       	in	r28, 0x3d	; 61
    2c5c:	de b7       	in	r29, 0x3e	; 62
	/*
	 * Clear the TWINT flag before reading the data TWINT=1
	 * Enable TWI Module TWEN=1
	 */
    TWCR = (1 << TWINT) | (1 << TWEN);
    2c5e:	e6 e5       	ldi	r30, 0x56	; 86
    2c60:	f0 e0       	ldi	r31, 0x00	; 0
    2c62:	84 e8       	ldi	r24, 0x84	; 132
    2c64:	80 83       	st	Z, r24
    /* Wait for TWINT flag set in TWCR Register (data received successfully) */
    while(BIT_IS_CLEAR(TWCR,TWINT));
    2c66:	e6 e5       	ldi	r30, 0x56	; 86
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	88 23       	and	r24, r24
    2c6e:	dc f7       	brge	.-10     	; 0x2c66 <TWI_readByteWithNACK+0x10>
    /* Read Data */
    return TWDR;
    2c70:	e3 e2       	ldi	r30, 0x23	; 35
    2c72:	f0 e0       	ldi	r31, 0x00	; 0
    2c74:	80 81       	ld	r24, Z
}
    2c76:	cf 91       	pop	r28
    2c78:	df 91       	pop	r29
    2c7a:	08 95       	ret

00002c7c <TWI_getStatus>:

uint8 TWI_getStatus(void)
{
    2c7c:	df 93       	push	r29
    2c7e:	cf 93       	push	r28
    2c80:	0f 92       	push	r0
    2c82:	cd b7       	in	r28, 0x3d	; 61
    2c84:	de b7       	in	r29, 0x3e	; 62
    uint8 status;
    /* masking to eliminate first 3 bits and get the last 5 bits (status bits) */
    status = TWSR & 0xF8;
    2c86:	e1 e2       	ldi	r30, 0x21	; 33
    2c88:	f0 e0       	ldi	r31, 0x00	; 0
    2c8a:	80 81       	ld	r24, Z
    2c8c:	88 7f       	andi	r24, 0xF8	; 248
    2c8e:	89 83       	std	Y+1, r24	; 0x01
    return status;
    2c90:	89 81       	ldd	r24, Y+1	; 0x01
}
    2c92:	0f 90       	pop	r0
    2c94:	cf 91       	pop	r28
    2c96:	df 91       	pop	r29
    2c98:	08 95       	ret

00002c9a <UART_init>:
 * 1. Setup the Frame format like number of data bits, parity bit type and number of stop bits.
 * 2. Enable the UART.
 * 3. Setup the UART baud rate.
 */
void UART_init(const UART_configType *config_ptr)
{
    2c9a:	df 93       	push	r29
    2c9c:	cf 93       	push	r28
    2c9e:	00 d0       	rcall	.+0      	; 0x2ca0 <UART_init+0x6>
    2ca0:	00 d0       	rcall	.+0      	; 0x2ca2 <UART_init+0x8>
    2ca2:	cd b7       	in	r28, 0x3d	; 61
    2ca4:	de b7       	in	r29, 0x3e	; 62
    2ca6:	9c 83       	std	Y+4, r25	; 0x04
    2ca8:	8b 83       	std	Y+3, r24	; 0x03
	uint16 ubrr_value = 0;
    2caa:	1a 82       	std	Y+2, r1	; 0x02
    2cac:	19 82       	std	Y+1, r1	; 0x01

	/* U2X = 1 for double transmission speed */
	UCSRA = (1<<U2X);
    2cae:	eb e2       	ldi	r30, 0x2B	; 43
    2cb0:	f0 e0       	ldi	r31, 0x00	; 0
    2cb2:	82 e0       	ldi	r24, 0x02	; 2
    2cb4:	80 83       	st	Z, r24
	 * RXEN  = 1 Receiver Enable
	 * RXEN  = 1 Transmitter Enable
	 * UCSZ2 = 0 For 8-bit data mode
	 * RXB8 & TXB8 not used for 8-bit data mode
	 ***********************************************************************/
	UCSRB = (1<<RXEN) | (1<<TXEN);
    2cb6:	ea e2       	ldi	r30, 0x2A	; 42
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	88 e1       	ldi	r24, 0x18	; 24
    2cbc:	80 83       	st	Z, r24

	if(config_ptr->bit_data==9){
    2cbe:	eb 81       	ldd	r30, Y+3	; 0x03
    2cc0:	fc 81       	ldd	r31, Y+4	; 0x04
    2cc2:	80 81       	ld	r24, Z
    2cc4:	89 30       	cpi	r24, 0x09	; 9
    2cc6:	21 f5       	brne	.+72     	; 0x2d10 <UART_init+0x76>
			UCSRB|=(1<<UCSZ2);
    2cc8:	aa e2       	ldi	r26, 0x2A	; 42
    2cca:	b0 e0       	ldi	r27, 0x00	; 0
    2ccc:	ea e2       	ldi	r30, 0x2A	; 42
    2cce:	f0 e0       	ldi	r31, 0x00	; 0
    2cd0:	80 81       	ld	r24, Z
    2cd2:	84 60       	ori	r24, 0x04	; 4
    2cd4:	8c 93       	st	X, r24
			UCSRC=(1<<URSEL)|(1<<UCSZ0)|(1<<UCSZ1)|(config_ptr->stop_bit<<3)|(config_ptr->parity<<4);
    2cd6:	a0 e4       	ldi	r26, 0x40	; 64
    2cd8:	b0 e0       	ldi	r27, 0x00	; 0
    2cda:	eb 81       	ldd	r30, Y+3	; 0x03
    2cdc:	fc 81       	ldd	r31, Y+4	; 0x04
    2cde:	82 81       	ldd	r24, Z+2	; 0x02
    2ce0:	88 2f       	mov	r24, r24
    2ce2:	90 e0       	ldi	r25, 0x00	; 0
    2ce4:	88 0f       	add	r24, r24
    2ce6:	99 1f       	adc	r25, r25
    2ce8:	88 0f       	add	r24, r24
    2cea:	99 1f       	adc	r25, r25
    2cec:	88 0f       	add	r24, r24
    2cee:	99 1f       	adc	r25, r25
    2cf0:	28 2f       	mov	r18, r24
    2cf2:	26 68       	ori	r18, 0x86	; 134
    2cf4:	eb 81       	ldd	r30, Y+3	; 0x03
    2cf6:	fc 81       	ldd	r31, Y+4	; 0x04
    2cf8:	81 81       	ldd	r24, Z+1	; 0x01
    2cfa:	88 2f       	mov	r24, r24
    2cfc:	90 e0       	ldi	r25, 0x00	; 0
    2cfe:	82 95       	swap	r24
    2d00:	92 95       	swap	r25
    2d02:	90 7f       	andi	r25, 0xF0	; 240
    2d04:	98 27       	eor	r25, r24
    2d06:	80 7f       	andi	r24, 0xF0	; 240
    2d08:	98 27       	eor	r25, r24
    2d0a:	82 2b       	or	r24, r18
    2d0c:	8c 93       	st	X, r24
    2d0e:	1c c0       	rjmp	.+56     	; 0x2d48 <UART_init+0xae>
	 * UPM1:0  = 00 Disable parity bit
	 * USBS    = 0 One stop bit
	 * UCSZ1:0 = 11 For 8-bit data mode
	 * UCPOL   = 0 Used with the Synchronous operation only
	 ***********************************************************************/
	UCSRC = (1<<URSEL) | (1<<UCSZ0) | (1<<UCSZ1)|(config_ptr->stop_bit<<3)|(config_ptr->parity<<4);
    2d10:	a0 e4       	ldi	r26, 0x40	; 64
    2d12:	b0 e0       	ldi	r27, 0x00	; 0
    2d14:	eb 81       	ldd	r30, Y+3	; 0x03
    2d16:	fc 81       	ldd	r31, Y+4	; 0x04
    2d18:	82 81       	ldd	r24, Z+2	; 0x02
    2d1a:	88 2f       	mov	r24, r24
    2d1c:	90 e0       	ldi	r25, 0x00	; 0
    2d1e:	88 0f       	add	r24, r24
    2d20:	99 1f       	adc	r25, r25
    2d22:	88 0f       	add	r24, r24
    2d24:	99 1f       	adc	r25, r25
    2d26:	88 0f       	add	r24, r24
    2d28:	99 1f       	adc	r25, r25
    2d2a:	28 2f       	mov	r18, r24
    2d2c:	26 68       	ori	r18, 0x86	; 134
    2d2e:	eb 81       	ldd	r30, Y+3	; 0x03
    2d30:	fc 81       	ldd	r31, Y+4	; 0x04
    2d32:	81 81       	ldd	r24, Z+1	; 0x01
    2d34:	88 2f       	mov	r24, r24
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	82 95       	swap	r24
    2d3a:	92 95       	swap	r25
    2d3c:	90 7f       	andi	r25, 0xF0	; 240
    2d3e:	98 27       	eor	r25, r24
    2d40:	80 7f       	andi	r24, 0xF0	; 240
    2d42:	98 27       	eor	r25, r24
    2d44:	82 2b       	or	r24, r18
    2d46:	8c 93       	st	X, r24
	}
	/* Calculate the UBRR register value */
	ubrr_value = (uint16)(((F_CPU / (config_ptr->UART_BaudRate * 8UL))) - 1);
    2d48:	eb 81       	ldd	r30, Y+3	; 0x03
    2d4a:	fc 81       	ldd	r31, Y+4	; 0x04
    2d4c:	83 81       	ldd	r24, Z+3	; 0x03
    2d4e:	94 81       	ldd	r25, Z+4	; 0x04
    2d50:	a5 81       	ldd	r26, Z+5	; 0x05
    2d52:	b6 81       	ldd	r27, Z+6	; 0x06
    2d54:	88 0f       	add	r24, r24
    2d56:	99 1f       	adc	r25, r25
    2d58:	aa 1f       	adc	r26, r26
    2d5a:	bb 1f       	adc	r27, r27
    2d5c:	88 0f       	add	r24, r24
    2d5e:	99 1f       	adc	r25, r25
    2d60:	aa 1f       	adc	r26, r26
    2d62:	bb 1f       	adc	r27, r27
    2d64:	88 0f       	add	r24, r24
    2d66:	99 1f       	adc	r25, r25
    2d68:	aa 1f       	adc	r26, r26
    2d6a:	bb 1f       	adc	r27, r27
    2d6c:	9c 01       	movw	r18, r24
    2d6e:	ad 01       	movw	r20, r26
    2d70:	80 e0       	ldi	r24, 0x00	; 0
    2d72:	92 e1       	ldi	r25, 0x12	; 18
    2d74:	aa e7       	ldi	r26, 0x7A	; 122
    2d76:	b0 e0       	ldi	r27, 0x00	; 0
    2d78:	bc 01       	movw	r22, r24
    2d7a:	cd 01       	movw	r24, r26
    2d7c:	0e 94 69 17 	call	0x2ed2	; 0x2ed2 <__udivmodsi4>
    2d80:	da 01       	movw	r26, r20
    2d82:	c9 01       	movw	r24, r18
    2d84:	01 97       	sbiw	r24, 0x01	; 1
    2d86:	9a 83       	std	Y+2, r25	; 0x02
    2d88:	89 83       	std	Y+1, r24	; 0x01

	/* First 8 bits from the BAUD_PRESCALE inside UBRRL and last 4 bits in UBRRH*/
	UBRRH = ubrr_value>>8;
    2d8a:	e0 e4       	ldi	r30, 0x40	; 64
    2d8c:	f0 e0       	ldi	r31, 0x00	; 0
    2d8e:	89 81       	ldd	r24, Y+1	; 0x01
    2d90:	9a 81       	ldd	r25, Y+2	; 0x02
    2d92:	89 2f       	mov	r24, r25
    2d94:	99 27       	eor	r25, r25
    2d96:	80 83       	st	Z, r24
	UBRRL = ubrr_value;
    2d98:	e9 e2       	ldi	r30, 0x29	; 41
    2d9a:	f0 e0       	ldi	r31, 0x00	; 0
    2d9c:	89 81       	ldd	r24, Y+1	; 0x01
    2d9e:	80 83       	st	Z, r24
}
    2da0:	0f 90       	pop	r0
    2da2:	0f 90       	pop	r0
    2da4:	0f 90       	pop	r0
    2da6:	0f 90       	pop	r0
    2da8:	cf 91       	pop	r28
    2daa:	df 91       	pop	r29
    2dac:	08 95       	ret

00002dae <UART_sendByte>:
/*
 * Description :
 * Functional responsible for send byte to another UART device.
 */
void UART_sendByte(const uint8 data)
{
    2dae:	df 93       	push	r29
    2db0:	cf 93       	push	r28
    2db2:	0f 92       	push	r0
    2db4:	cd b7       	in	r28, 0x3d	; 61
    2db6:	de b7       	in	r29, 0x3e	; 62
    2db8:	89 83       	std	Y+1, r24	; 0x01
	/*
	 * UDRE flag is set when the Tx buffer (UDR) is empty and ready for
	 * transmitting a new byte so wait until this flag is set to one
	 */
	while(BIT_IS_CLEAR(UCSRA,UDRE)){}
    2dba:	eb e2       	ldi	r30, 0x2B	; 43
    2dbc:	f0 e0       	ldi	r31, 0x00	; 0
    2dbe:	80 81       	ld	r24, Z
    2dc0:	88 2f       	mov	r24, r24
    2dc2:	90 e0       	ldi	r25, 0x00	; 0
    2dc4:	80 72       	andi	r24, 0x20	; 32
    2dc6:	90 70       	andi	r25, 0x00	; 0
    2dc8:	00 97       	sbiw	r24, 0x00	; 0
    2dca:	b9 f3       	breq	.-18     	; 0x2dba <UART_sendByte+0xc>

	/*
	 * Put the required data in the UDR register and it also clear the UDRE flag as
	 * the UDR register is not empty now
	 */
	UDR = data;
    2dcc:	ec e2       	ldi	r30, 0x2C	; 44
    2dce:	f0 e0       	ldi	r31, 0x00	; 0
    2dd0:	89 81       	ldd	r24, Y+1	; 0x01
    2dd2:	80 83       	st	Z, r24
	/************************* Another Method *************************
	UDR = data;
	while(BIT_IS_CLEAR(UCSRA,TXC)){} // Wait until the transmission is complete TXC = 1
	SET_BIT(UCSRA,TXC); // Clear the TXC flag
	*******************************************************************/
}
    2dd4:	0f 90       	pop	r0
    2dd6:	cf 91       	pop	r28
    2dd8:	df 91       	pop	r29
    2dda:	08 95       	ret

00002ddc <UART_recieveByte>:
/*
 * Description :
 * Functional responsible for receive byte from another UART device.
 */
uint8 UART_recieveByte(void)
{
    2ddc:	df 93       	push	r29
    2dde:	cf 93       	push	r28
    2de0:	cd b7       	in	r28, 0x3d	; 61
    2de2:	de b7       	in	r29, 0x3e	; 62
	/* RXC flag is set when the UART receive data so wait until this flag is set to one */
	while(BIT_IS_CLEAR(UCSRA,RXC)){}
    2de4:	eb e2       	ldi	r30, 0x2B	; 43
    2de6:	f0 e0       	ldi	r31, 0x00	; 0
    2de8:	80 81       	ld	r24, Z
    2dea:	88 23       	and	r24, r24
    2dec:	dc f7       	brge	.-10     	; 0x2de4 <UART_recieveByte+0x8>

	/*
	 * Read the received data from the Rx buffer (UDR)
	 * The RXC flag will be cleared after read the data
	 */
    return UDR;
    2dee:	ec e2       	ldi	r30, 0x2C	; 44
    2df0:	f0 e0       	ldi	r31, 0x00	; 0
    2df2:	80 81       	ld	r24, Z
}
    2df4:	cf 91       	pop	r28
    2df6:	df 91       	pop	r29
    2df8:	08 95       	ret

00002dfa <UART_sendString>:
/*
 * Description :
 * Send the required string through UART to the other UART device.
 */
void UART_sendString(const uint8 *Str)
{
    2dfa:	df 93       	push	r29
    2dfc:	cf 93       	push	r28
    2dfe:	00 d0       	rcall	.+0      	; 0x2e00 <UART_sendString+0x6>
    2e00:	0f 92       	push	r0
    2e02:	cd b7       	in	r28, 0x3d	; 61
    2e04:	de b7       	in	r29, 0x3e	; 62
    2e06:	9b 83       	std	Y+3, r25	; 0x03
    2e08:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e0a:	19 82       	std	Y+1, r1	; 0x01
    2e0c:	0e c0       	rjmp	.+28     	; 0x2e2a <UART_sendString+0x30>

	/* Send the whole string */
	while(Str[i] != '\0')
	{
		UART_sendByte(Str[i]);
    2e0e:	89 81       	ldd	r24, Y+1	; 0x01
    2e10:	28 2f       	mov	r18, r24
    2e12:	30 e0       	ldi	r19, 0x00	; 0
    2e14:	8a 81       	ldd	r24, Y+2	; 0x02
    2e16:	9b 81       	ldd	r25, Y+3	; 0x03
    2e18:	fc 01       	movw	r30, r24
    2e1a:	e2 0f       	add	r30, r18
    2e1c:	f3 1f       	adc	r31, r19
    2e1e:	80 81       	ld	r24, Z
    2e20:	0e 94 d7 16 	call	0x2dae	; 0x2dae <UART_sendByte>
		i++;
    2e24:	89 81       	ldd	r24, Y+1	; 0x01
    2e26:	8f 5f       	subi	r24, 0xFF	; 255
    2e28:	89 83       	std	Y+1, r24	; 0x01
void UART_sendString(const uint8 *Str)
{
	uint8 i = 0;

	/* Send the whole string */
	while(Str[i] != '\0')
    2e2a:	89 81       	ldd	r24, Y+1	; 0x01
    2e2c:	28 2f       	mov	r18, r24
    2e2e:	30 e0       	ldi	r19, 0x00	; 0
    2e30:	8a 81       	ldd	r24, Y+2	; 0x02
    2e32:	9b 81       	ldd	r25, Y+3	; 0x03
    2e34:	fc 01       	movw	r30, r24
    2e36:	e2 0f       	add	r30, r18
    2e38:	f3 1f       	adc	r31, r19
    2e3a:	80 81       	ld	r24, Z
    2e3c:	88 23       	and	r24, r24
    2e3e:	39 f7       	brne	.-50     	; 0x2e0e <UART_sendString+0x14>
	{
		UART_sendByte(*Str);
		Str++;
	}
	*******************************************************************/
}
    2e40:	0f 90       	pop	r0
    2e42:	0f 90       	pop	r0
    2e44:	0f 90       	pop	r0
    2e46:	cf 91       	pop	r28
    2e48:	df 91       	pop	r29
    2e4a:	08 95       	ret

00002e4c <UART_receiveString>:
/*
 * Description :
 * Receive the required string until the '#' symbol through UART from the other UART device.
 */
void UART_receiveString(uint8 *Str)
{
    2e4c:	0f 93       	push	r16
    2e4e:	1f 93       	push	r17
    2e50:	df 93       	push	r29
    2e52:	cf 93       	push	r28
    2e54:	00 d0       	rcall	.+0      	; 0x2e56 <UART_receiveString+0xa>
    2e56:	0f 92       	push	r0
    2e58:	cd b7       	in	r28, 0x3d	; 61
    2e5a:	de b7       	in	r29, 0x3e	; 62
    2e5c:	9b 83       	std	Y+3, r25	; 0x03
    2e5e:	8a 83       	std	Y+2, r24	; 0x02
	uint8 i = 0;
    2e60:	19 82       	std	Y+1, r1	; 0x01

	/* Receive the first byte */
	Str[i] = UART_recieveByte();
    2e62:	89 81       	ldd	r24, Y+1	; 0x01
    2e64:	28 2f       	mov	r18, r24
    2e66:	30 e0       	ldi	r19, 0x00	; 0
    2e68:	8a 81       	ldd	r24, Y+2	; 0x02
    2e6a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e6c:	8c 01       	movw	r16, r24
    2e6e:	02 0f       	add	r16, r18
    2e70:	13 1f       	adc	r17, r19
    2e72:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
    2e76:	f8 01       	movw	r30, r16
    2e78:	80 83       	st	Z, r24
    2e7a:	0f c0       	rjmp	.+30     	; 0x2e9a <UART_receiveString+0x4e>

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
	{
		i++;
    2e7c:	89 81       	ldd	r24, Y+1	; 0x01
    2e7e:	8f 5f       	subi	r24, 0xFF	; 255
    2e80:	89 83       	std	Y+1, r24	; 0x01
		Str[i] = UART_recieveByte();
    2e82:	89 81       	ldd	r24, Y+1	; 0x01
    2e84:	28 2f       	mov	r18, r24
    2e86:	30 e0       	ldi	r19, 0x00	; 0
    2e88:	8a 81       	ldd	r24, Y+2	; 0x02
    2e8a:	9b 81       	ldd	r25, Y+3	; 0x03
    2e8c:	8c 01       	movw	r16, r24
    2e8e:	02 0f       	add	r16, r18
    2e90:	13 1f       	adc	r17, r19
    2e92:	0e 94 ee 16 	call	0x2ddc	; 0x2ddc <UART_recieveByte>
    2e96:	f8 01       	movw	r30, r16
    2e98:	80 83       	st	Z, r24

	/* Receive the first byte */
	Str[i] = UART_recieveByte();

	/* Receive the whole string until the '#' */
	while(Str[i] != '#')
    2e9a:	89 81       	ldd	r24, Y+1	; 0x01
    2e9c:	28 2f       	mov	r18, r24
    2e9e:	30 e0       	ldi	r19, 0x00	; 0
    2ea0:	8a 81       	ldd	r24, Y+2	; 0x02
    2ea2:	9b 81       	ldd	r25, Y+3	; 0x03
    2ea4:	fc 01       	movw	r30, r24
    2ea6:	e2 0f       	add	r30, r18
    2ea8:	f3 1f       	adc	r31, r19
    2eaa:	80 81       	ld	r24, Z
    2eac:	83 32       	cpi	r24, 0x23	; 35
    2eae:	31 f7       	brne	.-52     	; 0x2e7c <UART_receiveString+0x30>
		i++;
		Str[i] = UART_recieveByte();
	}

	/* After receiving the whole string plus the '#', replace the '#' with '\0' */
	Str[i] = '\0';
    2eb0:	89 81       	ldd	r24, Y+1	; 0x01
    2eb2:	28 2f       	mov	r18, r24
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	8a 81       	ldd	r24, Y+2	; 0x02
    2eb8:	9b 81       	ldd	r25, Y+3	; 0x03
    2eba:	fc 01       	movw	r30, r24
    2ebc:	e2 0f       	add	r30, r18
    2ebe:	f3 1f       	adc	r31, r19
    2ec0:	10 82       	st	Z, r1
}
    2ec2:	0f 90       	pop	r0
    2ec4:	0f 90       	pop	r0
    2ec6:	0f 90       	pop	r0
    2ec8:	cf 91       	pop	r28
    2eca:	df 91       	pop	r29
    2ecc:	1f 91       	pop	r17
    2ece:	0f 91       	pop	r16
    2ed0:	08 95       	ret

00002ed2 <__udivmodsi4>:
    2ed2:	a1 e2       	ldi	r26, 0x21	; 33
    2ed4:	1a 2e       	mov	r1, r26
    2ed6:	aa 1b       	sub	r26, r26
    2ed8:	bb 1b       	sub	r27, r27
    2eda:	fd 01       	movw	r30, r26
    2edc:	0d c0       	rjmp	.+26     	; 0x2ef8 <__udivmodsi4_ep>

00002ede <__udivmodsi4_loop>:
    2ede:	aa 1f       	adc	r26, r26
    2ee0:	bb 1f       	adc	r27, r27
    2ee2:	ee 1f       	adc	r30, r30
    2ee4:	ff 1f       	adc	r31, r31
    2ee6:	a2 17       	cp	r26, r18
    2ee8:	b3 07       	cpc	r27, r19
    2eea:	e4 07       	cpc	r30, r20
    2eec:	f5 07       	cpc	r31, r21
    2eee:	20 f0       	brcs	.+8      	; 0x2ef8 <__udivmodsi4_ep>
    2ef0:	a2 1b       	sub	r26, r18
    2ef2:	b3 0b       	sbc	r27, r19
    2ef4:	e4 0b       	sbc	r30, r20
    2ef6:	f5 0b       	sbc	r31, r21

00002ef8 <__udivmodsi4_ep>:
    2ef8:	66 1f       	adc	r22, r22
    2efa:	77 1f       	adc	r23, r23
    2efc:	88 1f       	adc	r24, r24
    2efe:	99 1f       	adc	r25, r25
    2f00:	1a 94       	dec	r1
    2f02:	69 f7       	brne	.-38     	; 0x2ede <__udivmodsi4_loop>
    2f04:	60 95       	com	r22
    2f06:	70 95       	com	r23
    2f08:	80 95       	com	r24
    2f0a:	90 95       	com	r25
    2f0c:	9b 01       	movw	r18, r22
    2f0e:	ac 01       	movw	r20, r24
    2f10:	bd 01       	movw	r22, r26
    2f12:	cf 01       	movw	r24, r30
    2f14:	08 95       	ret

00002f16 <__prologue_saves__>:
    2f16:	2f 92       	push	r2
    2f18:	3f 92       	push	r3
    2f1a:	4f 92       	push	r4
    2f1c:	5f 92       	push	r5
    2f1e:	6f 92       	push	r6
    2f20:	7f 92       	push	r7
    2f22:	8f 92       	push	r8
    2f24:	9f 92       	push	r9
    2f26:	af 92       	push	r10
    2f28:	bf 92       	push	r11
    2f2a:	cf 92       	push	r12
    2f2c:	df 92       	push	r13
    2f2e:	ef 92       	push	r14
    2f30:	ff 92       	push	r15
    2f32:	0f 93       	push	r16
    2f34:	1f 93       	push	r17
    2f36:	cf 93       	push	r28
    2f38:	df 93       	push	r29
    2f3a:	cd b7       	in	r28, 0x3d	; 61
    2f3c:	de b7       	in	r29, 0x3e	; 62
    2f3e:	ca 1b       	sub	r28, r26
    2f40:	db 0b       	sbc	r29, r27
    2f42:	0f b6       	in	r0, 0x3f	; 63
    2f44:	f8 94       	cli
    2f46:	de bf       	out	0x3e, r29	; 62
    2f48:	0f be       	out	0x3f, r0	; 63
    2f4a:	cd bf       	out	0x3d, r28	; 61
    2f4c:	09 94       	ijmp

00002f4e <__epilogue_restores__>:
    2f4e:	2a 88       	ldd	r2, Y+18	; 0x12
    2f50:	39 88       	ldd	r3, Y+17	; 0x11
    2f52:	48 88       	ldd	r4, Y+16	; 0x10
    2f54:	5f 84       	ldd	r5, Y+15	; 0x0f
    2f56:	6e 84       	ldd	r6, Y+14	; 0x0e
    2f58:	7d 84       	ldd	r7, Y+13	; 0x0d
    2f5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    2f5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    2f5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    2f60:	b9 84       	ldd	r11, Y+9	; 0x09
    2f62:	c8 84       	ldd	r12, Y+8	; 0x08
    2f64:	df 80       	ldd	r13, Y+7	; 0x07
    2f66:	ee 80       	ldd	r14, Y+6	; 0x06
    2f68:	fd 80       	ldd	r15, Y+5	; 0x05
    2f6a:	0c 81       	ldd	r16, Y+4	; 0x04
    2f6c:	1b 81       	ldd	r17, Y+3	; 0x03
    2f6e:	aa 81       	ldd	r26, Y+2	; 0x02
    2f70:	b9 81       	ldd	r27, Y+1	; 0x01
    2f72:	ce 0f       	add	r28, r30
    2f74:	d1 1d       	adc	r29, r1
    2f76:	0f b6       	in	r0, 0x3f	; 63
    2f78:	f8 94       	cli
    2f7a:	de bf       	out	0x3e, r29	; 62
    2f7c:	0f be       	out	0x3f, r0	; 63
    2f7e:	cd bf       	out	0x3d, r28	; 61
    2f80:	ed 01       	movw	r28, r26
    2f82:	08 95       	ret

00002f84 <_exit>:
    2f84:	f8 94       	cli

00002f86 <__stop_program>:
    2f86:	ff cf       	rjmp	.-2      	; 0x2f86 <__stop_program>
